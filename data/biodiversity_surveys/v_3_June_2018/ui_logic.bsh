/*
 * GENERATED WITH FAIMS-TOOLS, SHA1: df6bf8194aa111d6f6855b5bde541c48541fcc1d
 */
import android.util.Log;
import android.os.Build.MODEL;
import java.util.concurrent.atomic.AtomicInteger;
import android.database.DatabaseUtils;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

final String MSG_LOADING = "Loading...";

final String USER_MENU_PATH = "Login/Login/Login";
userMenuPath = USER_MENU_PATH; // Depricated. Use `USER_MENU_PATH` instead

final long SESS_START_TIME = System.currentTimeMillis();

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userId   = "";
List   autoSaveGeo = null;
List   autoSaveAttrs = null;

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

if (isNull(USER_MENU_PATH)) {
  Log.w("", "`USER_MENU_PATH` is empty or null");
}

boolean isInUnitTestTime() {
  return android.os.Build.MODEL.equals("faims-mock-device");
}

void assert(boolean condition) {
  if (condition)
    return;

  String msg =
    "Test failed: " +
    "Line: " + this.namespace.getInvocationLine() +
    ": "     + this.namespace.getInvocationText() +
    ". "     + this.callstack;

  throw new Exception(msg);
}

// Like `any` in Python
boolean any(List booleans) {
  for (b : booleans)
    if (b) return true;
  return false;
}

String listToSqlString(List l){
  String sqlString = "(";
  for (int i = 0; i < l.size() - 1; i++) {
    element = l.get(i);
    sqlString += "'" + element + "', ";
  }
  if (l.size() > 0) {
    int lastIndex = l.size() - 1;
    element = l.get(lastIndex);
    sqlString += "'" + element + "'";
  }
  sqlString += ")";

  return sqlString;
}

// Run a list of queries one-after-the-other. The next query starts executing
// once the previous finishes.
//
// `callbacks` is a list of `FetchCallback` objects corresponding to each query
// in `queries`. Although `callbacks` cannot be null, any of it elements can.
void sequentialFetchAll(List queries, List callbacks) {
  if (queries == null || callbacks == null)
    throw IllegalArgumentException("Arguments cannot be null");
  if (queries.size() != callbacks.size())
    throw IllegalArgumentException("Argument lists must have the same length");

  if (queries.size() == 0)
    return;

  String        queriesHead   = queries  .get(0);
  FetchCallback callbacksHead = callbacks.get(0);

  List queriesTail   = queries  .subList(1, queries  .size());
  List callbacksTail = callbacks.subList(1, callbacks.size());

  FetchCallback executeTail = new FetchCallback() {
    onFetch(result) {
      if (callbacksHead != null)
        callbacksHead.onFetch(result);

      sequentialFetchAll(queriesTail, callbacksTail);
    }

    onError(String message) {
      if (callbacksHead != null)
        callbacksHead.onError(message);
    }
  };

  fetchAll(queriesHead, executeTail);
}

/******************************************************************************/
/*                                STRING UTILS                                */
/******************************************************************************/

/* Works similarly to Java's String.replaceFirst, except the `needle` is a
 * string instead of a regex.
 */
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

/* Replaces `placeholder` in an SQL `query` with `replacement`. The following
 * example returns the string
 * "SELECT * FROM table WHERE col1 = 'my replacement'":
 *
 * dbReplaceFirst(
 *     "SELECT * FROM table WHERE col1 = {my_placeholder}",
 *     "{my_placeholder}",
 *     "my replacement"
 * );
 */
String dbReplaceFirst(String query, String placeholder, String replacement) {
  String escapedReplacement = DatabaseUtils.sqlEscapeString(replacement);
  return replaceFirst(query, placeholder, escapedReplacement);
}

String dbReplaceFirst(String query, String replacement) {
  return dbReplaceFirst(query, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

Map MEMOISED_FILTERED_BY_REGEX = new LinkedHashMap();

List filterListByRegex(List unfiltered, String regex, boolean forceUpdate) {
  // Return a copy of the memoised result if possible. It's important to return
  // a copy because if the contents of the list are modified, memoisation will
  // break.
  List key = new ArrayList();
  key.add(unfiltered);
  key.add(regex);

  List memoised = MEMOISED_FILTERED_BY_REGEX.get(key);
  if (memoised != null && !forceUpdate)
    return new ArrayList(memoised);

  // Compute the filtered list
  List filteredList;
  Set  filteredSet = new LinkedHashSet();
  for (element : unfiltered)
    if (element.matches(regex))
      filteredSet.add(element);
  filteredList = new ArrayList(filteredSet);

  // Memoise and return
  MEMOISED_FILTERED_BY_REGEX.put(key, filteredList);
  return new ArrayList(filteredList);
}

List filterListByRegex(List unfiltered, String regex) {
  return filterListByRegex(unfiltered, regex, false);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/************************** FUNCTION-STRING MAPPING ***************************/
/* Allows reflected functions to be associated with a key and called later    */
/* on. This is mostly useful for de-spagehettifying calls to `addOnEvent`,    */
/* which would otherwise effectively use eval.                                */
/******************************************************************************/
Map KEY_TO_FUN_NAME = new HashMap();
Map KEY_TO_FUN_ARGS = new HashMap();

String function2key(String function, Object[] args) {
  if (args == null)
    args = new Object[0];

  String key = getRandomString(64); // 64 ==> Odds of collision ~= 1e-115

  KEY_TO_FUN_NAME.put(key, function);
  KEY_TO_FUN_ARGS.put(key, args);

  return key;
}

key2call(String key) {
  String   funName = KEY_TO_FUN_NAME.get(key);
  Object[] funArgs = KEY_TO_FUN_ARGS.get(key);

  if (funName == null) return;
  if (funArgs == null) return;

  this.invokeMethod(funName, funArgs);
}

String function2callableString(String function, Object[] args) {
  return fun2str("key2call", function2key(function, args));
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP    = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP     = "";
String  PREVIOUSLY_DISPLAYED_TAB          = "";
String  CURRENTLY_DISPLAYED_TAB           = "";
Map     REF_TO_TYPE                       = new LinkedHashMap();
HashSet DATA_REFS                         = new HashSet();
HashSet NO_UI_REFS                        = new HashSet();
HashSet HIER_REFS                         = new HashSet();
Map     VP_REF_TO_REF                     = new HashMap();
HashSet REFS_AS_HASH_SET                  = null;
List    REFS_AS_LIST                      = null;
List    TAB_GROUPS_AS_LIST                = new ArrayList();
HashSet TAB_GROUPS_AS_HASH_SET            = null;
List    TABS_AS_LIST                      = new ArrayList();
HashSet TABS_AS_HASH_SET                  = null;
HashMap ATTRIB_NAMES_NON_STANDARD         = new HashMap();
List    NODATA_TAB_GROUPS                 = new ArrayList();
List    NOAUTOSAVE_TAB_GROUPS             = new ArrayList();
HashSet NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET = null;
NODATA_TAB_GROUPS.add("Login");
NODATA_TAB_GROUPS.add("Start");

REF_TO_TYPE.put("Login/Login/Login", "list");
REF_TO_TYPE.put("Start/Main/Guide", "webview");
REF_TO_TYPE.put("Start/Main/Start_Tracklog", "button");
REF_TO_TYPE.put("Start/Main/BR_1", "webview");
REF_TO_TYPE.put("Start/Main/Setting_up_Trap", "button");
REF_TO_TYPE.put("Start/Main/Checking_Trap", "button");
REF_TO_TYPE.put("Start/Main/Animal_outside_Trap", "button");
REF_TO_TYPE.put("Start/Main/Plant_Survey", "button");
REF_TO_TYPE.put("Start/Main/Cultural_Knowledge", "button");
REF_TO_TYPE.put("Start/Main/Notes", "button");
REF_TO_TYPE.put("Start/Main/BR_2", "webview");
REF_TO_TYPE.put("Start/Main/Stop_Tracklog", "button");
REF_TO_TYPE.put("Start/Map/Map", "map");
REF_TO_TYPE.put("Start/Map/Center_Me_1", "button");
REF_TO_TYPE.put("Start/Map/Save_Map_Settings_1", "button");
REF_TO_TYPE.put("Start/Map/Load_Highlighted_Record", "button");
REF_TO_TYPE.put("Start/Search/Search_Term", "input");
REF_TO_TYPE.put("Start/Search/Search_Button", "button");
REF_TO_TYPE.put("Start/Search/Entity_Types", "dropdown");
REF_TO_TYPE.put("Start/Search/Entity_List", "list");
REF_TO_TYPE.put("Start/Tracklog/internalExternalGPS", "radio");
REF_TO_TYPE.put("Start/Tracklog/refreshText", "input");
REF_TO_TYPE.put("Start/Tracklog/startGPSButton", "button");
REF_TO_TYPE.put("Start/Tracklog/stopGPSButton", "button");
REF_TO_TYPE.put("Start/Tracklog/trackdistText", "input");
REF_TO_TYPE.put("Start/Tracklog/trackdistButton", "button");
REF_TO_TYPE.put("Start/Tracklog/tracktimeText", "input");
REF_TO_TYPE.put("Start/Tracklog/tracktimeButton", "button");
REF_TO_TYPE.put("Start/Tracklog/trackOffButton", "button");
REF_TO_TYPE.put("Start/Tracklog/trackStatus", "input");
REF_TO_TYPE.put("Start/Tracklog/SyncOn", "button");
REF_TO_TYPE.put("Start/Tracklog/SyncOff", "button");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Date", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Time", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Setup_Trap_author", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Place_name", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/What_type_of_trap", "dropdown");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Latitude", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Longitude", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Northing", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Easting", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Accuracy", "input");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Submit_Spacer", "webview");
REF_TO_TYPE.put("Setup_Trap/Setting_up/Submit_and_Return", "button");
REF_TO_TYPE.put("Check_Trap/Checking/Date", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Time", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Check_Trap_author", "input");
REF_TO_TYPE.put("Check_Trap/Checking/What_trap_are_you_checking", "dropdown");
REF_TO_TYPE.put("Check_Trap/Checking/What_did_you_find_in_trap", "picture");
REF_TO_TYPE.put("Check_Trap/Checking/Notes", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Take_Photo", "camera");
REF_TO_TYPE.put("Check_Trap/Checking/Take_Photo_Button_1", "button");
REF_TO_TYPE.put("Check_Trap/Checking/Talk_about_animal", "audio");
REF_TO_TYPE.put("Check_Trap/Checking/Talk_about_animal_Button_1", "button");
REF_TO_TYPE.put("Check_Trap/Checking/Tissue_number", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Snout_to_vent_length_mm", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Count", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Latitude", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Longitude", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Northing", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Easting", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Accuracy", "input");
REF_TO_TYPE.put("Check_Trap/Checking/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Check_Trap/Checking/Submit_Spacer", "webview");
REF_TO_TYPE.put("Check_Trap/Checking/Submit_and_Return", "button");
REF_TO_TYPE.put("Animal_outside/Animal/Date", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Time", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Animal_outside_author", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Animal_outside_trap", "picture");
REF_TO_TYPE.put("Animal_outside/Animal/Notes", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Take_Photo", "camera");
REF_TO_TYPE.put("Animal_outside/Animal/Take_Photo_Button_1", "button");
REF_TO_TYPE.put("Animal_outside/Animal/Talk_about_animal", "audio");
REF_TO_TYPE.put("Animal_outside/Animal/Talk_about_animal_Button_1", "button");
REF_TO_TYPE.put("Animal_outside/Animal/Tissue_number", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Snout_to_vent_length_mm", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Count", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Latitude", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Longitude", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Northing", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Easting", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Accuracy", "input");
REF_TO_TYPE.put("Animal_outside/Animal/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Animal_outside/Animal/Submit_Spacer", "webview");
REF_TO_TYPE.put("Animal_outside/Animal/Submit_and_Return", "button");
REF_TO_TYPE.put("Plant_Survey/Plant/Date", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Time", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Plant_Survey_author", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Type_plant_name", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Take_Photo", "camera");
REF_TO_TYPE.put("Plant_Survey/Plant/Take_Photo_Button_1", "button");
REF_TO_TYPE.put("Plant_Survey/Plant/Latitude", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Longitude", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Northing", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Easting", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Accuracy", "input");
REF_TO_TYPE.put("Plant_Survey/Plant/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Plant_Survey/Plant/Submit_Spacer", "webview");
REF_TO_TYPE.put("Plant_Survey/Plant/Submit_and_Return", "button");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Date", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Time", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Cultural_Knowledge_author", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Who_is_talking", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/What_is_being_talked_about", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now", "audio");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now_Button_1", "button");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Video_recording", "video");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Video_recording_Button_1", "button");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Write_down_notes_here", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Latitude", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Longitude", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Northing", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Easting", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Accuracy", "input");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Submit_Spacer", "webview");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge/Submit_and_Return", "button");
REF_TO_TYPE.put("Notes/Notes/Date", "input");
REF_TO_TYPE.put("Notes/Notes/Time", "input");
REF_TO_TYPE.put("Notes/Notes/Notes_author", "input");
REF_TO_TYPE.put("Notes/Notes/Notes", "input");
REF_TO_TYPE.put("Notes/Notes/Take_Photo", "camera");
REF_TO_TYPE.put("Notes/Notes/Take_Photo_Button_1", "button");
REF_TO_TYPE.put("Notes/Notes/Latitude", "input");
REF_TO_TYPE.put("Notes/Notes/Longitude", "input");
REF_TO_TYPE.put("Notes/Notes/Northing", "input");
REF_TO_TYPE.put("Notes/Notes/Easting", "input");
REF_TO_TYPE.put("Notes/Notes/Accuracy", "input");
REF_TO_TYPE.put("Notes/Notes/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Notes/Notes/Submit_Spacer", "webview");
REF_TO_TYPE.put("Notes/Notes/Submit_and_Return", "button");
REF_TO_TYPE.put("Tracklog/Tracklog/Timestamp", "");
REF_TO_TYPE.put("Tracklog/Tracklog/TracklogTeam", "");
REF_TO_TYPE.put("Tracklog/Tracklog/Latitude", "");
REF_TO_TYPE.put("Tracklog/Tracklog/Longitude", "");
REF_TO_TYPE.put("Tracklog/Tracklog/Heading", "");
REF_TO_TYPE.put("Tracklog/Tracklog/Accuracy", "");
REF_TO_TYPE.put("Login/Login", "tab");
REF_TO_TYPE.put("Start/Main", "tab");
REF_TO_TYPE.put("Start/Map", "tab");
REF_TO_TYPE.put("Start/Search", "tab");
REF_TO_TYPE.put("Start/Tracklog", "tab");
REF_TO_TYPE.put("Setup_Trap/Setting_up", "tab");
REF_TO_TYPE.put("Check_Trap/Checking", "tab");
REF_TO_TYPE.put("Animal_outside/Animal", "tab");
REF_TO_TYPE.put("Plant_Survey/Plant", "tab");
REF_TO_TYPE.put("Cultural_Knowledge/Cultural_Knowledge", "tab");
REF_TO_TYPE.put("Notes/Notes", "tab");
REF_TO_TYPE.put("Tracklog/Tracklog", "tab");

DATA_REFS.add("Setup_Trap/Setting_up/Date");
DATA_REFS.add("Setup_Trap/Setting_up/Time");
DATA_REFS.add("Setup_Trap/Setting_up/Setup_Trap_author");
DATA_REFS.add("Setup_Trap/Setting_up/Place_name");
DATA_REFS.add("Setup_Trap/Setting_up/What_type_of_trap");
DATA_REFS.add("Setup_Trap/Setting_up/Latitude");
DATA_REFS.add("Setup_Trap/Setting_up/Longitude");
DATA_REFS.add("Setup_Trap/Setting_up/Northing");
DATA_REFS.add("Setup_Trap/Setting_up/Easting");
DATA_REFS.add("Setup_Trap/Setting_up/Accuracy");
DATA_REFS.add("Check_Trap/Checking/Date");
DATA_REFS.add("Check_Trap/Checking/Time");
DATA_REFS.add("Check_Trap/Checking/Check_Trap_author");
DATA_REFS.add("Check_Trap/Checking/What_trap_are_you_checking");
DATA_REFS.add("Check_Trap/Checking/What_did_you_find_in_trap");
DATA_REFS.add("Check_Trap/Checking/Notes");
DATA_REFS.add("Check_Trap/Checking/Take_Photo");
DATA_REFS.add("Check_Trap/Checking/Talk_about_animal");
DATA_REFS.add("Check_Trap/Checking/Tissue_number");
DATA_REFS.add("Check_Trap/Checking/Snout_to_vent_length_mm");
DATA_REFS.add("Check_Trap/Checking/Count");
DATA_REFS.add("Check_Trap/Checking/Latitude");
DATA_REFS.add("Check_Trap/Checking/Longitude");
DATA_REFS.add("Check_Trap/Checking/Northing");
DATA_REFS.add("Check_Trap/Checking/Easting");
DATA_REFS.add("Check_Trap/Checking/Accuracy");
DATA_REFS.add("Animal_outside/Animal/Date");
DATA_REFS.add("Animal_outside/Animal/Time");
DATA_REFS.add("Animal_outside/Animal/Animal_outside_author");
DATA_REFS.add("Animal_outside/Animal/Animal_outside_trap");
DATA_REFS.add("Animal_outside/Animal/Notes");
DATA_REFS.add("Animal_outside/Animal/Take_Photo");
DATA_REFS.add("Animal_outside/Animal/Talk_about_animal");
DATA_REFS.add("Animal_outside/Animal/Tissue_number");
DATA_REFS.add("Animal_outside/Animal/Snout_to_vent_length_mm");
DATA_REFS.add("Animal_outside/Animal/Count");
DATA_REFS.add("Animal_outside/Animal/Latitude");
DATA_REFS.add("Animal_outside/Animal/Longitude");
DATA_REFS.add("Animal_outside/Animal/Northing");
DATA_REFS.add("Animal_outside/Animal/Easting");
DATA_REFS.add("Animal_outside/Animal/Accuracy");
DATA_REFS.add("Plant_Survey/Plant/Date");
DATA_REFS.add("Plant_Survey/Plant/Time");
DATA_REFS.add("Plant_Survey/Plant/Plant_Survey_author");
DATA_REFS.add("Plant_Survey/Plant/Type_plant_name");
DATA_REFS.add("Plant_Survey/Plant/Take_Photo");
DATA_REFS.add("Plant_Survey/Plant/Latitude");
DATA_REFS.add("Plant_Survey/Plant/Longitude");
DATA_REFS.add("Plant_Survey/Plant/Northing");
DATA_REFS.add("Plant_Survey/Plant/Easting");
DATA_REFS.add("Plant_Survey/Plant/Accuracy");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Date");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Time");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Cultural_Knowledge_author");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Who_is_talking");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/What_is_being_talked_about");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Video_recording");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Write_down_notes_here");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Latitude");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Longitude");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Northing");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Easting");
DATA_REFS.add("Cultural_Knowledge/Cultural_Knowledge/Accuracy");
DATA_REFS.add("Notes/Notes/Date");
DATA_REFS.add("Notes/Notes/Time");
DATA_REFS.add("Notes/Notes/Notes_author");
DATA_REFS.add("Notes/Notes/Notes");
DATA_REFS.add("Notes/Notes/Take_Photo");
DATA_REFS.add("Notes/Notes/Latitude");
DATA_REFS.add("Notes/Notes/Longitude");
DATA_REFS.add("Notes/Notes/Northing");
DATA_REFS.add("Notes/Notes/Easting");
DATA_REFS.add("Notes/Notes/Accuracy");
DATA_REFS.add("Tracklog/Tracklog/Timestamp");
DATA_REFS.add("Tracklog/Tracklog/TracklogTeam");
DATA_REFS.add("Tracklog/Tracklog/Latitude");
DATA_REFS.add("Tracklog/Tracklog/Longitude");
DATA_REFS.add("Tracklog/Tracklog/Heading");
DATA_REFS.add("Tracklog/Tracklog/Accuracy");

NOAUTOSAVE_TAB_GROUPS.add("Setup_Trap");
NOAUTOSAVE_TAB_GROUPS.add("Check_Trap");
NOAUTOSAVE_TAB_GROUPS.add("Animal_outside");
NOAUTOSAVE_TAB_GROUPS.add("Plant_Survey");
NOAUTOSAVE_TAB_GROUPS.add("Cultural_Knowledge");
NOAUTOSAVE_TAB_GROUPS.add("Notes");

NO_UI_REFS.add("Tracklog/Tracklog/Timestamp");
NO_UI_REFS.add("Tracklog/Tracklog/TracklogTeam");
NO_UI_REFS.add("Tracklog/Tracklog/Latitude");
NO_UI_REFS.add("Tracklog/Tracklog/Longitude");
NO_UI_REFS.add("Tracklog/Tracklog/Heading");
NO_UI_REFS.add("Tracklog/Tracklog/Accuracy");
NO_UI_REFS.add("Tracklog");



HIER_REFS.add("Check_Trap/Checking/What_did_you_find_in_trap");
HIER_REFS.add("Animal_outside/Animal/Animal_outside_trap");

TAB_GROUPS_AS_LIST.add("Login");
TAB_GROUPS_AS_LIST.add("Start");
TAB_GROUPS_AS_LIST.add("Setup_Trap");
TAB_GROUPS_AS_LIST.add("Check_Trap");
TAB_GROUPS_AS_LIST.add("Animal_outside");
TAB_GROUPS_AS_LIST.add("Plant_Survey");
TAB_GROUPS_AS_LIST.add("Cultural_Knowledge");
TAB_GROUPS_AS_LIST.add("Notes");
TAB_GROUPS_AS_LIST.add("Tracklog");

TABS_AS_LIST.add("Login/Login");
TABS_AS_LIST.add("Start/Main");
TABS_AS_LIST.add("Start/Map");
TABS_AS_LIST.add("Start/Search");
TABS_AS_LIST.add("Start/Tracklog");
TABS_AS_LIST.add("Setup_Trap/Setting_up");
TABS_AS_LIST.add("Check_Trap/Checking");
TABS_AS_LIST.add("Animal_outside/Animal");
TABS_AS_LIST.add("Plant_Survey/Plant");
TABS_AS_LIST.add("Cultural_Knowledge/Cultural_Knowledge");
TABS_AS_LIST.add("Notes/Notes");
TABS_AS_LIST.add("Tracklog/Tracklog");

ATTRIB_NAMES_NON_STANDARD.put("Setup_Trap/Setting_up/Date", "Setup Trap Date");
ATTRIB_NAMES_NON_STANDARD.put("Setup_Trap/Setting_up/Time", "Setup Trap Time");
ATTRIB_NAMES_NON_STANDARD.put("Check_Trap/Checking/Date", "Check Trap Date");
ATTRIB_NAMES_NON_STANDARD.put("Check_Trap/Checking/Time", "Check Trap Time");
ATTRIB_NAMES_NON_STANDARD.put("Animal_outside/Animal/Date", "Animal outside Date");
ATTRIB_NAMES_NON_STANDARD.put("Animal_outside/Animal/Time", "Animal outside Time");
ATTRIB_NAMES_NON_STANDARD.put("Plant_Survey/Plant/Date", "Plant Survey Date");
ATTRIB_NAMES_NON_STANDARD.put("Plant_Survey/Plant/Time", "Plant Survey Time");
ATTRIB_NAMES_NON_STANDARD.put("Cultural_Knowledge/Cultural_Knowledge/Date", "Cultural Knowledge Date");
ATTRIB_NAMES_NON_STANDARD.put("Cultural_Knowledge/Cultural_Knowledge/Time", "Cultural Knowledge Time");
ATTRIB_NAMES_NON_STANDARD.put("Notes/Notes/Date", "Notes Date");
ATTRIB_NAMES_NON_STANDARD.put("Notes/Notes/Time", "Notes Time");

String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

List getRefs() {
  return getRefsAsList();
}

List getRefsAsList() {
  if (REFS_AS_LIST == null)
    REFS_AS_LIST = new ArrayList(REF_TO_TYPE.keySet());
  return REFS_AS_LIST;
}

HashSet getRefsAsHashSet() {
  if (REFS_AS_HASH_SET == null)
    REFS_AS_HASH_SET = new HashSet(REF_TO_TYPE.keySet());
  return REFS_AS_HASH_SET;
}

List getRefsByType(String type) {
  List refs = new ArrayList();
  for (String ref : getRefs())
    if (getType(ref).equals(type))
      refs.add(ref);
  return refs;
}

List getNoautosaveTabGroups() {
  return NOAUTOSAVE_TAB_GROUPS;
}

HashSet getNoautosaveTabGroupsAsHashSet() {
  if (NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET == null)
    NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET = new HashSet(NOAUTOSAVE_TAB_GROUPS);
  return NOAUTOSAVE_TAB_GROUPS_AS_HASH_SET;
}

boolean isFlaggedNoautosave(String ref) {
  return getNoautosaveTabGroupsAsHashSet().contains(ref);
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

boolean hasNoUi(String ref) {
  return NO_UI_REFS.contains(ref);
}

String getVpRef(String ref) {
  return VP_REF_TO_REF.get(ref);
}

boolean hasVpRef(String ref) {
  return getVpRef(ref) != null;
}

boolean isHier(String ref) {
  return HIER_REFS.contains(ref);
}

boolean isValidRef(String ref) {
  boolean isValidRef = false;
  if (!isInUnitTestTime())
    isValidRef = isValidRef || linker.getUIRenderer().getViewByRef(ref) != null;
  isValidRef = isValidRef || getRefsAsHashSet()     .contains(ref);
  isValidRef = isValidRef || getTabsAsHashSet()     .contains(ref);
  isValidRef = isValidRef || getTabGroupsAsHashSet().contains(ref);
  return isValidRef;
}

boolean validateRef(ref) {
  String msg =
    isInUnitTestTime() ?
    "Ref '" + ref + "' may not refer to a UI element" :
    "Ref '" + ref + "' does not refer to a UI element";

  if (!isValidRef(ref) && !"module".equals(ref)) {
    Log.w(this.callstack.get(1).getInvocationText(), msg);
    return false;
  }
  return true;
}

List getTabGroups() { return getTabGroupsAsList(); }
List getTabGroupsAsList() { return TAB_GROUPS_AS_LIST; }

HashSet getTabGroupsAsHashSet() {
  if (TAB_GROUPS_AS_HASH_SET == null)
    TAB_GROUPS_AS_HASH_SET = new HashSet(TAB_GROUPS_AS_LIST);
  return TAB_GROUPS_AS_HASH_SET;
}

List getTabs() { return getTabsAsList(); }
List getTabsAsList() { return TABS_AS_LIST; }

HashSet getTabsAsHashSet() {
  if (TABS_AS_HASH_SET == null)
    TABS_AS_HASH_SET = new HashSet(TABS_AS_LIST);
  return TABS_AS_HASH_SET;
}

List getStartingIdRefs() {
  List l = new ArrayList();
  
  return l;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  menuTypes.add("checkbox");
  menuTypes.add("dropdown");
  menuTypes.add("list");
  menuTypes.add("picture");
  menuTypes.add("radio");
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  mediaTypes.add("audio");
  mediaTypes.add("camera");
  mediaTypes.add("file");
  mediaTypes.add("video");
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  return NODATA_TAB_GROUPS.contains(tabGroup);
}

void updateDisplayedTab(String tab) {
  if (tab.equals(CURRENTLY_DISPLAYED_TAB))
    return;

  PREVIOUSLY_DISPLAYED_TAB = CURRENTLY_DISPLAYED_TAB;
  CURRENTLY_DISPLAYED_TAB  = tab;
}

String getPreviouslyDisplayedTab() {
  return PREVIOUSLY_DISPLAYED_TAB;
}

String getDisplayedTab() {
  return CURRENTLY_DISPLAYED_TAB;
}

void updateDisplayedTabGroup(String tabGroup) {
  if (tabGroup.equals(CURRENTLY_DISPLAYED_TAB_GROUP))
    return;

  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref) ||
         getDisplayedTab     ().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

boolean isTab(String ref) {
  return getTabsAsHashSet().contains(ref);
}

boolean isTabGroup(String ref) {
  return getTabGroupsAsHashSet().contains(ref);
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  return guessArch16nValFromRef(ref);
}

String guessArch16nValFromRef(String ref) {
  String arch16nKey = getArch16nKey(ref);
  return guessArch16nValFromKey(arch16nKey);
}

String guessArch16nValFromKey(String key) {
  if (isNull(key)) return "";
  key = key.replaceAll("_", " ");
  key = key.replaceAll("^\\{", "");
  key = key.replaceAll("\\}$", "");
  return key;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef))
    return null;

  if (ATTRIB_NAMES_NON_STANDARD.containsKey(ref))
    return ATTRIB_NAMES_NON_STANDARD.get(ref);

  return guiElementRef.replaceAll("_", " ");
}

List getAttribsMatchingRef(String pattern) {
  Set attribsSet;

  List attribsList = new ArrayList();
  for (ref : getRefsMatching(pattern))
    attribsList.add(getAttributeName(ref));

  attribsSet  = new HashSet(attribsList);
  attribsList = new ArrayList(attribsSet);

  return attribsList;
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

List getRefsMatching(String pattern) {
  Map dict = new HashMap();
  dict.put('/', "\\/");
  dict.put('*', ".*");
  String regex = translate(pattern, dict);

  return filterListByRegex(getRefs(), regex);
}

String getRefMatching(String pattern) {
  List matches = getRefsMatching(pattern);
  if (matches.size() == 0)
    return "";
  return matches.get(0);
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a savable, auto-generated tab group is    */
/*         shown (but possibly before the "show" event is triggered).         */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*   - "firstsave" --- Similar to "save", but only triggered upon the first   */
/*         save (i.e. the save which creates the arch ent). When this event   */
/*         is triggered, it occurs immediately before the "save" event.       */
/*                                                                            */
/* Additionally, the binding accumulator augments the "load" event so that    */
/* the `statement` in addOnEvent("module", "load", statement) gets executed   */
/* after the module has finished loading. (That is, when this script has been */
/* loaded, including the execution of any asynchronous functions.)            */
/*                                                                            */
/* Importantly, a single call to `bindOnEvents` must occur after all the      */
/* `addOnEvent` and `delOnEvent` calls. Calling `bindOnEvents` is what        */
/* actually establishes the bindings once they have been added to the         */
/* accumulator.                                                               */
/******************************************************************************/
// This counts the number of _a_synchonrous jobs before the module is considered
// to be loaded.
//     Only one synchronous job is counted, and that's loading this script; that
// is why this variable is initialised to 1.
AtomicInteger NUM_JOBS_TILL_LOADED = new AtomicInteger(1);
AtomicInteger NUM_FETCHES_OCCURING = new AtomicInteger(0);

final int PRECEDENCE_MIN = 0;
final int PRECEDENCE_MID = Integer.MAX_VALUE/2;
final int PRECEDENCE_MAX = Integer.MAX_VALUE;

int NUM_EVTS = 0;
Map ON_EVT_CONDS  = new HashMap(); // (ref, event type) -> callback statement
Map ON_EVT_STMTS  = new HashMap(); // (ref, event type) -> callback statement
Set CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`

CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");
CUSTOM_EVENTS.add("firstsave");

List getPrioritised(String statement, int priority) {
  List prioritised = new ArrayList();

  prioritised.add(statement);
  prioritised.add(priority);
  prioritised.add(NUM_EVTS++);

  return prioritised;
}

Comparator PrioritisedComparator() {
  int compare(List a, List b) {
    int aPriority = a.get(1);
    int bPriority = b.get(1);

    int aEvtNum   = a.get(2);
    int bEvtNum   = b.get(2);

    if (aPriority > bPriority) return -1;
    if (aPriority < bPriority) return +1;
    if (aEvtNum   > bEvtNum  ) return +1;
    if (aEvtNum   < bEvtNum  ) return -1;
    return 0;
  }
  boolean equals(a, b) { return compare(a, b) == 0; }
  return this;
}

String getOnEventKey(String ref, String event) {
  return ref + SEP + event;
}

ArrayList getOnEventPriorities(String ref, String event, Map map) {
  String    key = getOnEventKey(ref, event);
  ArrayList val = (ArrayList) map.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

/* Returns the set of statements bound to an element at `ref` and occurring on
 * `event`.
 */
ArrayList getOnEventVal(String ref, String event, Map map) {
  String    key  = getOnEventKey(ref, event);
  ArrayList val  = (ArrayList) map.get(key);
  ArrayList val_ = new ArrayList();

  if (val == null)
    val = new ArrayList();

  // Sort the vals by their precedence
  Collections.sort(val, PrioritisedComparator());

  // Unpack the inner objects (Strings) from the `Prioritised` objects, put them
  // in `val_`.
  for (v : val)
    val_.add(v.get(0));

  return val_;
}

ArrayList getConds(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_CONDS);
}

ArrayList getStatements(String ref, String event) {
  return getOnEventVal(ref, event, ON_EVT_STMTS);
}

void addToOnEventPriorities(
    String ref,
    String event,
    String statement,
    int precedence,
    Map map
) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `ON_EVT_STMTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `ON_EVT_STMTS.put` is required.
  //
  // `precedence` controls the order that statements are executed. Roughly,
  // a statement with a higher precedence is executed before a statement with
  // a lower precedence.
  assert(precedence >= 0);
  assert(precedence <= Integer.MAX_VALUE);

  validateRef(ref);

  String    key = getOnEventKey       (ref, event);
  ArrayList val = getOnEventPriorities(ref, event, map);

  ArrayList statements = val;

  statements.add(getPrioritised(statement, precedence));
  map.put(key, statements);
}

String getOnEventString(
    String ref,
    String event,
    Map map,
    String sep,
    boolean doAddTrailingSep
) {
  ArrayList stmts = getOnEventVal(ref, event, map);
  String stmtsStr = "";

  if (stmts.size() > 0)
    stmtsStr = stmts.get(0);

  for (int i = 1; i < stmts.size(); i++)
    stmtsStr += sep + stmts.get(i);

  if (doAddTrailingSep)
    stmtsStr += sep;

  return stmtsStr;
}

String getStatementsString(String ref, String event) {
  String condsStr = getOnEventString(ref, event, ON_EVT_CONDS, " && ", false);
  String stmtsStr = getOnEventString(ref, event, ON_EVT_STMTS, "; "  , true);

  if (isNull(condsStr))
    return stmtsStr;
  return "if (" + condsStr + ") { " + stmtsStr + " }";
}

void executeOnEvent(String ref, String event) {
  validateRef(ref);

  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  validateRef(ref);

  String    key = getOnEventKey(ref, event);
  ArrayList val = (ArrayList) ON_EVT_STMTS.get(key);

  if (val == null)
    return;

  for (Iterator i = val.iterator(); i.hasNext(); ) {
    obj = i.next();
    if (statement.equals(obj.get(0)))
      i.remove();
  }
}

void delOnEvents(String ref, String event) {
  validateRef(ref);

  String key = getOnEventKey(ref, event);
  ON_EVT_STMTS.remove(key);
}

void addOnEvent(String ref, String event, String statement, int precedence) {
  addToOnEventPriorities(ref, event, statement, precedence, ON_EVT_STMTS);
}

void addOnEventCond(String ref, String event, String check) {
  addToOnEventPriorities(ref, event, check, PRECEDENCE_MID, ON_EVT_CONDS);
}

void addOnEvent(String ref, String event, String statement) {
  addOnEvent(ref, event, statement, PRECEDENCE_MID);
}

void addOnEvent(
    String ref, String event, String function, Object[] args, int precedence
) {
  String statementString = function2callableString(function, args);
  addOnEvent(ref, event, statementString);
}

void addOnEvent(String ref, String event, String function, Object[] args) {
  addOnEvent(ref, event, function, args, PRECEDENCE_MID);
}

void addOnEventCond(String ref, String event, String check, Object[] args) {
  String checkString = runnable2runnableString(check);
  addOnEvent(ref, event, checkString);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (event.equals("load") && ref.equals("module")) {
    ;
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : ON_EVT_STMTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTab() {
  onLeaveTabGroup(getPreviouslyDisplayedTab());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void incJobsTillLoaded() {
  NUM_JOBS_TILL_LOADED.incrementAndGet();
}

boolean isModuleLoaded() {
  return NUM_JOBS_TILL_LOADED.get() == 0;
}

/* Returns `true` if the module has loaded.
 */
boolean decJobsTillLoaded() {
  return NUM_JOBS_TILL_LOADED.decrementAndGet() == 0;
}

void decAndExecIfModuleLoaded() {
  if (decJobsTillLoaded())
    executeOnEvent("module", "load");
}

boolean isDoingFetchEvent() {
  return NUM_FETCHES_OCCURING.get() > 0;
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work for
 * tab groups. The "leave" event is really triggered upon "show" of another tab
 * group.
 */
for (String ref : getTabGroups()) {
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, "show",   callback, PRECEDENCE_MAX);
  addOnEvent(ref, "create", callback, PRECEDENCE_MAX);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, "show", callback, PRECEDENCE_MAX);
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work for
 * tabs. The "leave" event is really triggered upon "show" of another tab.
 */
for (String ref : getTabs()) {
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTab", ref);
  addOnEvent(ref, "show",   callback, PRECEDENCE_MAX);

  // Trigger on leave tab group event
  callback = "onLeaveTab()";
  addOnEvent(ref, "show", callback, PRECEDENCE_MAX);
}

for (String tg : getTabGroups()) {
  if (isFlaggedNodata(tg))
    continue;

  addOnEvent(
      tg,
      "prefetch",
      "NUM_FETCHES_OCCURING.incrementAndGet()",
      PRECEDENCE_MAX
  );
  addOnEvent(
      tg,
      "fetch",
      "NUM_FETCHES_OCCURING.decrementAndGet()",
      0
  );
}

/******************************************************************************/
/*                     LOCALSETTINGS VIEW/TABLE CREATION                      */
/******************************************************************************/
void makeLocalId(){
  fetchOne(
      "CREATE TABLE IF NOT EXISTS perflog (" +
      "    id              INTEGER PRIMARY KEY," +
      "    deviceModel     TEXT," +
      "    sessStartMs     INTEGER," +
      "    parentNameSpace TEXT," +
      "    srcLine         TEXT," +
      "    query           TEXT," +
      "    queryStartMs    INTEGER," +
      "    queryStopMs     INTEGER," +
      "    numAentvalue    INTEGER," +
      "    numArchentity   INTEGER," +
      "    numRelationship INTEGER," +
      "    numAentreln     INTEGER " +
      ")"
  );

  fetchOne(
      "CREATE TABLE IF NOT EXISTS localSettings (" +
      "    key   TEXT PRIMARY KEY," +
      "    value TEXT" +
      ")"
  );

  fetchOne(
      "DROP VIEW IF EXISTS parentchild"
  );

  fetchOne(
      "CREATE VIEW parentchild AS "+
      "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
      "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) parent "+
      "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) child "+
      "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)"
  );
}
makeLocalId();

/******************************************************************************/
/*                            PERFORMANCE TESTING                             */
/*                                                                            */
/* Code to a) time queries; and b) create dummy records. (The vast majority   */
/* the code is for the latter.)                                               */
/******************************************************************************/
import android.os.StatFs;
import android.os.Environment;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.concurrent.ConcurrentLinkedQueue;

ConcurrentLinkedQueue PERF_FILES             = new ConcurrentLinkedQueue();
AtomicInteger         PERF_NUM_CBS_DONE_FILE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SAVE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SET  = null;
AtomicInteger         PERF_NUM_CBS_TODO_FILE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SAVE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SET  = null;
boolean               PERF_ALLOW_CREATION    = false;
String                PERF_TEST_IMG          = "";
                      PERF_TYPE_TREE         = null;
int                   PERF_PHOTOS_PER_FIELD  = 1;

int getNumDummyPhotos() {
  return getNumDummyPhotos(PERF_TYPE_TREE);
}

int getNumDummyPhotos(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyPhotos(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyPhotosAtNode(tree);
}

int getNumDummyPhotosAtNode(tree) {
  // Figure out how many camera refs there are at this node (i.e. in this arch
  // ent).
  List cameraRefs = getRefsByType("camera");
  List cameraRefsAtNode = new ArrayList();
  for (String ref : cameraRefs)
    if (getArchEntType(ref).equals(tree.label))
      cameraRefsAtNode.add(ref);

  return getNumDummyRecordsAtNode(tree) *
    cameraRefsAtNode.size() *
    PERF_PHOTOS_PER_FIELD;
}

int getNumDummyRecords() {
  getNumDummyRecords(PERF_TYPE_TREE);
}

int getNumDummyRecords(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyRecords(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyRecordsAtNode(tree);
}

int getNumDummyRecordsAtNode(tree) {
  int sum = 1;
  for (; tree.getParent() != null; tree = tree.getParent()) {
    sum *= tree.data;
  }
  return sum;
}

float getFileSizeInMBytes(String path) {
  File file = new File(path);
  return file.length() / 1000.f / 1000.f;
}

float getSizeDummyPhotosInMBytes() {
  return getNumDummyPhotos() * getFileSizeInMBytes(PERF_TEST_IMG);
}

String megabytesToString(float mb) {
  DecimalFormat df = new DecimalFormat();
  df.setMaximumFractionDigits(1);
  return df.format(mb);
}

String getSizeDummyPhotosInMBytesAsString() {
  return megabytesToString(getSizeDummyPhotosInMBytes());
}

float getFreeSpaceInMBytes() {
  StatFs statFs = new StatFs(Environment.getRootDirectory().getAbsolutePath());
  return statFs.getBlockCount() * statFs.getBlockSize() / 1000.f / 1000.f;
}

String getFreeSpaceInMBytesAsString() {
  return megabytesToString(getFreeSpaceInMBytes());
}

Tree(String label, Object data) {
  String label    = label;
  Object data     = data;
         parent   = null;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    tree.setParent(super);
    super.children.add(tree);
  }

  getChild(int i) {
    return super.children.get(i);
  }

  int getIndex() {
    if (super.getParent() == null)
      return -1;
    return super.getParent().getChildren().indexOf(super);
  }

  getDescendant(String ref) {
    String[] refStrArr  = ref.split("/");
    List     refIntList = new ArrayList();

    for (String refStr : refStrArr) {
      int refInt = Integer.parseInt(refStr);
      refIntList.add(refInt);
    }

    return super.getDescendant(refIntList);
  }

  getDescendant(List ref) {
    if (ref.size() == 0)
      return super;

    int  head = ref.get(0);
    List tail = ref.subList(1, ref.size());

    if (ref.size() == 1) return getChild(head);
    if (ref.size() >= 2) return getChild(head).getDescendant(tail);
  }

  String getAncestorRefString(String sep, String key) {
    String s = "";
    for (Object n = super; n.getParent() != null; n = n.getParent()) {
      String val = "";
      if (key.equals("index")) val = n.getIndex() + "";
      if (key.equals("label")) val = n.label;

      s = sep + val + s;
    }

    if (!s.equals(""))
      s = s.substring(sep.length(), s.length()); // Remove initial `sep`

    return s;
  }

  String getAncestorRefString() {
    return getAncestorRefString("/", "index");
  }

  List getChildren() {
    if (super.children == null)
      return new ArrayList();
    return super.children;
  }

  int getNumNodes() {
    int sum = 1;
    for (child : super.getChildren())
      sum += child.getNumNodes();
    return sum;
  }

  void setParent(tree) {
    super.parent = tree;
  }

  getParent() {
    return super.parent;
  }

  String toString() {
    String s = "\n- " + super.label + " (" + data + ")";
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

TimedFetchCallback(String query, FetchCallback cb, int callerIdx) {
  int           callerIdx = callerIdx;
  String        query     = query;
  FetchCallback cb        = cb;
  bsh.CallStack cs_       = this.callstack.copy();

  long startTime = System.currentTimeMillis(); // Timer starts here
  long stopTime  = -1;

  void onFetch(Object result) {
    super.stopTimer();
    super.updatePerfLog();

    if (super.cb != null)
      super.cb.onFetch(result);
  }

  void onError(String message) {
    if (super.cb != null)
      super.cb.onError(message);
  }

  void stopTimer() {
    super.stopTime = System.currentTimeMillis();
  }

  double getElapsedMillis() {
    if (stopTime < 0)
      return -Double.MAX_VALUE;
    return super.stopTime - super.startTime;
  }

  void updatePerfLog() {
    String deviceModel     = android.os.Build.MODEL;
    String sessStartMs     = SESS_START_TIME + "";
    String parentNameSpace = cs_.get(callerIdx + 1).getName() + "";
    String srcLine         = cs_.get(callerIdx + 0).getInvocationLine() + "";
    String query           = query;
    String queryStartMs    = startTime + "";
    String queryStopMs     = stopTime + "";

    String updateQuery = "";
    updateQuery += " INSERT INTO perflog (";
    updateQuery += "             deviceModel,";
    updateQuery += "             sessStartMs,";
    updateQuery += "             parentNameSpace,";
    updateQuery += "             srcLine,";
    updateQuery += "             query,";
    updateQuery += "             queryStartMs,";
    updateQuery += "             queryStopMs,";
    updateQuery += "             numArchentity,";
    updateQuery += "             numAentvalue,";
    updateQuery += "             numRelationship,";
    updateQuery += "             numAentreln";
    updateQuery += " )    SELECT %s, %s, %s, %s, %s, %s, %s, a, av, r, ar";
    updateQuery += "        FROM";
    updateQuery += "             (SELECT COUNT(*) AS a  FROM archentity  ) a,";
    updateQuery += "             (SELECT COUNT(*) AS av FROM aentvalue   ) av,";
    updateQuery += "             (SELECT COUNT(*) AS r  FROM relationship) r,";
    updateQuery += "             (SELECT COUNT(*) AS ar FROM aentreln    ) ar";

    updateQuery = dbReplaceFirst(updateQuery, deviceModel);
    updateQuery = dbReplaceFirst(updateQuery, sessStartMs);
    updateQuery = dbReplaceFirst(updateQuery, parentNameSpace);
    updateQuery = dbReplaceFirst(updateQuery, srcLine);
    updateQuery = dbReplaceFirst(updateQuery, query);
    updateQuery = dbReplaceFirst(updateQuery, queryStartMs);
    updateQuery = dbReplaceFirst(updateQuery, queryStopMs);

    fetchOne(updateQuery);
  }

  return this;
}

void timedFetchOne(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchOne(q, tcb);
}

void timedFetchAll(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchAll(q, tcb);
}

void timedFetchOne(String q, FetchCallback cb) {
  timedFetchOne(q, cb, 2);
}

void timedFetchAll(String q, FetchCallback cb) {
  timedFetchAll(q, cb, 2);
}

void timedFetchOne(String q) {
  timedFetchOne(q, null, 2);
}

void timedFetchAll(String q) {
  timedFetchAll(q, null, 2);
}

void timedPopulateCursorList(String ref, String q, int limit) {
  String boundQ = q;
  boundQ = dbReplaceFirst(boundQ, "?", limit + "");
  boundQ = dbReplaceFirst(boundQ, "?", "0");
  timedFetchAll(boundQ, null, 2);

  populateCursorList(ref, q, limit);
}

void setUpTypeHierarchy() {
  //- 
  //  - Notes
  //  - Cultural Knowledge
  //  - Plant Survey
  //  - Animal outside
  //  - Check Trap
  //  - Setup Trap

  n0 = Tree("", 1);
  n1 = Tree("Notes", 1);
  n2 = Tree("Cultural Knowledge", 1);
  n3 = Tree("Plant Survey", 1);
  n4 = Tree("Animal outside", 1);
  n5 = Tree("Check Trap", 1);
  n6 = Tree("Setup Trap", 1);

  n0.addChild(n1);
  n0.addChild(n2);
  n0.addChild(n3);
  n0.addChild(n4);
  n0.addChild(n5);
  n0.addChild(n6);


  PERF_TYPE_TREE = n0;
}

setUpTypeHierarchy();

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  if (getType(ref).equals("camera"))
    if (PERF_FILES.isEmpty()) {
      Log.e("randomInputValue()", "PERF_FILES empty, using empty string");
      return "";
    } else
      return PERF_FILES.poll();
  else
    return getRandomString(len);
}

List getAttribsForRef(String ref) {
  int numAttribs = 1;
  if (!hasData(ref))                 numAttribs = 0;
  if (hasMediaType(ref))             numAttribs = 0;
  if (getType(ref).equals("camera")) numAttribs = PERF_PHOTOS_PER_FIELD;

  List attribs = new ArrayList();
  for (int i = 0; i < numAttribs; i++) {
    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

List getAttribsForArchEnt(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : getRefs())
    if (getArchEntType(ref).equals(archEntType))
      attribs.addAll(getAttribsForRef(ref));

  return attribs;
}

void displayRecordDigest(int numCreated) {
  String q = "";
  q += "   SELECT '{All}', count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "    UNION";
  q += "   SELECT aenttypename, count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += " GROUP BY aenttypename";

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      String head = "{perf_digest_1_head}";
      String body = "";
      if (numCreated >= 0)
        body += numCreated + " {perf_digest_1_body_1}";
      body += " {perf_digest_1_body_2}";

      if (result == null)
        result = new ArrayList();
      for (List row : result) {
        String type = row.get(0);
        String num  = row.get(1);

        body += "\t- " + type + ": " + num + "\n";
      }

      if (dialog != null)
        dialog.dismiss();
      showWarning(head, body);
    }
  };

  fetchAll(q, cb);
}

void displayRecordDigest() {
  displayRecordDigest(-1);
}

PerfSaveCallback(tree, String parentUuid) {
  tree              = tree;
  String parentUuid = parentUuid;

  saveRel(uuid) {
    parent            = super.tree.getParent();
    String parentUuid = super.parentUuid;

    if (parent == null || parentUuid == null)
      return;

    String parentType = parent    .label;
    String childType  = super.tree.label;

    saveEntitiesToPCRel(parentType, childType, parentUuid, uuid);
  }

  void onSave(String uuid, boolean newRecord) {
    int cbsDone = PERF_NUM_CBS_DONE_SAVE.incrementAndGet();
    int cbsTodo = PERF_NUM_CBS_TODO_SAVE.get();
    if (cbsTodo == cbsDone)
      displayRecordDigest(cbsDone);

    if (newRecord)
      super.saveRel(uuid);

    for (subtree : super.tree.getChildren())
      saveArchEnts(subtree, uuid);
  }

  void onError(String message) {
    if (dialog != null)
      dialog.dismiss();
    showWarning("Error", message);
  }

  return this;
}

void saveArchEnts(tree, String parentUuid) {
  String archEntName = tree.label;
  int    numEnts     = tree.data;
  cb                 = PerfSaveCallback(tree, parentUuid);

  for (int i = 0; i < numEnts; i++) {
    List attribs = getAttribsForArchEnt(archEntName);
    saveArchEnt(null, archEntName, (List) null, attribs, cb);
  }
}

void createDummyRecords() {
  int  n = getNumDummyRecords();
  dialog = showBusy("{perf_dummy_busy_head}", n + " {perf_dummy_busy_body}");

  enqueueTestFiles("createDummyRecordsRecursively()");
}

void createDummyRecordsRecursively() {
  int n = getNumDummyRecords();
  PERF_NUM_CBS_TODO_SAVE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SAVE = new AtomicInteger(0);

  for (child : PERF_TYPE_TREE.getChildren())
    saveArchEnts(child, null);
}

void enqueueTestFiles(String cb) {
  enqueueTestFiles(getNumDummyRecords(), cb);
}

void enqueueTestFiles(int numFiles, String cb) {
  if (isNull(PERF_TEST_IMG)) {
    String head; String body;
    head  = "Record Creation Aborted";
    body  = "The master file from which test files are enqueued could not be ";
    body += "found on disk. Record creation cannot take place unless this file";
    body += " is present. Please ensure that your device is connected to the ";
    body += "internet, re-load the module, and try to run a create dummy ";
    body += "records again.";
    showWarning(head, body);
    return;
  }

  // Set `PERF_NUM_CBS_TODO_FILE` and `PERF_NUM_CBS_DONE_FILE`
  int numPhotosToMake;
  numPhotosToMake  = getNumDummyPhotos();
  numPhotosToMake -= PERF_FILES.size();
  numPhotosToMake  = Math.max(0, numPhotosToMake);
  // We're going to count returns from attachFile too, hence multiplication by 2
  PERF_NUM_CBS_TODO_FILE = new AtomicInteger(numPhotosToMake + 1);
  PERF_NUM_CBS_DONE_FILE = new AtomicInteger(0);

  // Make records
  for (int i = 0; i < numPhotosToMake; i++) {
    String fileName = attachFile(
        PERF_TEST_IMG,
        false,
        null,
        fun2str("checkEnqueueTestFilesIsDone", cb)
    );

    PERF_FILES.add(fileName);
  }
  checkEnqueueTestFilesIsDone(cb);
}

void checkEnqueueTestFilesIsDone(String onDone) {
  int cbsDone = PERF_NUM_CBS_DONE_FILE.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_FILE.get();
  if (cbsTodo == cbsDone)
    execute(onDone);
}

PerfImageDownloader() {
  void run() {
    if (isInUnitTestTime())
      return;

    String filStr = "/sdcard/faims/modules/" + getModuleId() +
        "/files/app/test.jpg";
    String urlStr = "https://raw.githubusercontent.com/FAIMS/FAIMS-Tools/" +
        "master/test-images/construction-2894x1924.jpg";

    if (detectFile(filStr))
      return;

    try {
      URL           urlObj = new URL(urlStr);
      URLConnection urlCon = urlObj.openConnection();

      new File(filStr).getParentFile().mkdirs();

      InputStream      is  = urlCon.getInputStream();
      FileOutputStream fos = new FileOutputStream(filStr);

      byte[] buffer = new byte[4096];
      int len;

      // While we have availble data, continue downloading and storing to local
      // file
      while ((len = is.read(buffer)) > 0)
        fos.write(buffer, 0, len);

      if (is  != null) is .close();
      if (fos != null) fos.close();
    } catch (Exception e) {
      Log.e("PerfImageDownloader.run()", e.getMessage());
    }

    // Set `PERF_TEST_IMG` if the file was created successfully
    detectFile(filStr);
  }

  void start() {
    Runnable r = PerfImageDownloader();
    new Thread(r).start();
  }

  boolean detectFile(String filStr) {
    File newImg = new File(filStr);
    if (newImg.length() > 0) {
      PERF_TEST_IMG = filStr;
      return true;
    }
    return false;
  }

  return this;
}

void verifyEnableRecordCreation() {
  String q = "";
  q += " SELECT userid, fname, lname, email, password";
  q += "   FROM user";
  q += "  WHERE fname = 'Faims'";
  q += "    AND lname = 'Admin'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String userId    = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);

      showVerifyUserDialog("enableRecordCreation()");
    }
  };

  fetchOne(q, callback);
}

void enableRecordCreation() {
  PERF_ALLOW_CREATION = true;
  setUpPerfActionBarItems();

  showWarning("{perf_create_on_head}", "{perf_create_on_body}");
}

boolean isInPerfTestTime() {
  return false;
}

// Produce entity number specification
void setUpDummyRecordCreation() {
  int n = PERF_TYPE_TREE.getNumNodes()
      - 1; // Ignore root node

  PERF_NUM_CBS_TODO_SET = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SET = new AtomicInteger(0);

  setUpDummyRecordCreation(PERF_TYPE_TREE, "");
}

String getBreadCrumbs(node) {
  return node.getAncestorRefString(" › ", "label");
}

String typeToReadableType(String type) {
  if (type.equals("")) return "{this_module}";
  else                 return "{each} " + type;
}

void setUpDummyRecordCreation(tree, String parentType) {
  String type = tree.label;

  for (child : tree.getChildren())
    setUpDummyRecordCreation(child, type);

  if (!type.equals("")) {
    // Make head and body for `showTextAlert`
    String treeRef = tree.getAncestorRefString();
    String head    = getBreadCrumbs(tree);
    String body    = "{perf_rec_num_body_1} %s {perf_rec_num_body_2} %s " +
                     "{perf_rec_num_body_3}";
    body = replaceFirst(body, type);
    body = replaceFirst(body, typeToReadableType(parentType));

    promptSetDummyRecordQuantity(treeRef, head, body);
  }
}

void promptSetDummyRecordQuantity(String treeRef, String head, String body) {
  String cb = "setDummyRecordQuantity(\"%s\", \"%s\", \"%s\")";
  cb = replaceFirst(cb, treeRef);
  cb = replaceFirst(cb, head);
  cb = replaceFirst(cb, escape(body));

  showTextAlert(head, body, cb, "checkSetDummyRecordQuantityIsDone()");
}

void setDummyRecordQuantity(
    String treeRef,
    String failHead,
    String failBody
) {
  // Parse data as int
  int intData;
  try {
    intData = Integer.parseInt(getLastTextAlertInput());
  } catch (Exception e) {
    promptSetDummyRecordQuantity(treeRef, failHead, failBody);
    return;
  }

  PERF_TYPE_TREE.getDescendant(treeRef).data = intData;
  checkSetDummyRecordQuantityIsDone();
}

void checkSetDummyRecordQuantityIsDone() {
  int cbsDone = PERF_NUM_CBS_DONE_SET.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_SET.get();
  if (cbsTodo == cbsDone) {
    String totalImgs = getNumDummyPhotos() + "";
    String totalSizs = getSizeDummyPhotosInMBytesAsString();
    String totalFree = getFreeSpaceInMBytesAsString();
    String totalRecs = getNumDummyRecords() + "";
    String treeString = PERF_TYPE_TREE.toString();
    String treeStringNoRoot = treeString.substring(
        "\n-  (1)".length(),
        treeString.length()
    );

    String head = "{perf_update_head}";
    String body =
         "{perf_update_body_1} " + treeStringNoRoot +
        " {perf_update_body_2} " + totalRecs +
        " {perf_update_body_3} " + totalImgs +
        " {perf_update_body_4} " + totalFree +
        " {perf_update_body_5} " + totalSizs +
        " {perf_update_body_6}";

    showAlert(head, body, "createDummyRecords()", "");
  }
}

void verifyCreateDummyRecords() {
  // Unless syncing is disabled, 'database locked' errors will happen
  setFileSyncEnabled(false);
  setSyncEnabled    (false);

  if (isSyncEnabled()) {
    showWarning("{perf_dummy_err_head}", "{perf_dummy_err_body}");
    return;
  }

  showAlert(
      "{perf_wiz_head}",
      "{perf_wiz_body}",
      "setUpDummyRecordCreation()",
      ""
  );
}

void setUpPerfActionBarItems() {
  removeActionBarItem("create_dummy_records");
  removeActionBarItem("display_record_digest");
  removeActionBarItem("enable_record_creation");

  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);
  if (!isDisplayed(userMenuTabGroup)) {
    PERF_ALLOW_CREATION = false;
    return;
  }
  if (!isInPerfTestTime())
    return;

  ActionButtonCallback createDummyRecords = new ActionButtonCallback() {
      actionOnLabel() {
        "{create_dummy_records}";
      }
      actionOn() {
        verifyCreateDummyRecords();
      }
  };

  ActionButtonCallback displayRecordDigest = new ActionButtonCallback() {
      actionOnLabel() {
        "{display_record_digest}";
      }
      actionOn() {
        displayRecordDigest();
      }
  };

  ActionButtonCallback enableRecordCreation = new ActionButtonCallback() {
      actionOnLabel() {
        "{enable_record_creation}";
      }
      actionOn() {
        verifyEnableRecordCreation();
      }
  };

  // Careful! The `if` statements are weirdly formatted
  addActionBarItem("display_record_digest",  displayRecordDigest);
  if (PERF_ALLOW_CREATION)
  addActionBarItem("create_dummy_records",   createDummyRecords);
  if (!PERF_ALLOW_CREATION)
  addActionBarItem("enable_record_creation", enableRecordCreation);
}

void setUpPerfTestMode() {
  if (!isInPerfTestTime())
    return;

  // Download test image
  PerfImageDownloader().start();

  // Display performance testing notification
  showWarning("{perf_mode_head}", "{perf_mode_body}");
}

if (!isNull(USER_MENU_PATH)) {
  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);

  setUpPerfTestMode();
  addOnEvent(userMenuTabGroup, "show",  "setUpPerfActionBarItems()");
  addOnEvent(userMenuTabGroup, "leave", "setUpPerfActionBarItems()");
}


/******************************************************************************/
/*                           LOCALSETTINGS UPDATES                            */
/******************************************************************************/
void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val, boolean doOverwrite) {
  if (val == null) val = "";

  String q;
  if (doOverwrite) q = "REPLACE INTO localSettings(key, value) VALUES(%s, %s)";
  else             q = "INSERT  INTO localSettings(key, value) VALUES(%s, %s)";

  q = dbReplaceFirst(q, key);
  q = dbReplaceFirst(q, val);
  fetchOne(q);
}

void insertIntoLocalSettings(String key, String val) {
  insertIntoLocalSettings(key, val, true);
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void deleteFromLocalSettings(String key) {
  String q = "DELETE FROM localsettings WHERE key=%s";
  q = dbReplaceFirst(q, key);

  fetchOne(q);
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite,
    String defaultVal
) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = %s";
  q = dbReplaceFirst(q, key);

  FetchCallback set = new FetchCallback() {
    onFetch(result) {
      if (result != null && result.size() >= 1) {
        setFieldValue(ref, result.get(0));
      } else if (defaultVal != null) {
        setFieldValue(ref, defaultVal);
      }
    }
  };

  fetchOne(q, set);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite
) {
  setFieldValueFromLocalSettings(key, ref, doOverwrite, null);
}

void setFieldValueFromLocalSettings(
    String  ref,
    boolean doOverwrite,
    String  defaultVal
) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite, defaultVal);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String key, String ref) {
  setFieldValueFromLocalSettings(key, ref, false);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnEvent(
    String ref,
    boolean doOverwrite,
    String defaultVal,
    String event
) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite, defaultVal}
  );

  addOnEvent(getTabGroupRef(ref), event, cb);
}

void setFieldValueFromLocalSettingsOnShow(
    String ref,
    boolean doOverwrite,
    String defaultVal
) {
  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, "show");
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, (String) null);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref, boolean doOverwrite, String defaultVal) {
  String tabGroupRef = getTabGroupRef(ref);
  boolean isData = !isFlaggedNodata(tabGroupRef);

  String event;
  if (isData) event = "create";
  else        event = "show";

  setFieldValueFromLocalSettingsOnEvent(ref, doOverwrite, defaultVal, event);
  insertIntoLocalSettingsOnChange      (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, String defaultVal) {
  persistOverSessions(ref, false, defaultVal);
}

void persistOverSessions(String ref) {
  persistOverSessions(ref, false, (String) null);
}



/******************************************************************************/
/*                           FIELD COPYING HELPERS                            */
/*                                                                            */
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;

  setFieldValue(ref, vocabId);
  return isSelected(ref, vocabName);
}

boolean copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  return copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
boolean copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  if (!doFindVocabId) {
    String valSrc = getFieldValue(src);
    setFieldValue(dst, valSrc);
    return true;
  }

  String valSrc;
  if (hasMenuType(src)) valSrc = getMenuValue (src);
  else                  valSrc = getFieldValue(src);

  if (hasMenuType(dst)) setMenuValue (dst, valSrc);
  else                  setFieldValue(dst, valSrc);

  String valDst;
  if (hasMenuType(dst)) valDst = getMenuValue (dst);
  else                  valDst = getFieldValue(dst);

  return valDst.equals(valSrc);
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

/* Copies the value from the field at `src` to the field at `dst` whenever the
 * a new record containing `dst` is created.
 *
 * `doCheckParent` If this is true, the value is only copied when the parent tab
 *                 group of the tab group referred to by `dst` is equal to the
 *                 tab group referred to by `src`. This is a way of checking
 *                 whether the field referred to by `src` has been loaded.
 * `doFindVocabId` Same as the `doFindVocabId` argument for the `copyFieldValue`
 *                 function.
 */
void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getPreviouslyDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, true);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}



/******************************************************************************/
/*                            NEW TAB REDIRECTION                             */
/*                                                                            */
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/
void newTab(String ref, Boolean resolveTabs) {
  if (!resolveTabs) {
    newTab(ref);
    return;
  }

  if (isTab(ref))
    redirectTab = ref;

  String tabGroupRef = getTabGroupRef(ref);
  if (isDisplayed(tabGroupRef))
    resolveNewTab();
  else
    newTabGroup(tabGroupRef);
}

void resolveNewTab() {
  if (isNull(redirectTab))
    return;
  if (!isTab(redirectTab))
    return;

  newTab(redirectTab);
  redirectTab = "";
}

for (String ref : getTabGroups()) {
  addOnEvent(ref, "show", "resolveNewTab()");
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

for (entry : REF_TO_TYPE.entrySet()) {
  String type = entry.getValue();
  String ref  = entry.getKey();
  String evt  = "click";
  String stmt = "DROPDOWN_ITEM_VALUE = getFieldValue(\"%s\")";
  stmt = replaceFirst(stmt, ref);

  if (!type.equals("dropdown"))
    continue;
  if (hasNoUi(ref))
    continue;

  addOnEvent(ref, evt, stmt);
}

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/* Deprecated: Fetches the contents of a specifed vocabulary and stores it in
 * the given list.
 */
void fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}

void fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      if (isNull(result))
        result = new ArrayList();

      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
String getMakeVocabType(String ref) {
  if (isHier(ref)) return "hierarchical" + getType(ref);
  else             return ""             + getType(ref);
}

void makeVocabs() {
  for (String ref : DATA_REFS)
    if (!hasNoUi(ref))
      makeVocab(ref);
  for (String ref : VP_REF_TO_REF.keySet())
    if (!hasNoUi(ref))
      makeVocab(ref);
}

void makeVocab(String ref) {
  if (!hasMenuType(ref))
    return;

  if (hasVpRef(ref))
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(getVpRef(ref)));
  else
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(ref));
}

void makeVocab(String type, String ref, String attrName) {
  makeVocab(type, ref, attrName, null);
}
void makeVocab(String type, String ref, String attrName, List vocabExclusions) {
    makeVocab(type, ref, attrName, vocabExclusions, null);
}

/* Populates the ref specified vocabulary from the database based on the given
 * attribute name, where type is the type of the vocab to populate (checkbox,
 * dropdown, hierarchicaldropdown, hierarchicalpicture, list, picture, radio).
 * */
void makeVocab(
    String type,
    String ref,
    String attrName,
    List   vocabExclusions,
    String callbackFunction
){
  if (
      isNull(type) ||
      isNull(ref) ||
      isNull(attrName)
  ) {
    Log.e(
        "makeVocab()",
        "Can't make populate vocab whose type, ref or attribute is null"
    );
    return;
  }

  if (!isModuleLoaded()) {
    String head = "Logic Error";
    String body = "makeVocab called before module loaded";
    showWarning(head, body);
    return;
  }

  // Make a filtered vocab
  List menuEntries = getMenuEntries(attrName);
  if (vocabExclusions == null) vocabExclusions = new ArrayList();

  List filteredVocab = new ArrayList();
  for(item : menuEntries) {
    if (vocabExclusions.contains(item.get(1))) {
      Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
    } else {
      filteredVocab.add(item);
    }
  }

  // Determine whether to include a null option in the menu
  Boolean hasNull =
         !vocabExclusions.contains("")
      && !vocabExclusions.contains(null);

  // Populate menu
  populateMenu(type, ref, attrName, filteredVocab, hasNull);

  // Execute callback
  if (!isNull(callbackFunction))
    execute(callbackFunction);
}

boolean populateMenu(
    String  type,
    String  ref,
    String  attrName,
    List    entries,
    boolean hasNull
) {
  if (isNull(type))
    type = getMakeVocabType(ref);

  switch(type) {
    case "checkbox":
    case "CheckBoxGroup":
      populateCheckBoxGroup             (ref, entries);           break;
    case "dropdown":
    case "DropDown":
      populateDropDown                  (ref, entries, hasNull);  break;
    case "hierarchicaldropdown":
    case "HierarchicalDropDown":
      populateHierarchicalDropDown      (ref, attrName, hasNull); break;
    case "hierarchicalpicture":
    case "HierarchicalPictureGallery":
      populateHierarchicalPictureGallery(ref, attrName);          break;
    case "List":
    case "list":
      populateList                      (ref, entries);           break;
    case "picture":
    case "PictureGallery":
      populatePictureGallery            (ref, entries);           break;
    case "radio":
    case "RadioGroup":
      populateRadioGroup                (ref, entries);           break;
    default:
      Log.e(
          "populateMenu()",
          "Can't populate vocab; type '" + type + "' not recognised"
      );
      return false;
  }
  return true;
}

boolean populateMenu(String ref, List entries) {
  return populateMenu(null, ref, "", entries, true);
}

void populateMenu(String ref, String entry) {
  List entries  = new ArrayList();
  entries.add(new NameValuePair(entry, ""));

  populateMenu(ref, entries);
}

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME        = new HashMap();
Map VOCABNAME_TO_VOCABID        = new HashMap();
Map ATTRIB_NAME_TO_VOCABIDS     = new HashMap();
Map ATTRIB_NAME_TO_MENU_ENTRIES = new HashMap();

void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

void addMenuEntry(
    String attrName,
    String vocabId,
    String vocabName,
    String picUrl
) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    ATTRIB_NAME_TO_MENU_ENTRIES.put(attrName, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(vocabId);
  menuEntry.add(vocabName);
  menuEntry.add(picUrl);

  menuEntries.add(menuEntry);
}

List getMenuEntries(String attrName) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) return new ArrayList();
  else                     return menuEntries;
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return vocabIds;
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  String q = "";
  q += "   SELECT vocabid, vocabname, attributename, pictureurl";
  q += "     FROM vocabulary";
  q += "     JOIN attributekey USING (attributeid)";
  q += " ORDER BY vocabcountorder";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(List result) {
      if (result == null)
        result = new ArrayList();

      for (List row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);
        String picUrl    = row.get(3);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);

        // Populate ATTRIB_NAME_TO_MENU_ENTRIES
        addMenuEntry(attrName, vocabId, vocabName, picUrl);
      }

      decAndExecIfModuleLoaded();
    }
  };

  incJobsTillLoaded();
  fetchAll(q, populateHashMap);
}

addOnEvent("module", "load", "makeVocabs()");
fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

HashMap NODATA_DROPDOWNS = new HashMap(); // ref -> menu entries
void addNodataDropdownEntry(String ref, String entryKey, String entryVal) {
  List menuEntries = NODATA_DROPDOWNS.get(ref);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    NODATA_DROPDOWNS.put(ref, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(entryKey);
  menuEntry.add(entryVal);

  menuEntries.add(menuEntry);
}

addNodataDropdownEntry("Start/Tracklog/internalExternalGPS", "Internal", "{Internal}");
addNodataDropdownEntry("Start/Tracklog/internalExternalGPS", "External", "{External}");

for (entry : NODATA_DROPDOWNS.entrySet()) {
  String ref = entry.getKey();
  List   entries = entry.getValue();
  populateMenu(ref, entries);
}

/******************************************************************************/
/*                                  GPS/MAP                                   */
/******************************************************************************/


void updateGPSDiagnostics() {
  String diagnosticsRef = "";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

final String MAP_CFG_PATH = "files/data/saved_config.json";
final String MAP_REF = "Start/Map/Map";
void centerMe() { centerOnCurrentPosition(MAP_REF); }
addOnEvent("Start/Map/Center_Me_1", "click", "centerMe()");
addOnEvent("Start/Map/Save_Map_Settings_1", "click", "saveMapSettings()");
addOnEvent("module", "load", "loadMapSettings()");

void loadMapSettings() {
  String filePath = getAttachedFilePath(MAP_CFG_PATH);

  if (!new File(filePath).exists())
    return;

  String toast = "showToast(\"{Loaded_Map_Configuration}\")";
  loadMapViewConfiguration(MAP_REF, filePath, toast);
}

void saveMapSettings() {
  String filePath = getAttachedFilePath(MAP_CFG_PATH);

  String toast = "showToast(\"{Saved_Map_Configuration}\")";
  saveMapViewConfiguration(MAP_REF, filePath, toast);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
boolean USER_MENU_IS_LOADED = false;

void populateListForUsers(){
  String q = "";
  q  = " SELECT          userid ";
  q += "        ||'\\0'||fname ";
  q += "        ||'\\0'||lname ";
  q += "        ||'\\0'||email ";
  q += "        ||'\\0'||password ";
  q += "        ,        fname ";
  q += "        || ' ' ||lname ";
  q += "   FROM user ";
  q += "  WHERE userdeleted is null";


  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      populateMenu(USER_MENU_PATH, result);
      USER_MENU_IS_LOADED = true;
    }
  };

  USER_MENU_IS_LOADED = false;
  populateMenu(USER_MENU_PATH, MSG_LOADING);
  fetchAll(q, callback);
}

String getUserMenuValue(int i) {
  String selectedUser = getListItemValue();
  if (selectedUser == null)
    return "";

  String[] splitted = selectedUser.split("\\\\0");
  if (i < splitted.length) return splitted[i];
  else                     return "";

}

void resetUser() {
  userId   = "";
  username = "";
  User user = new User(userId, "", "", "", "");
  setUser(user);
}

void selectUser() {
  userId           = getUserMenuValue(0);
  String nameFirst = getUserMenuValue(1);
  String nameLast  = getUserMenuValue(2);
  String email     = getUserMenuValue(3);
  String password  = getUserMenuValue(4);
  username         = nameFirst + " " + nameLast;

  User user = new User(userId, nameFirst, nameLast, email, password);
  setUser(user);
}

void onClickSignup__ () {
  setSyncEnabled(true);
  showCreateUserDialog("onSignupSuccessful()");
}

void onSignupSuccessful() {
  showWarning("{signup_head}", "{signup_body}");
  populateListForUsers();
}

if (!isNull(USER_MENU_PATH)) {
  addOnEvent(getTabGroupRef(USER_MENU_PATH), "show", "resetUser()");

  addOnEvent(USER_MENU_PATH, "show",  "populateListForUsers()");
  addOnEvent(USER_MENU_PATH, "click", "selectUser()");

  addOnEventCond(USER_MENU_PATH, "click", "USER_MENU_IS_LOADED");
}



/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/ref to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}



/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map TABGROUP_TO_UUID = Collections.synchronizedMap(new HashMap());
Set SEEN_UUIDS       = Collections.synchronizedSet(new HashSet());

String getUuid(String tabgroup) {
  return TABGROUP_TO_UUID.get(tabgroup);
}

String getUuid() {
  return getUuid(getDisplayedTabGroup());
}

void setUuid(String tabgroup, String uuid) {
  TABGROUP_TO_UUID.put(tabgroup, uuid);
}

SaveCallback getDefaultSaveCallback(String tabgroup, String callback) {
  String parentTabgroup_     = parentTabgroup;
  String parentTabgroupUuid_ = getUuid(parentTabgroup_);

  parentTabgroup = null;

  Boolean userWasSet = !username.equals("");

  callback += "; " + fun2str("executeOnEvent", new Object[]{tabgroup, "save"});

  String callbackFirstSave =
    fun2str("executeOnEvent", new Object[]{tabgroup, "firstsave"}) + "; " +
    callback;

  return new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      // This is a workaround for a bug where `newRecord` can be `true` twice if
      // a record was saved again shortly after it was created.
      if (SEEN_UUIDS.contains(uuid))
        newRecord = false;
      if (uuid != null)
        SEEN_UUIDS.add(uuid);

      String cb = newRecord ? callbackFirstSave : callback;

      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          cb
        );
      } else {
        execute(cb);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, cb);
      }

    }
    onError(message) {
      showToast(message);
    }
  };
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave = true;
  String  uuid           = getUuid(tabgroup);

  SaveCallback saveCallback = getDefaultSaveCallback(tabgroup, callback);

  saveTabGroup(
      tabgroup,
      uuid,
      autoSaveGeo,
      autoSaveAttrs,
      saveCallback,
      enableAutosave
  );

  // Reset global variables
  autoSaveGeo   = null;
  autoSaveAttrs = null;
}

void setAutoSaveGeometry(List geometry) {
  autoSaveGeo = geometry;
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt, boolean doInsertColon) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  if (doInsertColon) {
    String left; String right;

    left    = dateStr.substring(0, dateStr.length() - 2);
    right   = dateStr.substring(   dateStr.length() - 2);
    dateStr = left + ":" + right;
  }

  return dateStr;
}

String getTimestampNow(String fmt) {
  return getTimestampNow(fmt, true);
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Setup_Trap", "Setup_Trap/Setting_up/Setup_Trap_author");
  tabgroupToAuthor.put("Check_Trap", "Check_Trap/Checking/Check_Trap_author");
  tabgroupToAuthor.put("Animal_outside", "Animal_outside/Animal/Animal_outside_author");
  tabgroupToAuthor.put("Plant_Survey", "Plant_Survey/Plant/Plant_Survey_author");
  tabgroupToAuthor.put("Cultural_Knowledge", "Cultural_Knowledge/Cultural_Knowledge/Cultural_Knowledge_author");
  tabgroupToAuthor.put("Notes", "Notes/Notes/Notes_author");
  
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  if (!isNull(authorPath))    setFieldValue(authorPath,    username);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, getTimestampNow());
}

for (String tabGroup : getTabGroups()) {
  if (isFlaggedNodata    (tabGroup)) continue;
  if (hasNoUi            (tabGroup)) continue;
  if (isFlaggedNoautosave(tabGroup)) continue;
  addOnEvent(tabGroup, "show", "saveTabGroup", new Object[]{tabGroup});
}

void onClickLoginLogin () {
  newTab("Start", true);
}

void onClickStartSettingupTrap () {
  parentTabgroup__ = "Start";
  newSetupTrap();
}

void onClickStartCheckingTrap () {
  parentTabgroup__ = "Start";
  newCheckTrap();
}

void onClickStartAnimaloutsideTrap () {
  parentTabgroup__ = "Start";
  newAnimaloutside();
}

void onClickStartPlantSurvey () {
  parentTabgroup__ = "Start";
  newPlantSurvey();
}

void onClickStartCulturalKnowledge () {
  parentTabgroup__ = "Start";
  newCulturalKnowledge();
}

void onClickStartNotes () {
  parentTabgroup__ = "Start";
  newNotes();
}








addOnEvent("Login/Login/Login", "click", "onClickLoginLogin()");
addOnEvent("Start/Main/Setting_up_Trap", "click", "onClickStartSettingupTrap()");
addOnEvent("Start/Main/Checking_Trap", "click", "onClickStartCheckingTrap()");
addOnEvent("Start/Main/Animal_outside_Trap", "click", "onClickStartAnimaloutsideTrap()");
addOnEvent("Start/Main/Plant_Survey", "click", "onClickStartPlantSurvey()");
addOnEvent("Start/Main/Cultural_Knowledge", "click", "onClickStartCulturalKnowledge()");
addOnEvent("Start/Main/Notes", "click", "onClickStartNotes()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
addOnEvent("Check_Trap/Checking/Talk_about_animal_Button_1", "click", "attachAudioTo(\"Check_Trap/Checking/Talk_about_animal\")");
addOnEvent("Animal_outside/Animal/Talk_about_animal_Button_1", "click", "attachAudioTo(\"Animal_outside/Animal/Talk_about_animal\")");
addOnEvent("Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now_Button_1", "click", "attachAudioTo(\"Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now\")");
addOnEvent("Check_Trap/Checking/Take_Photo_Button_1", "click", "attachPictureTo(\"Check_Trap/Checking/Take_Photo\")");
addOnEvent("Animal_outside/Animal/Take_Photo_Button_1", "click", "attachPictureTo(\"Animal_outside/Animal/Take_Photo\")");
addOnEvent("Plant_Survey/Plant/Take_Photo_Button_1", "click", "attachPictureTo(\"Plant_Survey/Plant/Take_Photo\")");
addOnEvent("Notes/Notes/Take_Photo_Button_1", "click", "attachPictureTo(\"Notes/Notes/Take_Photo\")");
addOnEvent("Cultural_Knowledge/Cultural_Knowledge/Video_recording_Button_1", "click", "attachVideoTo(\"Cultural_Knowledge/Cultural_Knowledge/Video_recording\")");

/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/


/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;

  SaveCallback execCallback = new SaveCallback() {
    onSaveAssociation(entity_id, rel_id) {
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  SaveCallback addMoreToRel = new SaveCallback() {
    onSaveAssociation(entity_id, rel_id) {
      addReln(entity2, rel_id, e2verb, execCallback);
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  SaveCallback addToRel = new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb, addMoreToRel);
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  };

  saveRel(null, type, null, null, addToRel);
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, String parentTabGroup) {
  parentTabgroup   = parentTabGroup;
  parentTabgroup__ = parentTabGroup;
  newRecord(tabgroup, false);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_OK_to_Delete_this_Record}",
        fun2str("reallyDeleteRecord", tabgroup),
        "doNotDelete()"
    );
  }

  Log.d("deleteRecord", tabgroup);
}

void reallyDeleteRecord(String tabgroup) {
  DeleteCallback callback = new DeleteCallback() {
    onDelete(uuid) {
      populateEntityListsOfArchEnt(tabgroup);
      executeOnEvent(tabgroup, "delete");
    }

    onError(message) {
      showToast(message);
    }
  };

  deleteArchEnt(getUuid(tabgroup), callback);
  cancelTabGroup(tabgroup, false);
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = getStatementsString(
        childArchEntType.replaceAll(" ", "_"),
        "save"
    );

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  loadEntityFrom(entityID, "");
}

void loadEntityFrom(String entityID, String onFail) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        execute(onFail);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}


void newSetupTrap(String parent){
  String tabgroup = "Setup_Trap";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newSetupTrap (){
  newSetupTrap(null);
}

void newCheckTrap(String parent){
  String tabgroup = "Check_Trap";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newCheckTrap (){
  newCheckTrap(null);
}

void newAnimaloutside(String parent){
  String tabgroup = "Animal_outside";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newAnimaloutside (){
  newAnimaloutside(null);
}

void newPlantSurvey(String parent){
  String tabgroup = "Plant_Survey";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newPlantSurvey (){
  newPlantSurvey(null);
}

void newCulturalKnowledge(String parent){
  String tabgroup = "Cultural_Knowledge";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newCulturalKnowledge (){
  newCulturalKnowledge(null);
}

void newNotes(String parent){
  String tabgroup = "Notes";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newNotes (){
  newNotes(null);
}
void duplicateSetupTrap(){
  String tabgroup = "Setup_Trap";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateCheckTrap(){
  String tabgroup = "Check_Trap";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Check_Trap/Checking/Take_Photo", new ArrayList());
  populateFileList("Check_Trap/Checking/Talk_about_animal", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Take Photo");
      excludeAttributes.add("Talk about animal");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateAnimaloutside(){
  String tabgroup = "Animal_outside";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Animal_outside/Animal/Take_Photo", new ArrayList());
  populateFileList("Animal_outside/Animal/Talk_about_animal", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Take Photo");
      excludeAttributes.add("Talk about animal");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatePlantSurvey(){
  String tabgroup = "Plant_Survey";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Plant_Survey/Plant/Take_Photo", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Take Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateCulturalKnowledge(){
  String tabgroup = "Cultural_Knowledge";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateFileList("Cultural_Knowledge/Cultural_Knowledge/Record_knowledge_now", new ArrayList());
  populateVideoGallery("Cultural_Knowledge/Cultural_Knowledge/Video_recording", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Record knowledge now");
      excludeAttributes.add("Video recording");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateNotes(){
  String tabgroup = "Notes";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Notes/Notes/Take_Photo", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Take Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
addOnEvent("Setup_Trap", "save", "populateEntityListsOfArchEnt(\"Setup_Trap\")");
addOnEvent("Check_Trap", "save", "populateEntityListsOfArchEnt(\"Check_Trap\")");
addOnEvent("Animal_outside", "save", "populateEntityListsOfArchEnt(\"Animal_outside\")");
addOnEvent("Plant_Survey", "save", "populateEntityListsOfArchEnt(\"Plant_Survey\")");
addOnEvent("Cultural_Knowledge", "save", "populateEntityListsOfArchEnt(\"Cultural_Knowledge\")");
addOnEvent("Notes", "save", "populateEntityListsOfArchEnt(\"Notes\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("Login", "show", "removeNavigationButtons()");
addOnEvent("Start", "show", "removeNavigationButtons()");
addOnEvent("Setup_Trap", "show", "removeNavigationButtons()");
addOnEvent("Check_Trap", "show", "removeNavigationButtons()");
addOnEvent("Animal_outside", "show", "removeNavigationButtons()");
addOnEvent("Plant_Survey", "show", "removeNavigationButtons()");
addOnEvent("Cultural_Knowledge", "show", "removeNavigationButtons()");
addOnEvent("Notes", "show", "removeNavigationButtons()");
addOnEvent("Setup_Trap", "show", "addNavigationButtons(\"Setup_Trap\")");
addOnEvent("Check_Trap", "show", "addNavigationButtons(\"Check_Trap\")");
addOnEvent("Animal_outside", "show", "addNavigationButtons(\"Animal_outside\")");
addOnEvent("Plant_Survey", "show", "addNavigationButtons(\"Plant_Survey\")");
addOnEvent("Cultural_Knowledge", "show", "addNavigationButtons(\"Cultural_Knowledge\")");
addOnEvent("Notes", "show", "addNavigationButtons(\"Notes\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Start/Search"               , "show"  , "search()");
addOnEvent("Start/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Start/Search/Search_Button" , "click" , "search()");
addOnEvent("Start/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Start/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Setup_Trap}", "Setup Trap"));
entityTypes.add(new NameValuePair("{Check_Trap}", "Check Trap"));
entityTypes.add(new NameValuePair("{Animal_outside}", "Animal outside"));
entityTypes.add(new NameValuePair("{Plant_Survey}", "Plant Survey"));
entityTypes.add(new NameValuePair("{Cultural_Knowledge}", "Cultural Knowledge"));
entityTypes.add(new NameValuePair("{Notes}", "Notes"));
populateDropDown("Start/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Start/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Start/Search/Entity_List";
  String refSearchTerm  = "Start/Search/Search_Term";
  String refEntityTypes = "Start/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  populateMenu(refEntityList, MSG_LOADING);
  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Start");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadSetupTrapFrom(String uuid) {
  String tabgroup = "Setup_Trap";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadCheckTrapFrom(String uuid) {
  String tabgroup = "Check_Trap";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadAnimaloutsideFrom(String uuid) {
  String tabgroup = "Animal_outside";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadPlantSurveyFrom(String uuid) {
  String tabgroup = "Plant_Survey";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadCulturalKnowledgeFrom(String uuid) {
  String tabgroup = "Cultural_Knowledge";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadNotesFrom(String uuid) {
  String tabgroup = "Notes";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Setup_Trap/Setting_up/Take_From_GPS_1", "click", "takePoint(\"Setup_Trap\")");
addOnEvent("Check_Trap/Checking/Take_From_GPS_1", "click", "takePoint(\"Check_Trap\")");
addOnEvent("Animal_outside/Animal/Take_From_GPS_1", "click", "takePoint(\"Animal_outside\")");
addOnEvent("Plant_Survey/Plant/Take_From_GPS_1", "click", "takePoint(\"Plant_Survey\")");
addOnEvent("Cultural_Knowledge/Cultural_Knowledge/Take_From_GPS_1", "click", "takePoint(\"Cultural_Knowledge\")");
addOnEvent("Notes/Notes/Take_From_GPS_1", "click", "takePoint(\"Notes\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Setup_Trap", "Setup_Trap/Setting_up");
  tabgroupToTabRef.put("Check_Trap", "Check_Trap/Checking");
  tabgroupToTabRef.put("Animal_outside", "Animal_outside/Animal");
  tabgroupToTabRef.put("Plant_Survey", "Plant_Survey/Plant");
  tabgroupToTabRef.put("Cultural_Knowledge", "Cultural_Knowledge/Cultural_Knowledge");
  tabgroupToTabRef.put("Notes", "Notes/Notes");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  triggerAutoSave();
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = getArchEntType(tabgroup);
  String currentUuid = getUuid(tabgroup);

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  String sLatitude    = "" + latitude;
  String sLongitude   = "" + longitude;
  String sNorthing    = "" + northing;
  String sEasting     = "" + easting;

  MapPos mapPos = new MapPos(easting, northing);
  Point samplePoint = new Point(mapPos, null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy",  accuracy);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude", sLatitude);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude",  sLongitude);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting",   sNorthing);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing",  sEasting);

  List attribs = createAttributeList();
  attribs.add(createEntityAttribute("Accuracy",  "", "", accuracy,   "1.0"));
  attribs.add(createEntityAttribute("Longitude", "", "", sLatitude,  "1.0"));
  attribs.add(createEntityAttribute("Latitude",  "", "", sLongitude, "1.0"));
  attribs.add(createEntityAttribute("Northing",  "", "", sNorthing,  "1.0"));
  attribs.add(createEntityAttribute("Easting",   "", "", sEasting,   "1.0"));

  String showToast = fun2str(
      "showToast",
      getArch16nKey(tabgroup) + " {toast_saved}"
  );
  SaveCallback saveCallback = getDefaultSaveCallback(tabgroup, showToast);
  saveArchEnt(currentUuid, archEntType, geolist, attribs, saveCallback);
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/******************************************************************************/
/*               LOADING AND CREATION OF RECORDS FROM QR CODES                */
/******************************************************************************/
import java.util.regex.Pattern;
import java.util.regex.Matcher;

void bindQrScanning(String refButton) {
  addOnEvent(refButton, "click", "scanEntityFromQrCode()");
}

void scanEntityFromQrCode() {
  scanCode("loadEntityFromScannedQrCode()");
}

void loadEntityFromScannedQrCode() {
  String code = getLastScanContents();

  String  uuidString  = "";
  Pattern uuidPattern = Pattern.compile("(\\d{19})");
  Matcher matcher     = uuidPattern.matcher(code);
  while (matcher.find())
    uuidString = matcher.group(1);

  if (isNull(uuidString)) {
    showWarning("{load_scanned_err_head}", "{load_scanned_err_body}");
    return;
  }

  loadEntityFrom(uuidString);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
Map AUTONUM_DEST_TO_SOURCE = new HashMap();


/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

for (String ref : getStartingIdRefs())
  persistOverSessions(ref, "1");

void incAutoNum(String destPath) {
  String sourcePath = AUTONUM_DEST_TO_SOURCE.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}
/******************************************************************************/
/*                         POPULATION VIA <MARKDOWN>                          */
/******************************************************************************/
populateWebViewHtml("Start/Main/BR_1", "<br />\n\n");
populateWebViewHtml("Start/Main/BR_2", "<br />\n\n");
populateWebViewHtml("Setup_Trap/Setting_up/Submit_Spacer", "<br />\n\n");
populateWebViewHtml("Check_Trap/Checking/Submit_Spacer", "<br />\n\n");
populateWebViewHtml("Animal_outside/Animal/Submit_Spacer", "<br />\n\n");
populateWebViewHtml("Plant_Survey/Plant/Submit_Spacer", "<br />\n\n");
populateWebViewHtml("Cultural_Knowledge/Cultural_Knowledge/Submit_Spacer", "<br />\n\n");
populateWebViewHtml("Notes/Notes/Submit_Spacer", "<br />\n\n");

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `ref`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String ref,
  String parentUuid,
  String entType,
  String relType
) {
  String viewType = getType(ref);

  String limit;
  switch (viewType) {
    case "dropdown": limit = "";                   break;
    case "list":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "dropdown": fetchAll(q, cbPopulateDropDown); break;
    case "list":     populateCursorList(ref, q, 25); break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String ref          = m[0];
    String menuTabGroup = getTabGroupRef(ref);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[2];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String ref            = menuDescriptor[0];
  String parentUuidCall = menuDescriptor[1];
  String entType        = menuDescriptor[2];
  String relType        = menuDescriptor[3];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + ref            + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();

for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[0];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}


/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/*********************************** SHARED ***********************************/

int parseInt(String s) {
  try {
    return Integer.parseInt(s);
  } catch (Exception e) {
    return 0;
  }
}

List getTransectTabGroups() {
  List transectTabGroups = new ArrayList();

  for (tabGroup : getTabGroups()) {
    if (hasNoUi        (tabGroup)) continue;
    if (isFlaggedNodata(tabGroup)) continue;

    transectTabGroups.add(tabGroup);
  }

  return transectTabGroups;
}

List getTransectArchEntTypes() {
  List archEntTypes = new ArrayList();

  for (tabGroup : getTransectTabGroups())
    archEntTypes.add(getArchEntType(tabGroup));

  return archEntTypes;
}

final String TRANSECT_TYPES = listToSqlString(getTransectArchEntTypes());
/******************************** SYNC DISABLE ********************************/
addOnEvent("Start/Tracklog/SyncOff", "click", "stopSync()");
addOnEvent("Start/Tracklog/SyncOn", "click", "startSync()");

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

stopSync();
/******************************* TRACKLOG GUIDE *******************************/
final String TRACKLOG_GUIDE_REF = "Start/Main/Guide";

addOnEvent(getTabRef(TRACKLOG_GUIDE_REF), "show", "updateTracklogGuide()");


String getTracklogGuideString(String color, String state) {
  String msg =
    "<p>" +
        "<b>Tracklog is: <span style='color: %s'>%s</span></b>" +
    "</p>" +
    "<hr/>";

  msg = replaceFirst(msg, color);
  msg = replaceFirst(msg, state);

  return msg;
}

void updateTracklogGuide() {
  String msgOn  = getTracklogGuideString("green", "Enabled");
  String msgOff = getTracklogGuideString("red",   "Disabled");

  if (isTrackingGPS()) populateWebViewHtml(TRACKLOG_GUIDE_REF, msgOn);
  else                 populateWebViewHtml(TRACKLOG_GUIDE_REF, msgOff);
}
/********************************** TRACKLOG **********************************/
import java.util.concurrent.Callable;

String tracklogStatus = "Tracklog is Stopped";
String tracklogState = "Stop";

numTracklogPoints = 0;
tracklogCurrentStatus = "";
numTransectPoints = 0;

void startTrackLog() {
  setGpsInternalExternal();
  if (startGPS())
    startDistTrack();
}

void setGpsInternalExternal() {
  setFieldValue("Start/Tracklog/internalExternalGPS", "{Internal}");
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            callback.call();
        }
    });
}

List getTransectButtons() {
  List btns = new ArrayList();
  List refs = getRefsMatching("Start/Main/*");
  refs.remove("Start/Main/Start_Tracklog");
  refs.remove("Start/Main/Stop_Tracklog");

  for (ref : refs)
    if ("button".equals(getType(ref)))
      btns.add(ref);

  return btns;
}

String getSurveyUnitId() {
  List   transectTabGroups           = getTransectTabGroups();
  String displayedTabGroup           = getDisplayedTabGroup();
  String previouslyDisplayedTabGroup = getPreviouslyDisplayedTabGroup();

  String thisUuid = getUuid(displayedTabGroup);
  String prevUuid = getUuid(previouslyDisplayedTabGroup);

  if (transectTabGroups.contains(displayedTabGroup)
      && thisUuid != null)
    return thisUuid;
  if (transectTabGroups.contains(previouslyDisplayedTabGroup)
      && prevUuid != null)
    return prevUuid;
  return null;
}

startTimeTrack() {
    stopTrack();

    String trackText = getFieldValue("Start/Tracklog/tracktimeText");
    int    trackInt  = parseInt(trackText);

    if (trackInt <= 0) {
      showToast("Please enter a positive number in the 'Tracking Distance Interval' field");
    } else if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Time";
        showToast("Tracklog enabled. Tracklog time interval set to " + trackText + " seconds.");
        startTrackingGPS("time", trackInt, "saveGPSTrack(\"Start\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
    updateTracklogGuide();
}

startDistTrack() {
    stopTrack();

    String trackText = getFieldValue("Start/Tracklog/trackdistText");
    int    trackInt  = parseInt(trackText);

    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Distance";
        showToast("Tracklog enabled. Tracklog distance interval set to " + trackText + " metres.");
        startTrackingGPS("distance", trackInt, "saveGPSTrack(\"Start\")");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }

    updateTracklogGuide();
}

stopTrack() {
    stopTrackingGPS();
    numTracklogPoints = 0;
    numTransectPoints = 0;
    tracklogState = "Stopped";
    showToast("Tracklog disabled.");
    updateTrackStatus();
    saveGPSTrack("End");
    updateTracklogGuide();
}

updateTrackStatus() {
    if (tracklogState.equals("Time"))    
            tracklogStatus = "Tracklog Started - Time: "+getFieldValue("Start/Tracklog/tracktimeText")+"s";
    else if (tracklogState.equals("Distance"))
            tracklogStatus = "Tracklog Started - Distance: "+getFieldValue("Start/Tracklog/trackdistText")+"m";
    else
            tracklogStatus = "Tracklog is "+tracklogState;
    
    if (numTracklogPoints > 0)
        tracklogStatus += "\nNumber Tracklog Points collected: "+numTracklogPoints;
    if (numTransectPoints > 0)
        tracklogStatus += "\nNumber current transect Points collected: "+numTransectPoints;

    tracklogStatus += "\nCurrent GPS Estimated Accuracy: "+ getGPSEstimatedAccuracy();
    

    setFieldValue("Start/Tracklog/trackStatus", tracklogStatus);
}

isGPSOn() {
    return isInternalGPSOn() || isExternalGPSOn();
}

saveGPSTrack(String stateAppend) {
    if (isInUnitTestTime()) {
      // This function uses the Nutiteq `Point` class, which is difficult to
      // mock.
      return;
    }

    position = getGPSPosition();
    if (!isGPSOn() || position == null) {
        tracklogState = "Bad GPS Fix";
        return;
    }
    numTracklogPoints++;

    List attributes = createAttributeList();

    String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
    attributes.add(createEntityAttribute("Longitude"    , null , null , "" + position.getLongitude()   , null));
    attributes.add(createEntityAttribute("Latitude"     , null , null , "" + position.getLatitude()    , null));
    attributes.add(createEntityAttribute("Heading"      , null , null , "" + getGPSHeading()           , null));
    attributes.add(createEntityAttribute("Accuracy"     , null , null , "" + getGPSEstimatedAccuracy() , null));
    attributes.add(createEntityAttribute("Timestamp"    , null , null , "" + date                      , null));
    attributes.add(createEntityAttribute("TracklogTeam" , null , null , username                       , null));

    positionProj = getGPSPositionProjected();
    Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
    ArrayList l = new ArrayList();
    l.add(p);
    
    saveArchEnt(null, "Tracklog", l, attributes, new SaveCallback() {
        onSave(uuid, newRecord) {
            updateTrackStatus();
        }
    });
}

boolean startGPS() {
    Object intext = getFieldValue("Start/Tracklog/internalExternalGPS");
    if(isNull(intext)) {
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return false;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("Start/Tracklog/refreshText")));
    showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("Start/Tracklog/refreshText") + ".");
    if(intext.equals("Internal")) { 
        if(isExternalGPSOn()) stopGPS();
        startInternalGPS();
    }
    if(intext.equals("External")) {
        if(isInternalGPSOn()) stopGPS();
        startExternalGPS();
    }
    updateGPSDiagnostics();
    return true;
}

stopGPSLogic() {
    if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("GPS disabled.");
        stopGPS();
    } else {
        showToast("GPS is not turned on.");
    }
}

reallyDeleteTransectUnit(String tabGroup) {
    fetchAll("select transect.uuid " +
            "from " +
            "(select uuid, relationshipid " +
            "from (select aenttypeid from aenttype where aenttypename = '" + getArchEntType(tabGroup) + "')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) surveyUnit  " +
            "join ((select aenttypeid from aenttype where aenttypename = 'Transect Point')  " +
                    "join latestnondeletedarchent using (aenttypeid) " +
                    "join latestnondeletedaentreln using (uuid)) transect using (relationshipid) " +
            "where surveyUnit.uuid = " + getUuid(tabGroup) + ";", new FetchCallback() {
                onFetch(transects) {
                    if(!isNull(transects)) {
                        for(transect:transects) {
                            deleteArchEnt(transect.get(0));
                        }
                    }
                }
            });
    deleteArchEnt(getUuid(tabGroup));
}

removeActionBarItem("internal_gps");
removeActionBarItem("external_gps");
addActionBarItem("gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "{Disable_Internal_GPS}";
    }
    actionOn() {
        stopGPS();
        showToast("{Internal_GPS_Disabled}");
        updateGPSDiagnostics();
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "{Enable_Internal_GPS}";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startGPS();
    }
});

addOnEvent("Start/Tracklog", "show", "setGpsInternalExternal()");
addOnEvent("Start/Tracklog/startGPSButton", "click", "startGPS();");
addOnEvent("Start/Tracklog/stopGPSButton", "click", "stopGPSLogic();");
addOnEvent("Start/Tracklog/trackOffButton", "click", "stopTrack()");
addOnEvent("Start/Tracklog/trackdistButton", "click", "startDistTrack()");
addOnEvent("Start/Tracklog/tracktimeButton", "click", "startTimeTrack()");
addOnEvent("Start/Main/Stop_Tracklog",  "click", "stopTrack()");
addOnEvent("Start/Main/Start_Tracklog", "click", "startTrackLog()");

persistOverSessions("Start/Tracklog/refreshText",   "10");
persistOverSessions("Start/Tracklog/trackdistText", "20");
persistOverSessions("Start/Tracklog/tracktimeText", "30");

for (ref : getTransectTabGroups()) {
  addOnEvent(ref, "delete", "reallyDeleteTransectUnit", new Object[] {ref});
}
/**************************** DATE/TIME POPULATION ****************************/

List getDateTimeTabGroups() {
  // Construct list of Tab groups
  tabGroupList = getRefsMatching("*/((Date)|(Time))");
  for (int i = 0; i < tabGroupList.size(); i++) {
    // Convert full ref to tab group ref
    String ref;
    ref = tabGroupList.get(i);
    ref = getTabGroupRef(ref);

    tabGroupList.set(i, ref);
  }

  // `tabGroupList` might contain duplicates. Remove them here.
  Set tabGroupSet = new HashSet();
  tabGroupSet.addAll(tabGroupList);
  tabGroupList = new ArrayList(tabGroupSet);

  return tabGroupList;
}

String getTimeNow() { return getTimestampNow("HH:mm:ssZ",  true); }
String getDateNow() { return getTimestampNow("yyyy-MM-dd", false); }

void setDate() {
  List refs = getRefsMatching(getDisplayedTabGroup() + "/*/Date");
  for (ref : refs)
    setFieldValue(ref, getDateNow());
}

void setTime() {
  List refs = getRefsMatching(getDisplayedTabGroup() + "/*/Time");
  for (ref : refs)
    setFieldValue(ref, getTimeNow());
}

for (ref : getDateTimeTabGroups()) addOnEvent(ref, "create", "setDate()");
for (ref : getDateTimeTabGroups()) addOnEvent(ref, "create", "setTime()");
/************************************ MAP *************************************/
DATA_ENTRY_LAYER = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;

void loadHighlightedRecord() {
  List highlights = getGeometryHighlights(MAP_REF);
  boolean canLoadHighlightedRecord =
    highlights != void &&
    highlights != null &&
    highlights.size() == 1;

  if (!canLoadHighlightedRecord) {
    String head = "Cannot Load Record";
    String body = "You must highlight exactly one record to load.";

    showWarning(head, body);
    return;
  }

  List highlights = getGeometryHighlights(MAP_REF);
  Geometry geo = highlights.get(0);
  Point pt = (Point) geo;
  MapPos pos = pt.getMapPos();

  double longitude = pos.x;
  double latitude  = pos.y;

  String q = "";
  q += " SELECT uuid,";
  q += "        coalesce(";
  q += "            Distance(";
  q += "                 geospatialcolumn,";
  q += "                 MakePoint({longitude}, {latitude}),";
  q += "                 0";
  q += "            ),";
  q += "            0";
  q += "        ) AS dist";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += "    WHERE geospatialcolumn NOT NULL";
  q += "      AND dist < 1e-2 /* One centimetre */";
  q += "      AND aenttypename IN " + TRANSECT_TYPES;
  q += " ORDER BY dist";
  q += "    LIMIT 1;";
  q = replaceFirst(q, "{longitude}", "" + longitude);
  q = replaceFirst(q, "{latitude}",  "" + latitude);

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String head  = "{err_load_entity_head}";
      String body  =
        "The point you selected does not correspond to a viewable record.";

      if (result        == null) { showWarning(head, body); return; }
      if (result.size() == 0   ) { showWarning(head, body); return; }

      loadEntityFrom(result.get(0).get(0));
    }
  };

  fetchAll(q, callback);
}

addOnEvent(
    "Start/Map/Load_Highlighted_Record",
    "click",
    "loadHighlightedRecord()"
);

void initMap() {
    setMapZoom(MAP_REF, 15.0f);

    DATA_ENTRY_LAYER_ID = createCanvasLayer(MAP_REF, DATA_ENTRY_LAYER);

    showBaseMap(MAP_REF, "Base Layer", "files/data/maps/Biodiversity_2018_large_area_geotiff.4326.tif");

    // Tracklog
    isEntity = true;
    queryName = "Tracklog";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    ps = createPointStyle(10, Color.LTGRAY, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.LTGRAY, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(999, Color.TRANSPARENT, 30, Typeface.SANS_SERIF);
    showDatabaseLayer(MAP_REF, "Tracklog Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);

    // Setup Trap
    isEntity = true;
    queryName = "Setup Trap";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    ps = createPointStyle(10, Color.YELLOW, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.YELLOW, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(999, Color.TRANSPARENT, 30, Typeface.SANS_SERIF);
    showDatabaseLayer(MAP_REF, "Setup Trap Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
    assert(getTransectArchEntTypes().contains(queryName));

    // Check Trap
    isEntity = true;
    queryName = "Check Trap";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    ps = createPointStyle(10, Color.RED, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.RED, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(999, Color.TRANSPARENT, 30, Typeface.SANS_SERIF);
    showDatabaseLayer(MAP_REF, "Check Trap Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
    assert(getTransectArchEntTypes().contains(queryName));

    // Animal outside
    isEntity = true;
    queryName = "Animal outside";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    ps = createPointStyle(10, Color.MAGENTA, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.MAGENTA, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(999, Color.TRANSPARENT, 30, Typeface.SANS_SERIF);
    showDatabaseLayer(MAP_REF, "Animal outside Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
    assert(getTransectArchEntTypes().contains(queryName));

    // Plant Survey
    queryName = "Plant Survey";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    notesps = createPointStyle(10, Color.GREEN, 0.2f, 0.5f);
    notesls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    notespos = createPolygonStyle(10, Color.GREEN, createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    showDatabaseLayer(MAP_REF, "Plant Survey Layer", isEntity, queryName, querySQL, notesps, notesls, notespos, ts);
    assert(getTransectArchEntTypes().contains(queryName));

    // Cultural Knowledge
    queryName = "Cultural Knowledge";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    notesps = createPointStyle(10, Color.BLACK, 0.2f, 0.5f);
    notesls = createLineStyle(10, Color.BLACK, 0.05f, 0.3f, null);
    notespos = createPolygonStyle(10, Color.BLACK, createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    showDatabaseLayer(MAP_REF, "Cultural Knowledge Layer", isEntity, queryName, querySQL, notesps, notesls, notespos, ts);
    assert(getTransectArchEntTypes().contains(queryName));

    // Notes
    queryName = "Notes";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = '" + queryName + "'";
    notesps = createPointStyle(10, Color.WHITE, 0.2f, 0.5f);
    notesls = createLineStyle(10, Color.WHITE, 0.05f, 0.3f, null);
    notespos = createPolygonStyle(10, Color.WHITE, createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    showDatabaseLayer(MAP_REF, "Notes Layer", isEntity, queryName, querySQL, notesps, notesls, notespos, ts);
    assert(getTransectArchEntTypes().contains(queryName));
}

initMap();
/******************************* CUSTOM SEARCH ********************************/
addOnEvent("Start/Search", "show", "populateSelectDate()");
addOnEvent("Start/Search", "show", "populateSelectUser()");
delOnEvent("Start/Search", "show", "search()");
delOnEvent("Start/Search/Entity_Types"  , "click" , "search()");
addOnEvent("module", "load", "clearSearchResults()");

final String ATTRIBS_DATE = listToSqlString(getAttribsMatchingRef("*/*/*Date"));

void clearSearchResults() {
  populateCursorList(
      "Start/Search/Entity_List",
      "SELECT 0 WHERE 0 = 1 LIMIT ? OFFSET ?",
      25
  );
}

void populateSelectUser(){
  String refSearchUsers = "Start/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
    }
  });
}

void populateSelectDate() {
  String ref = "Start/Search/Select_Date";
  String q =
      " SELECT DISTINCT measure, measure" +
      "            FROM latestnondeletedaentvalue" +
      "            JOIN attributekey USING (attributeid)" +
      "           WHERE attributename IN " + ATTRIBS_DATE +
      "        ORDER BY measure";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      if (isNull(result))
        result = new ArrayList();

      // Add the option 'All' at the top of the list
      List all = new ArrayList();
      all.add("\\0");
      all.add("{All}");

      result.add(0, all);

      // Populate dropdown
      populateDropDown(ref, result, false);
    }
  };

  fetchAll(q, populate);
}

void search(){
  String refEntityList  = "Start/Search/Entity_List";
  String refSearchTerm  = "Start/Search/Search_Term";
  String refEntityTypes = "Start/Search/Entity_Types";
  String refSelectUser  = "Start/Search/Select_User";
  String refSelectDate  = "Start/Search/Select_Date";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String date = getFieldValue(refSelectDate);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR ('' = {type} AND aenttypename IN " + TRANSECT_TYPES + ")) "+
                       "                   AND ( userid = {user} OR '-1' = {user}) " +
                       "                )  "+
                       "  AND  ( " +
                       "           {date} = '\\0' OR" +
                       "           uuid IN (" +
                       "            SELECT uuid" +
                       "              FROM latestnondeletedaentvalue" +
                       "              JOIN attributekey USING (attributeid)" +
                       "             WHERE attributename IN " + ATTRIBS_DATE +
                       "               AND measure = {date}" +
                       "           )" +
                       "       )" +
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{user}", user);
  searchQuery = dbReplaceFirst(searchQuery, "{user}", user);
  searchQuery = dbReplaceFirst(searchQuery, "{date}", date);
  searchQuery = dbReplaceFirst(searchQuery, "{date}", date);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Start");

  Log.d("Module", "Search query: " + searchQuery);
}
/********************************* ENABLE GPS *********************************/
startInternalGPS();
updateGPSDiagnostics();
/********************************* CUSTOM GPS *********************************/
void takePoint(String tabgroup) {
  triggerAutoSave();
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = getArchEntType(tabgroup);
  String currentUuid = getUuid(tabgroup);

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  String sLatitude    = "" + latitude;
  String sLongitude   = "" + longitude;
  String sNorthing    = "" + northing;
  String sEasting     = "" + easting;

  MapPos mapPos = new MapPos(easting, northing);
  Point samplePoint = new Point(mapPos, null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  //setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy",  accuracy);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude", sLatitude);
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude",  sLongitude);
  //setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting",   sNorthing);
  //setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing",  sEasting);

  List attribs = createAttributeList();
  attribs.add(createEntityAttribute("Accuracy",  "", "", accuracy,   "1.0"));
  attribs.add(createEntityAttribute("Longitude", "", "", sLatitude,  "1.0"));
  attribs.add(createEntityAttribute("Latitude",  "", "", sLongitude, "1.0"));
  //attribs.add(createEntityAttribute("Northing",  "", "", sNorthing,  "1.0"));
  //attribs.add(createEntityAttribute("Easting",   "", "", sEasting,   "1.0"));

  String showToast = fun2str(
      "showToast",
      getArch16nKey(tabgroup) + " {toast_saved}"
  );
  SaveCallback saveCallback = getDefaultSaveCallback(tabgroup, showToast);
  saveArchEnt(currentUuid, archEntType, geolist, attribs, saveCallback);
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
}

void removeNorthingAndEasting() {
  // Northing and Easting fields are removed from from the autogenerated XML
  // using @POSTPROC. This function removes them from the logic.
  HashSet refsToDel = new HashSet();
  refsToDel.addAll(getRefsMatching("*/*/Easting"));
  refsToDel.addAll(getRefsMatching("*/*/Northing"));

  REF_TO_TYPE.keySet().removeAll(refsToDel);
  DATA_REFS           .removeAll(refsToDel);
}

removeNorthingAndEasting();
/*********************************** SUBMIT ***********************************/
List SUBMIT_BUTTON_REFS = getRefsMatching("*/Submit_and_Return");
assert(SUBMIT_BUTTON_REFS.size() != 0);

void submitAndReturn(String tabGroup) {
  saveTabGroup(tabGroup);
  goBack();
}

for (String submitButtonRefs : SUBMIT_BUTTON_REFS) {
  String tabGroup = getTabGroupRef(submitButtonRefs);
  addOnEvent(
      submitButtonRefs,
      "click",
      "submitAndReturn",
      new Object[]{tabGroup}
  );
}


/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
decAndExecIfModuleLoaded();
