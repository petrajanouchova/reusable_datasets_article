/*
 * GENERATED WITH FAIMS-TOOLS, SHA1: 50d0ee0dc3f7c02759156a5d7b7187a9da55b27f
 */
import android.util.Log;
import android.os.Build.MODEL;
import java.util.concurrent.atomic.AtomicInteger;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

final String USER_MENU_PATH = "User/User_List/Users";
userMenuPath = USER_MENU_PATH; // Depricated. Use `USER_MENU_PATH` instead

final long SESS_START_TIME = System.currentTimeMillis();

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

if (isNull(USER_MENU_PATH)) {
  Log.w("", "`USER_MENU_PATH` is empty or null");
}

boolean isInUnitTestTime() {
  return android.os.Build.MODEL.equals("faims-mock-device");
}

/******************************************************************************/
/*                                STRING UTILS                                */
/******************************************************************************/

/* Works similarly to Java's String.replaceFirst, except the `needle` is a
 * string instead of a regex.
 */
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

/* Replaces `placeholder` in an SQL `query` with `replacement`. The following
 * example returns the string
 * "SELECT * FROM table WHERE col1 = 'my replacement'":
 *
 * dbReplaceFirst(
 *     "SELECT * FROM table WHERE col1 = {my_placeholder}",
 *     "{my_placeholder}",
 *     "my replacement"
 * );
 */
String dbReplaceFirst(String query, String placeholder, String replacement) {
  String escapedReplacement = DatabaseUtils.sqlEscapeString(replacement);
  return replaceFirst(query, placeholder, escapedReplacement);
}

String dbReplaceFirst(String query, String replacement) {
  return dbReplaceFirst(query, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP  = "";
Map     REF_TO_TYPE                    = new HashMap();
HashSet DATA_REFS                      = new HashSet();
HashSet NO_UI_REFS                     = new HashSet();
HashSet HIER_REFS                      = new HashSet();
Map     VP_REF_TO_REF                  = new HashMap();
HashSet REFS_AS_HASH_SET               = null;
List    REFS_AS_LIST                   = null;
List    TAB_GROUPS_AS_LIST             = new ArrayList();
HashSet TAB_GROUPS_AS_HASH_SET         = null;
List    TABS_AS_LIST                   = new ArrayList();
HashSet TABS_AS_HASH_SET               = null;
HashMap ATTRIB_NAMES_NON_STANDARD      = new HashMap();

REF_TO_TYPE.put("User/User_List/Users", "dropdown");
REF_TO_TYPE.put("User/User_List/Device_Code", "dropdown");
REF_TO_TYPE.put("User/User_List/Login", "button");
REF_TO_TYPE.put("User/User_List/Module_Guide", "button");
REF_TO_TYPE.put("User/Help/Help", "webview");
REF_TO_TYPE.put("Control/Site/New_Site_Name", "input");
REF_TO_TYPE.put("Control/Site/Year_of_Campaign", "input");
REF_TO_TYPE.put("Control/Site/GPS_Diagnostics", "gpsdiag");
REF_TO_TYPE.put("Control/Site/Create_New_Site", "button");
REF_TO_TYPE.put("Control/Site/Choose_an_Existing_Site", "list");
REF_TO_TYPE.put("Control/Next_IDs/Next_Stratum_Feature_ID", "input");
REF_TO_TYPE.put("Control/Next_IDs/Next_FCN_ID", "input");
REF_TO_TYPE.put("Control/Search/Search_Term", "input");
REF_TO_TYPE.put("Control/Search/Search_Button", "button");
REF_TO_TYPE.put("Control/Search/Entity_Types", "dropdown");
REF_TO_TYPE.put("Control/Search/Entity_List", "list");
REF_TO_TYPE.put("Site/Site/Site_Site_Name", "input");
REF_TO_TYPE.put("Site/Site/Site_Year_of_Campaign", "input");
REF_TO_TYPE.put("Site/Site/Guide", "webview");
REF_TO_TYPE.put("Site/Site/Trench_ID", "input");
REF_TO_TYPE.put("Site/Site/Create_New_Trench", "button");
REF_TO_TYPE.put("Site/Site/List_of_Existing_Trenches", "list");
REF_TO_TYPE.put("Site/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Trench/Trench/Trench_Site_Name", "input");
REF_TO_TYPE.put("Trench/Trench/Trench_author", "input");
REF_TO_TYPE.put("Trench/Trench/Trench_Trench_ID", "input");
REF_TO_TYPE.put("Trench/Trench/Team_Members", "input");
REF_TO_TYPE.put("Trench/Trench/Trench_Dimensions", "dropdown");
REF_TO_TYPE.put("Trench/Trench/Grid_SW_Corner_Coordinates", "webview");
REF_TO_TYPE.put("Trench/Trench/Latitude", "input");
REF_TO_TYPE.put("Trench/Trench/Longitude", "input");
REF_TO_TYPE.put("Trench/Trench/Northing", "input");
REF_TO_TYPE.put("Trench/Trench/Easting", "input");
REF_TO_TYPE.put("Trench/Trench/Accuracy", "input");
REF_TO_TYPE.put("Trench/Trench/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Trench/Trench/Excavation_Method", "checkbox");
REF_TO_TYPE.put("Trench/Trench/Trench_timestamp", "input");
REF_TO_TYPE.put("Trench/Trench/Set_Date_Closed", "button");
REF_TO_TYPE.put("Trench/Trench/Date_Closed", "input");
REF_TO_TYPE.put("Trench/Trench/Brief_Description", "input");
REF_TO_TYPE.put("Trench/Trench/Your_Discussion", "input");
REF_TO_TYPE.put("Trench/Trench/Add_Trench_Files", "button");
REF_TO_TYPE.put("Trench/Trench/Attached_Trench_Files", "dropdown");
REF_TO_TYPE.put("Trench/Loci/Create_New_Locus", "button");
REF_TO_TYPE.put("Trench/Loci/List_of_Existing_Loci", "list");
REF_TO_TYPE.put("Trench/Strata_Features/Create_New_Stratum_Feature", "button");
REF_TO_TYPE.put("Trench/Strata_Features/List_of_Existing_Strata_Features", "list");
REF_TO_TYPE.put("Trench/FCNs/Create_New_FCN", "button");
REF_TO_TYPE.put("Trench/FCNs/List_of_Existing_FCNs", "list");
REF_TO_TYPE.put("Trench/Diaries/Create_New_Diary", "button");
REF_TO_TYPE.put("Trench/Diaries/List_of_Existing_Diaries", "list");
REF_TO_TYPE.put("Trench/Legacies/Create_New_Legacy", "button");
REF_TO_TYPE.put("Trench/Legacies/List_of_Existing_Legacies", "list");
REF_TO_TYPE.put("Trench/Vars/Trench_Year_of_Campaign", "input");
REF_TO_TYPE.put("Trench/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Date_Closed/Date_Closed/Date_Closed", "input");
REF_TO_TYPE.put("Date_Closed/Date_Closed/Set_Date_Closed", "button");
REF_TO_TYPE.put("Date_Closed/Date_Closed/Cancel", "button");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Trench_Files_Site_Name", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Trench_Files_Year_of_Campaign", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Trench_Files_Trench_ID", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Trench_Files_author", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/File_Type", "dropdown");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/File_Name", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/File_Comment", "input");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Add_Photo", "camera");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Add_Photo_Button_1", "button");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Attach_File", "file");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/Attach_File_Button_1", "button");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files/View_Attached_Files", "viewfiles");
REF_TO_TYPE.put("Trench_Files/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Locus/General/Locus_Site_Name", "input");
REF_TO_TYPE.put("Locus/General/Locus_Trench_ID", "input");
REF_TO_TYPE.put("Locus/General/Locus_Locus_ID", "input");
REF_TO_TYPE.put("Locus/General/Brief_Description", "input");
REF_TO_TYPE.put("Locus/General/Grid_X", "input");
REF_TO_TYPE.put("Locus/General/Grid_Y", "input");
REF_TO_TYPE.put("Locus/General/Date_Opened", "input");
REF_TO_TYPE.put("Locus/General/Team_Members", "input");
REF_TO_TYPE.put("Locus/General/Excavation_Method", "checkbox");
REF_TO_TYPE.put("Locus/General/Basal_Edge_Definition", "dropdown");
REF_TO_TYPE.put("Locus/General/Contamination", "dropdown");
REF_TO_TYPE.put("Locus/General/Locus_Type", "picture");
REF_TO_TYPE.put("Locus/General/Fill_in_Locus_Type_Details", "button");
REF_TO_TYPE.put("Locus/General/Photo_of_Plan", "camera");
REF_TO_TYPE.put("Locus/General/Photo_of_Plan_Button_1", "button");
REF_TO_TYPE.put("Locus/General/Photo_of_Section", "camera");
REF_TO_TYPE.put("Locus/General/Photo_of_Section_Button_1", "button");
REF_TO_TYPE.put("Locus/General/Date_Closed", "input");
REF_TO_TYPE.put("Locus/General/Add_Date_Closed", "button");
REF_TO_TYPE.put("Locus/General/Locus_author", "input");
REF_TO_TYPE.put("Locus/General/Locus_timestamp", "input");
REF_TO_TYPE.put("Locus/Measure/Absolute_Height_Top_m", "input");
REF_TO_TYPE.put("Locus/Measure/Absolute_Height_Bottom_m", "input");
REF_TO_TYPE.put("Locus/Measure/Measure_Length", "input");
REF_TO_TYPE.put("Locus/Measure/Measure_Width", "input");
REF_TO_TYPE.put("Locus/Measure/Measure_Depth", "input");
REF_TO_TYPE.put("Locus/Measure/NW_Top_Height", "input");
REF_TO_TYPE.put("Locus/Measure/SW_Top_Height", "input");
REF_TO_TYPE.put("Locus/Measure/Center_Top_Height", "input");
REF_TO_TYPE.put("Locus/Measure/NE_Top_Height", "input");
REF_TO_TYPE.put("Locus/Measure/SE_Top_Height", "input");
REF_TO_TYPE.put("Locus/Measure/NW_Bottom_Height", "input");
REF_TO_TYPE.put("Locus/Measure/SW_Bottom_Height", "input");
REF_TO_TYPE.put("Locus/Measure/Center_Bottom_Height", "input");
REF_TO_TYPE.put("Locus/Measure/NE_Bottom_Height", "input");
REF_TO_TYPE.put("Locus/Measure/SE_Bottom_Height", "input");
REF_TO_TYPE.put("Locus/Measure/Volume_Liters", "input");
REF_TO_TYPE.put("Locus/Cut/Cut_Your_Interpretation", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Shape_in_Plan", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Shape_of_Cut_-_Note", "input");
REF_TO_TYPE.put("Locus/Cut/Shape_of_Corners", "radio");
REF_TO_TYPE.put("Locus/Cut/Break_of_Slope_-_Top", "radio");
REF_TO_TYPE.put("Locus/Cut/Break_of_Slope_-_Base", "radio");
REF_TO_TYPE.put("Locus/Cut/Sides_of_Cut", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Shape_of_Base", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Orientation", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Orientation_Degree", "input");
REF_TO_TYPE.put("Locus/Cut/Inclination_of_axis", "dropdown");
REF_TO_TYPE.put("Locus/Cut/Truncation", "input");
REF_TO_TYPE.put("Locus/Construction/Description", "input");
REF_TO_TYPE.put("Locus/Construction/Discussion", "input");
REF_TO_TYPE.put("Locus/Construction/Length", "input");
REF_TO_TYPE.put("Locus/Construction/Width", "input");
REF_TO_TYPE.put("Locus/Construction/NW_Top_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/SW_Top_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/Center_Top_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/NE_Top_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/SE_Top_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/NW_Bottom_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/SW_Bottom_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/Center_Bottom_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/NE_Bottom_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/SE_Bottom_Depth", "input");
REF_TO_TYPE.put("Locus/Construction/Mid_X", "input");
REF_TO_TYPE.put("Locus/Construction/Mid_Y", "input");
REF_TO_TYPE.put("Locus/Construction/Sorting", "input");
REF_TO_TYPE.put("Locus/Construction/Notes", "input");
REF_TO_TYPE.put("Locus/Construction/Plans", "input");
REF_TO_TYPE.put("Locus/Construction/Section_Numbers", "input");
REF_TO_TYPE.put("Locus/Deposit/Deposit_Your_Interpretation", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Texture", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Texture_Description", "input");
REF_TO_TYPE.put("Locus/Deposit/Soil_Particle_Sorting", "picture");
REF_TO_TYPE.put("Locus/Deposit/Material", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Material_Helper", "button");
REF_TO_TYPE.put("Locus/Deposit/Soil_Colour", "input");
REF_TO_TYPE.put("Locus/Deposit/Add_Munsel_Color", "button");
REF_TO_TYPE.put("Locus/Deposit/Munsel_Colors", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Composition_Type", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Deposit_Bedding", "dropdown");
REF_TO_TYPE.put("Locus/Deposit/Sterile", "radio");
REF_TO_TYPE.put("Locus/Deposit/Deposit_Inclusions", "input");
REF_TO_TYPE.put("Locus/Deposit/Add_New_Sediment_Aggregate", "button");
REF_TO_TYPE.put("Locus/Deposit/Associated_Sediment_Aggregates", "dropdown");
REF_TO_TYPE.put("Locus/Skeleton/Location", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Dimensions", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Head", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Body", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Left_Arm", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Right_Arm", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Left_Leg", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Right_Leg", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Condition", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Surface_Modifications", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Environment", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Days_Exposed", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_A_X", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_A_Y", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_A_Z", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_B_X", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_B_Y", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_B_Z", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_C_X", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_C_Y", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_C_Z", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_D_X", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_D_Y", "input");
REF_TO_TYPE.put("Locus/Skeleton/Target_D_Z", "input");
REF_TO_TYPE.put("Locus/Skeleton/Skeleton_Notes", "input");
REF_TO_TYPE.put("Locus/Int/Your_description", "input");
REF_TO_TYPE.put("Locus/Int/Your_Discussion", "input");
REF_TO_TYPE.put("Locus/Relationships/Create_Relationships_to_This_Locus", "button");
REF_TO_TYPE.put("Locus/Relationships/Existing_Relationships_to_This_Locus", "list");
REF_TO_TYPE.put("Locus/Relationships/Selected_Relationship", "webview");
REF_TO_TYPE.put("Locus/Relationships/Load_Related_Locus", "button");
REF_TO_TYPE.put("Locus/Relationships/Delete_Relationship", "button");
REF_TO_TYPE.put("Locus/FCNs/Add_FCN", "button");
REF_TO_TYPE.put("Locus/FCNs/List_of_Related_FCNs", "list");
REF_TO_TYPE.put("Locus/Add/Photo", "camera");
REF_TO_TYPE.put("Locus/Add/Photo_Button_1", "button");
REF_TO_TYPE.put("Locus/Add/Attach_File", "file");
REF_TO_TYPE.put("Locus/Add/Attach_File_Button_1", "button");
REF_TO_TYPE.put("Locus/Add/View_Attached_Files", "viewfiles");
REF_TO_TYPE.put("Locus/Add/Add_Photograph_Log", "button");
REF_TO_TYPE.put("Locus/Add/Select_a_Photograph_Log", "dropdown");
REF_TO_TYPE.put("Locus/Material_Helper/Material_Helper", "dropdown");
REF_TO_TYPE.put("Locus/Material_Helper/Update_Material", "button");
REF_TO_TYPE.put("Locus/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Locus/Vars/Locus_Year_of_Campaign", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Record_Type", "radio");
REF_TO_TYPE.put("Stratum_Feature/General/Feature_Type", "dropdown");
REF_TO_TYPE.put("Stratum_Feature/General/Feature_Prefix", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Stratum_Feature_Trench_ID", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Stratum_Feature_ID", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Description", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Interpretation", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Discussion", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Length", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Width", "input");
REF_TO_TYPE.put("Stratum_Feature/General/NW_Top_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/SW_Top_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Center_Top_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/NE_Top_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/SE_Top_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/NW_Bottom_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/SW_Bottom_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Center_Bottom_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/NE_Bottom_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/SE_Bottom_Depth", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Mid_X", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Mid_Y", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Plans", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Section_Numbers", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Stratum_Feature_author", "input");
REF_TO_TYPE.put("Stratum_Feature/General/Stratum_Feature_timestamp", "input");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci/Create_Relationships_to_This_Stratum_Feature", "button");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci/Existing_Relationships_to_This_Stratum_Feature", "list");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci/Selected_Relationship", "webview");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci/Load_Related_Locus", "button");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci/Delete_Relationship", "button");
REF_TO_TYPE.put("Stratum_Feature/Add/Photo", "camera");
REF_TO_TYPE.put("Stratum_Feature/Add/Photo_Button_1", "button");
REF_TO_TYPE.put("Stratum_Feature/Add/Attach_File", "file");
REF_TO_TYPE.put("Stratum_Feature/Add/Attach_File_Button_1", "button");
REF_TO_TYPE.put("Stratum_Feature/Add/View_Attached_Files", "viewfiles");
REF_TO_TYPE.put("Stratum_Feature/Add/Guide_2", "webview");
REF_TO_TYPE.put("Stratum_Feature/Add/Add_Photograph_Log", "button");
REF_TO_TYPE.put("Stratum_Feature/Add/Select_a_Photograph_Log", "dropdown");
REF_TO_TYPE.put("Stratum_Feature/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Stratum_Feature/Vars/Stratum_Feature_Site_Name", "input");
REF_TO_TYPE.put("Stratum_Feature/Vars/Stratum_Feature_Year_of_Campaign", "input");
REF_TO_TYPE.put("Stratum_Feature/Vars/L_Paren", "input");
REF_TO_TYPE.put("Stratum_Feature/Vars/R_Paren", "input");
REF_TO_TYPE.put("Stratum_Feature/Vars/Last_Feature_Type", "dropdown");
REF_TO_TYPE.put("Stratum_Feature/Vars/Last_Feature_Prefix", "input");
REF_TO_TYPE.put("Sediment_Aggregate/Sediment_Aggregate/Component_Type", "dropdown");
REF_TO_TYPE.put("Sediment_Aggregate/Sediment_Aggregate/Percentage", "input");
REF_TO_TYPE.put("Sediment_Aggregate/Sediment_Aggregate/Soil_Stone_Shape", "picture");
REF_TO_TYPE.put("Sediment_Aggregate/Vars/Locus_ID", "input");
REF_TO_TYPE.put("Sediment_Aggregate/Vars/Trench_ID", "input");
REF_TO_TYPE.put("Sediment_Aggregate/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log/Photo_Locus_ID", "input");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log/Photo_Stratum_Feature_ID", "input");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log/Photograph_Reference_ID", "input");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log/Scene_Type", "dropdown");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log/Brief_Description", "input");
REF_TO_TYPE.put("Photograph_Log/Vars/Photograph_Log_Site_Name", "input");
REF_TO_TYPE.put("Photograph_Log/Vars/Photograph_Log_Year_of_Campaign", "input");
REF_TO_TYPE.put("Photograph_Log/Vars/Photograph_Trench_ID", "input");
REF_TO_TYPE.put("Photograph_Log/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Diary/Diary/Title", "input");
REF_TO_TYPE.put("Diary/Diary/Timestamp", "input");
REF_TO_TYPE.put("Diary/Diary/Diary_author", "input");
REF_TO_TYPE.put("Diary/Diary/Text", "input");
REF_TO_TYPE.put("Diary/Diary/Photo", "camera");
REF_TO_TYPE.put("Diary/Diary/Photo_Button_1", "button");
REF_TO_TYPE.put("Diary/Vars/Diary_Site_Name", "input");
REF_TO_TYPE.put("Diary/Vars/Diary_Year_of_Campaign", "input");
REF_TO_TYPE.put("Diary/Vars/Diary_Trench_ID", "input");
REF_TO_TYPE.put("Diary/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Relationship/Relationships/Parent_Identifier", "webview");
REF_TO_TYPE.put("Relationship/Relationships/Trench_ID", "input");
REF_TO_TYPE.put("Relationship/Relationships/Locus_ID", "input");
REF_TO_TYPE.put("Relationship/Relationships/Relationship_Type", "dropdown");
REF_TO_TYPE.put("Relationship/Relationships/Search", "button");
REF_TO_TYPE.put("Relationship/Relationships/Add_Relationship", "button");
REF_TO_TYPE.put("Relationship/Relationships/Proposed_Relationship", "webview");
REF_TO_TYPE.put("Relationship/Relationships/Delete_Relationship", "button");
REF_TO_TYPE.put("Relationship/Relationships/Selected_Relationship", "webview");
REF_TO_TYPE.put("Relationship/Relationships/Unrelated_Loci", "list");
REF_TO_TYPE.put("Relationship/Relationships/Existing_Relationships", "list");
REF_TO_TYPE.put("Relationship/Legacies/Create_New_Legacy", "button");
REF_TO_TYPE.put("Relationship/Legacies/List_of_Existing_Legacies", "list");
REF_TO_TYPE.put("Relationship/Vars/Relationship_Site_Name", "input");
REF_TO_TYPE.put("Relationship/Vars/Relationship_Year_of_Campaign", "input");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Parent_Identifier", "webview");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Trench_ID", "input");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Locus_ID", "input");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Search", "button");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Add_Relationship", "button");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Proposed_Relationship", "webview");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Delete_Relationship", "button");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Selected_Relationship", "webview");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Unrelated_Loci", "list");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships/Existing_Relationships", "list");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Legacies/Create_New_Legacy", "button");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Legacies/List_of_Existing_Legacies", "list");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Site_Name", "input");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Year_of_Campaign", "input");
REF_TO_TYPE.put("FCN/General/FCN_ID", "input");
REF_TO_TYPE.put("FCN/General/FCN_Site_Name", "input");
REF_TO_TYPE.put("FCN/General/FCN_Trench_ID", "input");
REF_TO_TYPE.put("FCN/General/Locus_ID", "input");
REF_TO_TYPE.put("FCN/General/Latitude", "input");
REF_TO_TYPE.put("FCN/General/Longitude", "input");
REF_TO_TYPE.put("FCN/General/Northing", "input");
REF_TO_TYPE.put("FCN/General/Easting", "input");
REF_TO_TYPE.put("FCN/General/Accuracy", "input");
REF_TO_TYPE.put("FCN/General/Take_From_GPS_1", "button");
REF_TO_TYPE.put("FCN/General/Collection_Method", "dropdown");
REF_TO_TYPE.put("FCN/General/FCN_Class", "dropdown");
REF_TO_TYPE.put("FCN/General/FCN_Quantity", "input");
REF_TO_TYPE.put("FCN/General/FCN_Weight_g", "input");
REF_TO_TYPE.put("FCN/General/Volume_Liters", "input");
REF_TO_TYPE.put("FCN/General/Washed", "radio");
REF_TO_TYPE.put("FCN/General/Weighted", "radio");
REF_TO_TYPE.put("FCN/General/Analyzed", "radio");
REF_TO_TYPE.put("FCN/General/FCN_Group_Comment", "input");
REF_TO_TYPE.put("FCN/General/Attach_File", "file");
REF_TO_TYPE.put("FCN/General/Attach_File_Button_1", "button");
REF_TO_TYPE.put("FCN/General/View_Attached_Files", "viewfiles");
REF_TO_TYPE.put("FCN/General/Attach_Photograph", "camera");
REF_TO_TYPE.put("FCN/General/Attach_Photograph_Button_1", "button");
REF_TO_TYPE.put("FCN/Vars/FCN_Year_of_Campaign", "input");
REF_TO_TYPE.put("FCN/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color", "dropdown");
REF_TO_TYPE.put("Soil_Munsel_Color/Vars/Soil_Munsel_Color_Locus_ID", "input");
REF_TO_TYPE.put("Soil_Munsel_Color/Vars/Device_Code", "dropdown");
REF_TO_TYPE.put("Legacy/Legacy/Legacy_Site_Name", "input");
REF_TO_TYPE.put("Legacy/Legacy/Legacy_Year_of_Campaign", "input");
REF_TO_TYPE.put("Legacy/Legacy/Legacy_Trench_ID", "input");
REF_TO_TYPE.put("Legacy/Legacy/Legacy_Locus_ID", "input");
REF_TO_TYPE.put("Legacy/Var/Device_Code", "dropdown");
REF_TO_TYPE.put("User/User_List", "tab");
REF_TO_TYPE.put("User/Help", "tab");
REF_TO_TYPE.put("Control/Site", "tab");
REF_TO_TYPE.put("Control/Next_IDs", "tab");
REF_TO_TYPE.put("Control/Search", "tab");
REF_TO_TYPE.put("Site/Site", "tab");
REF_TO_TYPE.put("Site/Vars", "tab");
REF_TO_TYPE.put("Trench/Trench", "tab");
REF_TO_TYPE.put("Trench/Loci", "tab");
REF_TO_TYPE.put("Trench/Strata_Features", "tab");
REF_TO_TYPE.put("Trench/FCNs", "tab");
REF_TO_TYPE.put("Trench/Diaries", "tab");
REF_TO_TYPE.put("Trench/Legacies", "tab");
REF_TO_TYPE.put("Trench/Vars", "tab");
REF_TO_TYPE.put("Date_Closed/Date_Closed", "tab");
REF_TO_TYPE.put("Trench_Files/Add_Trench_Files", "tab");
REF_TO_TYPE.put("Trench_Files/Vars", "tab");
REF_TO_TYPE.put("Locus/General", "tab");
REF_TO_TYPE.put("Locus/Measure", "tab");
REF_TO_TYPE.put("Locus/Cut", "tab");
REF_TO_TYPE.put("Locus/Construction", "tab");
REF_TO_TYPE.put("Locus/Deposit", "tab");
REF_TO_TYPE.put("Locus/Skeleton", "tab");
REF_TO_TYPE.put("Locus/Int", "tab");
REF_TO_TYPE.put("Locus/Relationships", "tab");
REF_TO_TYPE.put("Locus/FCNs", "tab");
REF_TO_TYPE.put("Locus/Add", "tab");
REF_TO_TYPE.put("Locus/Material_Helper", "tab");
REF_TO_TYPE.put("Locus/Vars", "tab");
REF_TO_TYPE.put("Stratum_Feature/General", "tab");
REF_TO_TYPE.put("Stratum_Feature/Stratum_Feature_Loci", "tab");
REF_TO_TYPE.put("Stratum_Feature/Add", "tab");
REF_TO_TYPE.put("Stratum_Feature/Vars", "tab");
REF_TO_TYPE.put("Sediment_Aggregate/Sediment_Aggregate", "tab");
REF_TO_TYPE.put("Sediment_Aggregate/Vars", "tab");
REF_TO_TYPE.put("Photograph_Log/Photograph_Log", "tab");
REF_TO_TYPE.put("Photograph_Log/Vars", "tab");
REF_TO_TYPE.put("Diary/Diary", "tab");
REF_TO_TYPE.put("Diary/Vars", "tab");
REF_TO_TYPE.put("Relationship/Relationships", "tab");
REF_TO_TYPE.put("Relationship/Legacies", "tab");
REF_TO_TYPE.put("Relationship/Vars", "tab");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Relationships", "tab");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Legacies", "tab");
REF_TO_TYPE.put("Stratum_Feature_Relationship/Vars", "tab");
REF_TO_TYPE.put("FCN/General", "tab");
REF_TO_TYPE.put("FCN/Vars", "tab");
REF_TO_TYPE.put("Soil_Munsel_Color/Add_Soil_Munsel_Color", "tab");
REF_TO_TYPE.put("Soil_Munsel_Color/Vars", "tab");
REF_TO_TYPE.put("Legacy/Legacy", "tab");
REF_TO_TYPE.put("Legacy/Var", "tab");

DATA_REFS.add("Site/Site/Site_Site_Name");
DATA_REFS.add("Site/Site/Site_Year_of_Campaign");
DATA_REFS.add("Site/Vars/Device_Code");
DATA_REFS.add("Trench/Trench/Trench_Site_Name");
DATA_REFS.add("Trench/Trench/Trench_author");
DATA_REFS.add("Trench/Trench/Trench_Trench_ID");
DATA_REFS.add("Trench/Trench/Team_Members");
DATA_REFS.add("Trench/Trench/Trench_Dimensions");
DATA_REFS.add("Trench/Trench/Latitude");
DATA_REFS.add("Trench/Trench/Longitude");
DATA_REFS.add("Trench/Trench/Northing");
DATA_REFS.add("Trench/Trench/Easting");
DATA_REFS.add("Trench/Trench/Accuracy");
DATA_REFS.add("Trench/Trench/Excavation_Method");
DATA_REFS.add("Trench/Trench/Trench_timestamp");
DATA_REFS.add("Trench/Trench/Date_Closed");
DATA_REFS.add("Trench/Trench/Brief_Description");
DATA_REFS.add("Trench/Trench/Your_Discussion");
DATA_REFS.add("Trench/FCNs/List_of_Existing_FCNs");
DATA_REFS.add("Trench/Vars/Trench_Year_of_Campaign");
DATA_REFS.add("Trench/Vars/Device_Code");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Trench_Files_Site_Name");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Trench_Files_Year_of_Campaign");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Trench_Files_Trench_ID");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Trench_Files_author");
DATA_REFS.add("Trench_Files/Add_Trench_Files/File_Type");
DATA_REFS.add("Trench_Files/Add_Trench_Files/File_Name");
DATA_REFS.add("Trench_Files/Add_Trench_Files/File_Comment");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Add_Photo");
DATA_REFS.add("Trench_Files/Add_Trench_Files/Attach_File");
DATA_REFS.add("Trench_Files/Vars/Device_Code");
DATA_REFS.add("Locus/General/Locus_Site_Name");
DATA_REFS.add("Locus/General/Locus_Trench_ID");
DATA_REFS.add("Locus/General/Locus_Locus_ID");
DATA_REFS.add("Locus/General/Brief_Description");
DATA_REFS.add("Locus/General/Grid_X");
DATA_REFS.add("Locus/General/Grid_Y");
DATA_REFS.add("Locus/General/Date_Opened");
DATA_REFS.add("Locus/General/Team_Members");
DATA_REFS.add("Locus/General/Excavation_Method");
DATA_REFS.add("Locus/General/Basal_Edge_Definition");
DATA_REFS.add("Locus/General/Contamination");
DATA_REFS.add("Locus/General/Locus_Type");
DATA_REFS.add("Locus/General/Photo_of_Plan");
DATA_REFS.add("Locus/General/Photo_of_Section");
DATA_REFS.add("Locus/General/Date_Closed");
DATA_REFS.add("Locus/General/Locus_author");
DATA_REFS.add("Locus/General/Locus_timestamp");
DATA_REFS.add("Locus/Measure/Absolute_Height_Top_m");
DATA_REFS.add("Locus/Measure/Absolute_Height_Bottom_m");
DATA_REFS.add("Locus/Measure/Measure_Length");
DATA_REFS.add("Locus/Measure/Measure_Width");
DATA_REFS.add("Locus/Measure/Measure_Depth");
DATA_REFS.add("Locus/Measure/NW_Top_Height");
DATA_REFS.add("Locus/Measure/SW_Top_Height");
DATA_REFS.add("Locus/Measure/Center_Top_Height");
DATA_REFS.add("Locus/Measure/NE_Top_Height");
DATA_REFS.add("Locus/Measure/SE_Top_Height");
DATA_REFS.add("Locus/Measure/NW_Bottom_Height");
DATA_REFS.add("Locus/Measure/SW_Bottom_Height");
DATA_REFS.add("Locus/Measure/Center_Bottom_Height");
DATA_REFS.add("Locus/Measure/NE_Bottom_Height");
DATA_REFS.add("Locus/Measure/SE_Bottom_Height");
DATA_REFS.add("Locus/Measure/Volume_Liters");
DATA_REFS.add("Locus/Cut/Cut_Your_Interpretation");
DATA_REFS.add("Locus/Cut/Shape_in_Plan");
DATA_REFS.add("Locus/Cut/Shape_of_Cut_-_Note");
DATA_REFS.add("Locus/Cut/Shape_of_Corners");
DATA_REFS.add("Locus/Cut/Break_of_Slope_-_Top");
DATA_REFS.add("Locus/Cut/Break_of_Slope_-_Base");
DATA_REFS.add("Locus/Cut/Sides_of_Cut");
DATA_REFS.add("Locus/Cut/Shape_of_Base");
DATA_REFS.add("Locus/Cut/Orientation");
DATA_REFS.add("Locus/Cut/Orientation_Degree");
DATA_REFS.add("Locus/Cut/Inclination_of_axis");
DATA_REFS.add("Locus/Cut/Truncation");
DATA_REFS.add("Locus/Construction/Description");
DATA_REFS.add("Locus/Construction/Discussion");
DATA_REFS.add("Locus/Construction/Length");
DATA_REFS.add("Locus/Construction/Width");
DATA_REFS.add("Locus/Construction/NW_Top_Depth");
DATA_REFS.add("Locus/Construction/SW_Top_Depth");
DATA_REFS.add("Locus/Construction/Center_Top_Depth");
DATA_REFS.add("Locus/Construction/NE_Top_Depth");
DATA_REFS.add("Locus/Construction/SE_Top_Depth");
DATA_REFS.add("Locus/Construction/NW_Bottom_Depth");
DATA_REFS.add("Locus/Construction/SW_Bottom_Depth");
DATA_REFS.add("Locus/Construction/Center_Bottom_Depth");
DATA_REFS.add("Locus/Construction/NE_Bottom_Depth");
DATA_REFS.add("Locus/Construction/SE_Bottom_Depth");
DATA_REFS.add("Locus/Construction/Mid_X");
DATA_REFS.add("Locus/Construction/Mid_Y");
DATA_REFS.add("Locus/Construction/Sorting");
DATA_REFS.add("Locus/Construction/Notes");
DATA_REFS.add("Locus/Construction/Plans");
DATA_REFS.add("Locus/Construction/Section_Numbers");
DATA_REFS.add("Locus/Deposit/Deposit_Your_Interpretation");
DATA_REFS.add("Locus/Deposit/Texture");
DATA_REFS.add("Locus/Deposit/Texture_Description");
DATA_REFS.add("Locus/Deposit/Soil_Particle_Sorting");
DATA_REFS.add("Locus/Deposit/Material");
DATA_REFS.add("Locus/Deposit/Soil_Colour");
DATA_REFS.add("Locus/Deposit/Composition_Type");
DATA_REFS.add("Locus/Deposit/Deposit_Bedding");
DATA_REFS.add("Locus/Deposit/Sterile");
DATA_REFS.add("Locus/Deposit/Deposit_Inclusions");
DATA_REFS.add("Locus/Skeleton/Location");
DATA_REFS.add("Locus/Skeleton/Skeleton_Dimensions");
DATA_REFS.add("Locus/Skeleton/Skeleton_Head");
DATA_REFS.add("Locus/Skeleton/Skeleton_Body");
DATA_REFS.add("Locus/Skeleton/Skeleton_Left_Arm");
DATA_REFS.add("Locus/Skeleton/Skeleton_Right_Arm");
DATA_REFS.add("Locus/Skeleton/Skeleton_Left_Leg");
DATA_REFS.add("Locus/Skeleton/Skeleton_Right_Leg");
DATA_REFS.add("Locus/Skeleton/Skeleton_Condition");
DATA_REFS.add("Locus/Skeleton/Skeleton_Surface_Modifications");
DATA_REFS.add("Locus/Skeleton/Skeleton_Environment");
DATA_REFS.add("Locus/Skeleton/Skeleton_Days_Exposed");
DATA_REFS.add("Locus/Skeleton/Target_A_X");
DATA_REFS.add("Locus/Skeleton/Target_A_Y");
DATA_REFS.add("Locus/Skeleton/Target_A_Z");
DATA_REFS.add("Locus/Skeleton/Target_B_X");
DATA_REFS.add("Locus/Skeleton/Target_B_Y");
DATA_REFS.add("Locus/Skeleton/Target_B_Z");
DATA_REFS.add("Locus/Skeleton/Target_C_X");
DATA_REFS.add("Locus/Skeleton/Target_C_Y");
DATA_REFS.add("Locus/Skeleton/Target_C_Z");
DATA_REFS.add("Locus/Skeleton/Target_D_X");
DATA_REFS.add("Locus/Skeleton/Target_D_Y");
DATA_REFS.add("Locus/Skeleton/Target_D_Z");
DATA_REFS.add("Locus/Skeleton/Skeleton_Notes");
DATA_REFS.add("Locus/Int/Your_description");
DATA_REFS.add("Locus/Int/Your_Discussion");
DATA_REFS.add("Locus/Add/Photo");
DATA_REFS.add("Locus/Add/Attach_File");
DATA_REFS.add("Locus/Material_Helper/Material_Helper");
DATA_REFS.add("Locus/Vars/Device_Code");
DATA_REFS.add("Locus/Vars/Locus_Year_of_Campaign");
DATA_REFS.add("Stratum_Feature/General/Record_Type");
DATA_REFS.add("Stratum_Feature/General/Feature_Type");
DATA_REFS.add("Stratum_Feature/General/Feature_Prefix");
DATA_REFS.add("Stratum_Feature/General/Stratum_Feature_Trench_ID");
DATA_REFS.add("Stratum_Feature/General/Stratum_Feature_ID");
DATA_REFS.add("Stratum_Feature/General/Description");
DATA_REFS.add("Stratum_Feature/General/Interpretation");
DATA_REFS.add("Stratum_Feature/General/Discussion");
DATA_REFS.add("Stratum_Feature/General/Length");
DATA_REFS.add("Stratum_Feature/General/Width");
DATA_REFS.add("Stratum_Feature/General/NW_Top_Depth");
DATA_REFS.add("Stratum_Feature/General/SW_Top_Depth");
DATA_REFS.add("Stratum_Feature/General/Center_Top_Depth");
DATA_REFS.add("Stratum_Feature/General/NE_Top_Depth");
DATA_REFS.add("Stratum_Feature/General/SE_Top_Depth");
DATA_REFS.add("Stratum_Feature/General/NW_Bottom_Depth");
DATA_REFS.add("Stratum_Feature/General/SW_Bottom_Depth");
DATA_REFS.add("Stratum_Feature/General/Center_Bottom_Depth");
DATA_REFS.add("Stratum_Feature/General/NE_Bottom_Depth");
DATA_REFS.add("Stratum_Feature/General/SE_Bottom_Depth");
DATA_REFS.add("Stratum_Feature/General/Mid_X");
DATA_REFS.add("Stratum_Feature/General/Mid_Y");
DATA_REFS.add("Stratum_Feature/General/Plans");
DATA_REFS.add("Stratum_Feature/General/Section_Numbers");
DATA_REFS.add("Stratum_Feature/General/Stratum_Feature_author");
DATA_REFS.add("Stratum_Feature/General/Stratum_Feature_timestamp");
DATA_REFS.add("Stratum_Feature/Add/Photo");
DATA_REFS.add("Stratum_Feature/Add/Attach_File");
DATA_REFS.add("Stratum_Feature/Vars/Device_Code");
DATA_REFS.add("Stratum_Feature/Vars/Stratum_Feature_Site_Name");
DATA_REFS.add("Stratum_Feature/Vars/Stratum_Feature_Year_of_Campaign");
DATA_REFS.add("Stratum_Feature/Vars/L_Paren");
DATA_REFS.add("Stratum_Feature/Vars/R_Paren");
DATA_REFS.add("Stratum_Feature/Vars/Last_Feature_Type");
DATA_REFS.add("Stratum_Feature/Vars/Last_Feature_Prefix");
DATA_REFS.add("Sediment_Aggregate/Sediment_Aggregate/Component_Type");
DATA_REFS.add("Sediment_Aggregate/Sediment_Aggregate/Percentage");
DATA_REFS.add("Sediment_Aggregate/Sediment_Aggregate/Soil_Stone_Shape");
DATA_REFS.add("Sediment_Aggregate/Vars/Locus_ID");
DATA_REFS.add("Sediment_Aggregate/Vars/Trench_ID");
DATA_REFS.add("Sediment_Aggregate/Vars/Device_Code");
DATA_REFS.add("Photograph_Log/Photograph_Log/Photo_Locus_ID");
DATA_REFS.add("Photograph_Log/Photograph_Log/Photo_Stratum_Feature_ID");
DATA_REFS.add("Photograph_Log/Photograph_Log/Photograph_Reference_ID");
DATA_REFS.add("Photograph_Log/Photograph_Log/Scene_Type");
DATA_REFS.add("Photograph_Log/Photograph_Log/Brief_Description");
DATA_REFS.add("Photograph_Log/Vars/Photograph_Log_Site_Name");
DATA_REFS.add("Photograph_Log/Vars/Photograph_Log_Year_of_Campaign");
DATA_REFS.add("Photograph_Log/Vars/Photograph_Trench_ID");
DATA_REFS.add("Photograph_Log/Vars/Device_Code");
DATA_REFS.add("Diary/Diary/Title");
DATA_REFS.add("Diary/Diary/Timestamp");
DATA_REFS.add("Diary/Diary/Diary_author");
DATA_REFS.add("Diary/Diary/Text");
DATA_REFS.add("Diary/Diary/Photo");
DATA_REFS.add("Diary/Vars/Diary_Site_Name");
DATA_REFS.add("Diary/Vars/Diary_Year_of_Campaign");
DATA_REFS.add("Diary/Vars/Diary_Trench_ID");
DATA_REFS.add("Diary/Vars/Device_Code");
DATA_REFS.add("FCN/General/FCN_ID");
DATA_REFS.add("FCN/General/FCN_Site_Name");
DATA_REFS.add("FCN/General/FCN_Trench_ID");
DATA_REFS.add("FCN/General/Locus_ID");
DATA_REFS.add("FCN/General/Latitude");
DATA_REFS.add("FCN/General/Longitude");
DATA_REFS.add("FCN/General/Northing");
DATA_REFS.add("FCN/General/Easting");
DATA_REFS.add("FCN/General/Accuracy");
DATA_REFS.add("FCN/General/Collection_Method");
DATA_REFS.add("FCN/General/FCN_Class");
DATA_REFS.add("FCN/General/FCN_Quantity");
DATA_REFS.add("FCN/General/FCN_Weight_g");
DATA_REFS.add("FCN/General/Volume_Liters");
DATA_REFS.add("FCN/General/Washed");
DATA_REFS.add("FCN/General/Weighted");
DATA_REFS.add("FCN/General/Analyzed");
DATA_REFS.add("FCN/General/FCN_Group_Comment");
DATA_REFS.add("FCN/General/Attach_File");
DATA_REFS.add("FCN/General/Attach_Photograph");
DATA_REFS.add("FCN/Vars/FCN_Year_of_Campaign");
DATA_REFS.add("FCN/Vars/Device_Code");
DATA_REFS.add("Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color");
DATA_REFS.add("Soil_Munsel_Color/Vars/Soil_Munsel_Color_Locus_ID");
DATA_REFS.add("Soil_Munsel_Color/Vars/Device_Code");
DATA_REFS.add("Legacy/Legacy/Legacy_Site_Name");
DATA_REFS.add("Legacy/Legacy/Legacy_Year_of_Campaign");
DATA_REFS.add("Legacy/Legacy/Legacy_Trench_ID");
DATA_REFS.add("Legacy/Legacy/Legacy_Locus_ID");
DATA_REFS.add("Legacy/Var/Device_Code");

NO_UI_REFS.add("Stratum_Feature/General/Feature_Type");
NO_UI_REFS.add("Stratum_Feature/General/Feature_Prefix");
NO_UI_REFS.add("FCN/General/Volume_Liters");

VP_REF_TO_REF.put("User/User_List/Device_Code", "Locus/Vars/Device_Code");
VP_REF_TO_REF.put("Stratum_Feature/Vars/Last_Feature_Type", "Stratum_Feature/General/Feature_Type");

HIER_REFS.add("Locus/Cut/Shape_of_Base");
HIER_REFS.add("Locus/Material_Helper/Material_Helper");
HIER_REFS.add("Sediment_Aggregate/Sediment_Aggregate/Soil_Stone_Shape");
HIER_REFS.add("FCN/General/FCN_Class");
HIER_REFS.add("Soil_Munsel_Color/Add_Soil_Munsel_Color/Soil_Munsel_Color");

TAB_GROUPS_AS_LIST.add("User");
TAB_GROUPS_AS_LIST.add("Control");
TAB_GROUPS_AS_LIST.add("Site");
TAB_GROUPS_AS_LIST.add("Trench");
TAB_GROUPS_AS_LIST.add("Date_Closed");
TAB_GROUPS_AS_LIST.add("Trench_Files");
TAB_GROUPS_AS_LIST.add("Locus");
TAB_GROUPS_AS_LIST.add("Stratum_Feature");
TAB_GROUPS_AS_LIST.add("Sediment_Aggregate");
TAB_GROUPS_AS_LIST.add("Photograph_Log");
TAB_GROUPS_AS_LIST.add("Diary");
TAB_GROUPS_AS_LIST.add("Relationship");
TAB_GROUPS_AS_LIST.add("Stratum_Feature_Relationship");
TAB_GROUPS_AS_LIST.add("FCN");
TAB_GROUPS_AS_LIST.add("Soil_Munsel_Color");
TAB_GROUPS_AS_LIST.add("Legacy");

TABS_AS_LIST.add("User/User_List");
TABS_AS_LIST.add("User/Help");
TABS_AS_LIST.add("Control/Site");
TABS_AS_LIST.add("Control/Next_IDs");
TABS_AS_LIST.add("Control/Search");
TABS_AS_LIST.add("Site/Site");
TABS_AS_LIST.add("Site/Vars");
TABS_AS_LIST.add("Trench/Trench");
TABS_AS_LIST.add("Trench/Loci");
TABS_AS_LIST.add("Trench/Strata_Features");
TABS_AS_LIST.add("Trench/FCNs");
TABS_AS_LIST.add("Trench/Diaries");
TABS_AS_LIST.add("Trench/Legacies");
TABS_AS_LIST.add("Trench/Vars");
TABS_AS_LIST.add("Date_Closed/Date_Closed");
TABS_AS_LIST.add("Trench_Files/Add_Trench_Files");
TABS_AS_LIST.add("Trench_Files/Vars");
TABS_AS_LIST.add("Locus/General");
TABS_AS_LIST.add("Locus/Measure");
TABS_AS_LIST.add("Locus/Cut");
TABS_AS_LIST.add("Locus/Construction");
TABS_AS_LIST.add("Locus/Deposit");
TABS_AS_LIST.add("Locus/Skeleton");
TABS_AS_LIST.add("Locus/Int");
TABS_AS_LIST.add("Locus/Relationships");
TABS_AS_LIST.add("Locus/FCNs");
TABS_AS_LIST.add("Locus/Add");
TABS_AS_LIST.add("Locus/Material_Helper");
TABS_AS_LIST.add("Locus/Vars");
TABS_AS_LIST.add("Stratum_Feature/General");
TABS_AS_LIST.add("Stratum_Feature/Stratum_Feature_Loci");
TABS_AS_LIST.add("Stratum_Feature/Add");
TABS_AS_LIST.add("Stratum_Feature/Vars");
TABS_AS_LIST.add("Sediment_Aggregate/Sediment_Aggregate");
TABS_AS_LIST.add("Sediment_Aggregate/Vars");
TABS_AS_LIST.add("Photograph_Log/Photograph_Log");
TABS_AS_LIST.add("Photograph_Log/Vars");
TABS_AS_LIST.add("Diary/Diary");
TABS_AS_LIST.add("Diary/Vars");
TABS_AS_LIST.add("Relationship/Relationships");
TABS_AS_LIST.add("Relationship/Legacies");
TABS_AS_LIST.add("Relationship/Vars");
TABS_AS_LIST.add("Stratum_Feature_Relationship/Relationships");
TABS_AS_LIST.add("Stratum_Feature_Relationship/Legacies");
TABS_AS_LIST.add("Stratum_Feature_Relationship/Vars");
TABS_AS_LIST.add("FCN/General");
TABS_AS_LIST.add("FCN/Vars");
TABS_AS_LIST.add("Soil_Munsel_Color/Add_Soil_Munsel_Color");
TABS_AS_LIST.add("Soil_Munsel_Color/Vars");
TABS_AS_LIST.add("Legacy/Legacy");
TABS_AS_LIST.add("Legacy/Var");

ATTRIB_NAMES_NON_STANDARD.put("Trench/Trench/Team_Members", "Trench Team Members");
ATTRIB_NAMES_NON_STANDARD.put("Trench/Trench/Date_Closed", "Trench Date Closed");
ATTRIB_NAMES_NON_STANDARD.put("Trench/Trench/Brief_Description", "Trench Brief Description");
ATTRIB_NAMES_NON_STANDARD.put("Trench/Trench/Your_Discussion", "Trench Your Discussion");
ATTRIB_NAMES_NON_STANDARD.put("Locus/General/Brief_Description", "Locus Brief Description");
ATTRIB_NAMES_NON_STANDARD.put("Locus/General/Team_Members", "Locus Team Members");
ATTRIB_NAMES_NON_STANDARD.put("Locus/General/Date_Closed", "Locus Date Closed");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Measure/Volume_Liters", "Locus Volume Liters");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Description", "Locus Description");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Discussion", "Locus Discussion");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Length", "Locus Length");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Width", "Locus Width");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Mid_X", "Locus Mid X");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Mid_Y", "Locus Mid Y");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Plans", "Locus Plans");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Construction/Section_Numbers", "Locus Section Numbers");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Int/Your_Discussion", "Locus Your Discussion");
ATTRIB_NAMES_NON_STANDARD.put("Locus/Add/Photo", "Locus Photo");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Description", "Stratum Feature Description");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Discussion", "Stratum Feature Discussion");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Length", "Stratum Feature Length");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Width", "Stratum Feature Width");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Mid_X", "Stratum Feature Mid X");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Mid_Y", "Stratum Feature Mid Y");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Plans", "Stratum Feature Plans");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/General/Section_Numbers", "Stratum Feature Section Numbers");
ATTRIB_NAMES_NON_STANDARD.put("Stratum_Feature/Add/Photo", "Stratum Feature Photo");
ATTRIB_NAMES_NON_STANDARD.put("Sediment_Aggregate/Vars/Locus_ID", "Sediment Aggregate Locus ID");
ATTRIB_NAMES_NON_STANDARD.put("Photograph_Log/Photograph_Log/Brief_Description", "Photograph Log Brief Description");
ATTRIB_NAMES_NON_STANDARD.put("Diary/Diary/Photo", "Diary Photo");
ATTRIB_NAMES_NON_STANDARD.put("FCN/General/Locus_ID", "FCN Locus ID");
ATTRIB_NAMES_NON_STANDARD.put("FCN/General/Volume_Liters", "FCN Volume Liters");

String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

List getRefs() {
  return getRefsAsList();
}

List getRefsAsList() {
  if (REFS_AS_LIST == null)
    REFS_AS_LIST = new ArrayList(REF_TO_TYPE.keySet());
  return REFS_AS_LIST;
}

HashSet getRefsAsHashSet() {
  if (REFS_AS_HASH_SET == null)
    REFS_AS_HASH_SET = new HashSet(REF_TO_TYPE.keySet());
  return REFS_AS_HASH_SET;
}

List getRefsByType(String type) {
  List refs = new ArrayList();
  for (String ref : getRefs())
    if (getType(ref).equals(type))
      refs.add(ref);
  return refs;
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

boolean hasNoUi(String ref) {
  return NO_UI_REFS.contains(ref);
}

String getVpRef(String ref) {
  return VP_REF_TO_REF.get(ref);
}

boolean hasVpRef(String ref) {
  return getVpRef(ref) != null;
}

boolean isHier(String ref) {
  return HIER_REFS.contains(ref);
}

List getTabGroups() { return getTabGroupsAsList(); }
List getTabGroupsAsList() { return TAB_GROUPS_AS_LIST; }

HashSet getTabGroupsAsHashSet() {
  if (TAB_GROUPS_AS_HASH_SET == null)
    TAB_GROUPS_AS_HASH_SET = new HashSet(TAB_GROUPS_AS_LIST);
  return TAB_GROUPS_AS_HASH_SET;
}

List getTabs() { return getTabGroupsAsList(); }
List getTabsAsList() { return TABS_AS_LIST; }

HashSet getTabsAsHashSet() {
  if (TABS_AS_HASH_SET == null)
    TABS_AS_HASH_SET = new HashSet(TABS_AS_LIST);
  return TABS_AS_HASH_SET;
}

List getStartingIdRefs() {
  List l = new ArrayList();
  l.add("Control/Next_IDs/Next_Stratum_Feature_ID");
  l.add("Control/Next_IDs/Next_FCN_ID");
  return l;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  menuTypes.add("checkbox");
  menuTypes.add("dropdown");
  menuTypes.add("list");
  menuTypes.add("picture");
  menuTypes.add("radio");
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  mediaTypes.add("audio");
  mediaTypes.add("camera");
  mediaTypes.add("file");
  mediaTypes.add("video");
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  List flaggedTabGroups = new ArrayList();
  flaggedTabGroups.add("User");
  flaggedTabGroups.add("Control");
  flaggedTabGroups.add("Date_Closed");
  flaggedTabGroups.add("Relationship");
  flaggedTabGroups.add("Stratum_Feature_Relationship");
  return flaggedTabGroups.contains(tabGroup);
}

void updateDisplayedTabGroup(String tabGroup) {
  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  String arch16nKey = getArch16nKey(ref);

  if (isNull(arch16nKey)) return "";
  arch16nKey = arch16nKey.replaceAll("_", " ");
  arch16nKey = arch16nKey.replaceAll("^\\{", "");
  arch16nKey = arch16nKey.replaceAll("\\}$", "");
  return arch16nKey;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef))
    return null;

  if (ATTRIB_NAMES_NON_STANDARD.containsKey(ref))
    return ATTRIB_NAMES_NON_STANDARD.get(ref);

  return guiElementRef.replaceAll("_", " ");
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a record is first created.                */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*                                                                            */
/* Additionally, the binding accumulator augments the "load" event so that    */
/* the `statement` in addOnEvent("module", "load", statement) gets executed   */
/* after the module has finished loading. (That is, when this script has been */
/* loaded, including the execution of any asynchronous functions.)            */
/*                                                                            */
/* Importantly, a single call to `bindOnEvents` must occur after all the      */
/* `addOnEvent` and `delOnEvents` calls. Calling `bindOnEvents` is what       */
/* actually establishes the bindings once they have been added to the         */
/* accumulator.                                                               */
/******************************************************************************/
// This counts the number of _a_synchonrous jobs before the module is considered
// to be loaded.
//     Only one synchronous job is counted, and that's loading this script; that
// is why this variable is initialised to 1.
AtomicInteger NUM_JOBS_TILL_LOADED = new AtomicInteger(1);

Map EVENTS        = new HashMap(); // (ref, event type) -> callback statement
Set CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`

CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");

String getKey(String ref, String event) {
  return ref + SEP + event;
}

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
ArrayList getStatements(String ref, String event) {
  String    key = getKey(ref, event);
  ArrayList val = (ArrayList) EVENTS.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

void addStatement(String ref, String event, String statement) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `EVENTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `EVENTS.put` is required.

  String    key = getKey(ref, event);
  ArrayList val = getStatements(ref, event);
  val.add(statement);
  EVENTS.put(key, val);
}

String getStatementsString(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsStr = "";
  for (String s : stmts) {
    stmtsStr += s;
    stmtsStr += "; ";
  }
  return stmtsStr;
}

void executeOnEvent(String ref, String event) {
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

void addOnEvent(String ref, String event, String statement) {
  if (
      !getRefsAsHashSet()     .contains(ref) &&
      !getTabsAsHashSet()     .contains(ref) &&
      !getTabGroupsAsHashSet().contains(ref) &&
      !"module".equals(ref)
  ) {
    Log.w(
        this.namespace.getInvocationText(),
        "Ref '" + ref + "' may not refer to a UI element"
    );
  }

  // Calling `delOnEvent()` first ensures statement occurs once in the list, at
  // the end.
  delOnEvent  (ref, event, statement);
  addStatement(ref, event, statement);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (event.equals("load") && ref.equals("module")) {
    ;
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : EVENTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

void incJobsTillLoaded() {
  NUM_JOBS_TILL_LOADED.incrementAndGet();
}

boolean isModuleLoaded() {
  return NUM_JOBS_TILL_LOADED.get() == 0;
}

/* Returns `true` if the module has loaded.
 */
boolean decJobsTillLoaded() {
  return NUM_JOBS_TILL_LOADED.decrementAndGet() == 0;
}

void decAndExecIfModuleLoaded() {
  if (decJobsTillLoaded())
    executeOnEvent("module", "load");
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work. The
 * "leave" event is really triggered upon "show" of another tab.
 */
for (tg : getTabGroups()) {
  String ref      = tg;
  String event    = "show";
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, event, callback);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, event, callback);
}

/******************************************************************************/
/*                     LOCALSETTINGS VIEW/TABLE CREATION                      */
/******************************************************************************/
void makeLocalId(){
  fetchOne(
      "CREATE TABLE IF NOT EXISTS perflog (" +
      "    id              INTEGER PRIMARY KEY," +
      "    deviceModel     TEXT," +
      "    sessStartMs     INTEGER," +
      "    srcLine         TEXT," +
      "    query           TEXT," +
      "    queryStartMs    INTEGER," +
      "    queryStopMs     INTEGER," +
      "    numAentvalue    INTEGER," +
      "    numArchentity   INTEGER," +
      "    numRelationship INTEGER," +
      "    numAentreln     INTEGER " +
      ")"
  );

  fetchOne(
      "CREATE TABLE IF NOT EXISTS localSettings (" +
      "    key   TEXT PRIMARY KEY," +
      "    value TEXT" +
      ")"
  );

  fetchOne(
      "DROP VIEW IF EXISTS parentchild"
  );

  fetchOne(
      "CREATE VIEW parentchild AS "+
      "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
      "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) parent "+
      "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
      "                     FROM latestnondeletedaentreln "+
      "                     JOIN relationship USING (relationshipid) "+
      "                     JOIN latestnondeletedarchent USING (uuid) "+
      "                     JOIN aenttype USING (aenttypeid)) child "+
      "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)"
  );
}
makeLocalId();

/******************************************************************************/
/*                            PERFORMANCE TESTING                             */
/*                                                                            */
/* Code to a) time queries; and b) create dummy records. (The vast majority   */
/* the code is for the latter.)                                               */
/******************************************************************************/
import android.database.DatabaseUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.util.concurrent.ConcurrentLinkedQueue;

ConcurrentLinkedQueue PERF_FILES             = new ConcurrentLinkedQueue();
AtomicInteger         PERF_NUM_CBS_DONE_FILE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SAVE = null;
AtomicInteger         PERF_NUM_CBS_DONE_SET  = null;
AtomicInteger         PERF_NUM_CBS_TODO_FILE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SAVE = null;
AtomicInteger         PERF_NUM_CBS_TODO_SET  = null;
boolean               PERF_ALLOW_CREATION    = false;
String                PERF_TEST_IMG          = "";
                      PERF_TYPE_TREE         = null;
int                   PERF_PHOTOS_PER_FIELD  = 1;

int getNumPhotos() {
  return getNumPhotos(PERF_TYPE_TREE);
}

int getNumPhotos(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumPhotos(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumPhotosAtNode(tree);
}

int getNumPhotosAtNode(tree) {
  // Figure out how many camera refs there are at this node (i.e. in this arch
  // ent).
  List cameraRefs = getRefsByType("camera");
  List cameraRefsAtNode = new ArrayList();
  for (String ref : cameraRefs)
    if (getArchEntType(ref).equals(tree.label))
      cameraRefsAtNode.add(ref);

  return getNumDummyRecordsAtNode(tree) *
    cameraRefsAtNode.size() *
    PERF_PHOTOS_PER_FIELD;
}

int getNumDummyRecords() {
  getNumDummyRecords(PERF_TYPE_TREE);
}

int getNumDummyRecords(tree) {
  if (tree == null) return 0;

  int childSum = 0;
  for (child : tree.getChildren())
    childSum += getNumDummyRecords(child);

  boolean isRoot = isNull(tree.label);
  if (isRoot) return childSum;
  else        return childSum + getNumDummyRecordsAtNode(tree);
}

int getNumDummyRecordsAtNode(tree) {
  int sum = 1;
  for (; tree.getParent() != null; tree = tree.getParent()) {
    sum *= tree.data;
  }
  return sum;
}

Tree(String label, Object data) {
  String label    = label;
  Object data     = data;
         parent   = null;
  List   children;

  void addChild(tree) {
    if (super.children == null)
      super.children = new ArrayList();

    tree.setParent(super);
    super.children.add(tree);
  }

  getChild(int i) {
    return super.children.get(i);
  }

  int getIndex() {
    if (super.getParent() == null)
      return -1;
    return super.getParent().getChildren().indexOf(super);
  }

  getDescendant(String ref) {
    String[] refStrArr  = ref.split("/");
    List     refIntList = new ArrayList();

    for (String refStr : refStrArr) {
      int refInt = Integer.parseInt(refStr);
      refIntList.add(refInt);
    }

    return super.getDescendant(refIntList);
  }

  getDescendant(List ref) {
    if (ref.size() == 0)
      return super;

    int  head = ref.get(0);
    List tail = ref.subList(1, ref.size());

    if (ref.size() == 1) return getChild(head);
    if (ref.size() >= 2) return getChild(head).getDescendant(tail);
  }

  String getAncestorRefString(String sep, String key) {
    String s = "";
    for (Object n = super; n.getParent() != null; n = n.getParent()) {
      String val = "";
      if (key.equals("index")) val = n.getIndex() + "";
      if (key.equals("label")) val = n.label;

      s = sep + val + s;
    }

    if (!s.equals(""))
      s = s.substring(sep.length(), s.length()); // Remove initial `sep`

    return s;
  }

  String getAncestorRefString() {
    return getAncestorRefString("/", "index");
  }

  List getChildren() {
    if (super.children == null)
      return new ArrayList();
    return super.children;
  }

  int getNumNodes() {
    int sum = 1;
    for (child : super.getChildren())
      sum += child.getNumNodes();
    return sum;
  }

  void setParent(tree) {
    super.parent = tree;
  }

  getParent() {
    return super.parent;
  }

  String toString() {
    String s = "\n- " + super.label + " (" + data + ")";
    if (super.children != null)
      for (c : super.children)
        s += c.toString().replace("\n", "\n\t\t");
    return s;
  }

  return this;
}

TimedFetchCallback(String query, FetchCallback cb, int callerIdx) {
  int           callerIdx = callerIdx;
  String        query     = query;
  FetchCallback cb        = cb;
  bsh.CallStack cs_       = this.callstack.copy();

  long startTime = System.currentTimeMillis(); // Timer starts here
  long stopTime  = -1;

  void onFetch(Object result) {
    super.stopTimer();
    super.updatePerfLog();

    if (super.cb != null)
      super.cb.onFetch(result);
  }

  void onError(String message) {
    if (super.cb != null)
      super.cb.onError(message);
  }

  void stopTimer() {
    super.stopTime = System.currentTimeMillis();
  }

  double getElapsedMillis() {
    if (stopTime < 0)
      return -Double.MAX_VALUE;
    return super.stopTime - super.startTime;
  }

  void updatePerfLog() {
    String deviceModel  = android.os.Build.MODEL;
    String sessStartMs  = SESS_START_TIME + "";
    String srcLine      = super.cs_.get(super.callerIdx).getInvocationLine()+"";
    String query        = super.query;
    String queryStartMs = super.startTime + "";
    String queryStopMs  = super.stopTime + "";

    String updateQuery = "";
    updateQuery += " INSERT INTO perflog (";
    updateQuery += "             deviceModel,";
    updateQuery += "             sessStartMs,";
    updateQuery += "             srcLine,";
    updateQuery += "             query,";
    updateQuery += "             queryStartMs,";
    updateQuery += "             queryStopMs,";
    updateQuery += "             numArchentity,";
    updateQuery += "             numAentvalue,";
    updateQuery += "             numRelationship,";
    updateQuery += "             numAentreln";
    updateQuery += " )    SELECT %s, %s, %s, %s, %s, %s, a, av, r, ar";
    updateQuery += "        FROM";
    updateQuery += "             (SELECT COUNT(*) AS a  FROM archentity  ) a,";
    updateQuery += "             (SELECT COUNT(*) AS av FROM aentvalue   ) av,";
    updateQuery += "             (SELECT COUNT(*) AS r  FROM relationship) r,";
    updateQuery += "             (SELECT COUNT(*) AS ar FROM aentreln    ) ar";

    updateQuery = dbReplaceFirst(updateQuery, deviceModel);
    updateQuery = dbReplaceFirst(updateQuery, sessStartMs);
    updateQuery = dbReplaceFirst(updateQuery, srcLine);
    updateQuery = dbReplaceFirst(updateQuery, query);
    updateQuery = dbReplaceFirst(updateQuery, queryStartMs);
    updateQuery = dbReplaceFirst(updateQuery, queryStopMs);

    fetchOne(updateQuery);
  }

  return this;
}

void timedFetchOne(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchOne(q, tcb);
}

void timedFetchAll(String q, FetchCallback cb, int callerIdx) {
  tcb = TimedFetchCallback(q, cb, callerIdx);
  fetchAll(q, tcb);
}

void timedFetchOne(String q, FetchCallback cb) {
  timedFetchOne(q, cb, 2);
}

void timedFetchAll(String q, FetchCallback cb) {
  timedFetchAll(q, cb, 2);
}

void timedFetchOne(String q) {
  timedFetchOne(q, null, 2);
}

void timedFetchAll(String q) {
  timedFetchAll(q, null, 2);
}

void timedPopulateCursorList(String ref, String q, int limit) {
  String boundQ = q;
  boundQ = dbReplaceFirst(boundQ, "?", limit + "");
  boundQ = dbReplaceFirst(boundQ, "?", "0");
  timedFetchAll(boundQ, null, 2);

  populateCursorList(ref, q, limit);
}

void setUpTypeHierarchy() {
  //- 
  //  - Site
  //    - Trench
  //      - Trench Files
  //      - Locus
  //        - Soil Munsel Color
  //        - Sediment Aggregate
  //        - FCN
  //        - Photograph Log
  //      - Stratum Feature
  //        - Photograph Log
  //      - FCN
  //      - Diary
  //      - Legacy
  //  - Legacy

  n0 = Tree("", 1);
  n1 = Tree("Site", 1);
  n2 = Tree("Trench", 1);
  n3 = Tree("Trench Files", 1);
  n4 = Tree("Locus", 1);
  n5 = Tree("Soil Munsel Color", 1);
  n6 = Tree("Sediment Aggregate", 1);
  n7 = Tree("FCN", 1);
  n8 = Tree("Photograph Log", 1);
  n9 = Tree("Stratum Feature", 1);
  n10 = Tree("Photograph Log", 1);
  n11 = Tree("FCN", 1);
  n12 = Tree("Diary", 1);
  n13 = Tree("Legacy", 1);
  n14 = Tree("Legacy", 1);

  n0.addChild(n1);
  n0.addChild(n14);

  n1.addChild(n2);

  n2.addChild(n3);
  n2.addChild(n4);
  n2.addChild(n9);
  n2.addChild(n11);
  n2.addChild(n12);
  n2.addChild(n13);

  n4.addChild(n5);
  n4.addChild(n6);
  n4.addChild(n7);
  n4.addChild(n8);

  n9.addChild(n10);


  PERF_TYPE_TREE = n0;
}

setUpTypeHierarchy();

void saveEntitiesToPCRel(
    String parentType,
    String childType,
    String parentUuid,
    String childUuid
) {
    String relName = parentType + " - " + childType;
    String pOf     = "Parent Of";
    String cOf     = "Child Of";
    saveEntitiesToHierRel(relName, parentUuid, childUuid, pOf, cOf, "");
}

String randomMenuValue(String ref) {
  List vocabIds = getVocabIdsFromRef(ref);
  int  len      = vocabIds.size();
  if (len <= 0)
    return "";

  Random r   = new Random();
  int    i   = r.nextInt(len);

  return vocabIds.get(i);
}

String getRandomString(int len) {
  char[] chars  = (
      "abcdefghijklmnopqrstuvwxyz" +
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
      "1234567890"
  ).toCharArray();
  Random random = new Random();

  StringBuilder sb = new StringBuilder();
  for (int i = 0; i < len; i++) {
      char c = chars[random.nextInt(chars.length)];
      sb.append(c);
  }

  return sb.toString();
}

String randomInputValue(String ref) {
  int len = 5;
  randomInputValue(ref, len);
}

String randomInputValue(String ref, int len) {
  if (getType(ref).equals("camera"))
    if (PERF_FILES.isEmpty()) {
      Log.e("randomInputValue()", "PERF_FILES empty, using empty string");
      return "";
    } else
      return PERF_FILES.poll();
  else
    return getRandomString(len);
}

List getAttribsForRef(String ref) {
  int numAttribs = 1;
  if (!hasData(ref))                 numAttribs = 0;
  if (hasMediaType(ref))             numAttribs = 0;
  if (getType(ref).equals("camera")) numAttribs = PERF_PHOTOS_PER_FIELD;

  List attribs = new ArrayList();
  for (int i = 0; i < numAttribs; i++) {
    String attribName = getAttributeName(ref);
    String annotation = "";
    String vocab      = "";
    String measure    = "";
    String certainty  = "1.0";

    if (hasMenuType(ref)) vocab   = randomMenuValue (ref);
    else                  measure = randomInputValue(ref);

    EntityAttribute ea = createEntityAttribute(
        attribName,
        annotation,
        vocab,
        measure,
        certainty
    );
    attribs.add(ea);
  }

  return attribs;
}

List getAttribsForArchEnt(String archEntType) {
  List attribs = new ArrayList();
  for (String ref : getRefs())
    if (getArchEntType(ref).equals(archEntType))
      attribs.addAll(getAttribsForRef(ref));

  return attribs;
}

void displayRecordDigest(int numCreated) {
  String q = "";
  q += "   SELECT '{All}', count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "    UNION";
  q += "   SELECT aenttypename, count(*)";
  q += "     FROM latestnondeletedarchent";
  q += "     JOIN aenttype USING (aenttypeid)";
  q += " GROUP BY aenttypename";

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      String head = "{perf_digest_1_head}";
      String body = "";
      if (numCreated >= 0)
        body += numCreated + " {perf_digest_1_body_1}";
      body += " {perf_digest_1_body_2}";

      if (result == null)
        result = new ArrayList();
      for (List row : result) {
        String type = row.get(0);
        String num  = row.get(1);

        body += "\t- " + type + ": " + num + "\n";
      }

      if (dialog != null)
        dialog.dismiss();
      showWarning(head, body);
    }
  };

  fetchAll(q, cb);
}

void displayRecordDigest() {
  displayRecordDigest(-1);
}

PerfSaveCallback(tree, String parentUuid) {
  tree              = tree;
  String parentUuid = parentUuid;

  saveRel(uuid) {
    parent            = super.tree.getParent();
    String parentUuid = super.parentUuid;

    if (parent == null || parentUuid == null)
      return;

    String parentType = parent    .label;
    String childType  = super.tree.label;

    saveEntitiesToPCRel(parentType, childType, parentUuid, uuid);
  }

  void onSave(String uuid, boolean newRecord) {
    int cbsDone = PERF_NUM_CBS_DONE_SAVE.incrementAndGet();
    int cbsTodo = PERF_NUM_CBS_TODO_SAVE.get();
    if (cbsTodo == cbsDone)
      displayRecordDigest(cbsDone);

    if (newRecord)
      super.saveRel(uuid);

    for (subtree : super.tree.getChildren())
      saveArchEnts(subtree, uuid);
  }

  void onError(String message) {
    if (dialog != null)
      dialog.dismiss();
    showWarning("Error", message);
  }

  return this;
}

void saveArchEnts(tree, String parentUuid) {
  String archEntName = tree.label;
  int    numEnts     = tree.data;
  cb                 = PerfSaveCallback(tree, parentUuid);

  for (int i = 0; i < numEnts; i++) {
    List attribs = getAttribsForArchEnt(archEntName);
    saveArchEnt(null, archEntName, (List) null, attribs, cb);
  }
}

void createDummyRecords() {
  int  n = getNumDummyRecords();
  dialog = showBusy("{perf_dummy_busy_head}", n + " {perf_dummy_busy_body}");

  enqueueTestFiles("createDummyRecordsRecursively()");
}

void createDummyRecordsRecursively() {
  int n = getNumDummyRecords();
  PERF_NUM_CBS_TODO_SAVE = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SAVE = new AtomicInteger(0);

  for (child : PERF_TYPE_TREE.getChildren())
    saveArchEnts(child, null);
}

void enqueueTestFiles(String cb) {
  enqueueTestFiles(getNumDummyRecords(), cb);
}

void enqueueTestFiles(int numFiles, String cb) {
  if (isNull(PERF_TEST_IMG)) {
    String head; String body;
    head  = "Could Not Enqueue Test Files";
    body  = "The master file from which test files are enqueued could not be ";
    body += "found on disk.";
    showWarning(head, body);
    return;
  }

  // Set `PERF_NUM_CBS_TODO_FILE` and `PERF_NUM_CBS_DONE_FILE`
  int numPhotosToMake;
  numPhotosToMake  = getNumPhotos();
  numPhotosToMake -= PERF_FILES.size();
  numPhotosToMake  = Math.max(0, numPhotosToMake);
  // We're going to count returns from attachFile too, hence multiplication by 2
  PERF_NUM_CBS_TODO_FILE = new AtomicInteger(2*numPhotosToMake);
  PERF_NUM_CBS_DONE_FILE = new AtomicInteger(0);

  // Make records
  for (int i = 0; i < numPhotosToMake; i++) {
    String fileName = attachFile(
        PERF_TEST_IMG,
        false,
        null,
        fun2str("checkEnqueueTestFilesIsDone", cb)
    );

    PERF_FILES.add(fileName);
    checkEnqueueTestFilesIsDone(cb);
  }
}

void checkEnqueueTestFilesIsDone(String onDone) {
  int cbsDone = PERF_NUM_CBS_DONE_FILE.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_FILE.get();
  if (cbsTodo == cbsDone)
    execute(onDone);
}

PerfImageDownloader() {
  void run() {
    if (isInUnitTestTime())
      return;

    String filStr = "/sdcard/faims/modules/" + getModuleId() +
        "/files/app/test.jpg";
    String urlStr = "https://raw.githubusercontent.com/FAIMS/FAIMS-Tools/" +
        "autogen-py/test-images/construction-2894x1924.jpg";

    if (detectFile(filStr))
      return;

    try {
      URL           urlObj = new URL(urlStr);
      URLConnection urlCon = urlObj.openConnection();

      new File(filStr).getParentFile().mkdirs();

      InputStream      is  = urlCon.getInputStream();
      FileOutputStream fos = new FileOutputStream(filStr);

      byte[] buffer = new byte[4096];
      int len;

      // While we have availble data, continue downloading and storing to local
      // file
      while ((len = is.read(buffer)) > 0)
        fos.write(buffer, 0, len);

      if (is  != null) is .close();
      if (fos != null) fos.close();
    } catch (Exception e) {
      Log.e("PerfImageDownloader.run()", e.getMessage());
    }

    // Set `PERF_TEST_IMG` if the file was created successfully
    detectFile(filStr);
  }

  void start() {
    Runnable r = PerfImageDownloader();
    new Thread(r).start();
  }

  boolean detectFile(String filStr) {
    File newImg = new File(filStr);
    if (newImg.length() > 0) {
      PERF_TEST_IMG = filStr;
      return true;
    }
    return false;
  }

  return this;
}

void verifyEnableRecordCreation() {
  String q = "";
  q += " SELECT userid, fname, lname, email, password";
  q += "   FROM user";
  q += "  WHERE fname = 'Faims'";
  q += "    AND lname = 'Admin'";

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      String userId    = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);

      showVerifyUserDialog("enableRecordCreation()");
    }
  };

  fetchOne(q, callback);
}

void enableRecordCreation() {
  PERF_ALLOW_CREATION = true;
  setUpPerfActionBarItems();

  showWarning("{perf_create_on_head}", "{perf_create_on_body}");
}

boolean isInPerfTestTime() {
  return false;
}

// Produce entity number specification
void setUpDummyRecordCreation() {
  int n = PERF_TYPE_TREE.getNumNodes()
      - 1; // Ignore root node

  PERF_NUM_CBS_TODO_SET = new AtomicInteger(n);
  PERF_NUM_CBS_DONE_SET = new AtomicInteger(0);

  setUpDummyRecordCreation(PERF_TYPE_TREE, "");
}

String getBreadCrumbs(node) {
  return node.getAncestorRefString(" › ", "label");
}

String typeToReadableType(String type) {
  if (type.equals("")) return "{this_module}";
  else                 return "{each} " + type;
}

void setUpDummyRecordCreation(tree, String parentType) {
  String type = tree.label;

  for (child : tree.getChildren())
    setUpDummyRecordCreation(child, type);

  if (!type.equals("")) {
    // Make head and body for `showTextAlert`
    String treeRef = tree.getAncestorRefString();
    String head    = getBreadCrumbs(tree);
    String body    = "{perf_rec_num_body_1} %s {perf_rec_num_body_2} %s " +
                     "{perf_rec_num_body_3}";
    body = replaceFirst(body, type);
    body = replaceFirst(body, typeToReadableType(parentType));

    promptSetDummyRecordQuantity(treeRef, head, body);
  }
}

void promptSetDummyRecordQuantity(String treeRef, String head, String body) {
  String cb = "setDummyRecordQuantity(\"%s\", \"%s\", \"%s\")";
  cb = replaceFirst(cb, treeRef);
  cb = replaceFirst(cb, head);
  cb = replaceFirst(cb, escape(body));

  showTextAlert(head, body, cb, "checkSetDummyRecordQuantityIsDone()");
}

void setDummyRecordQuantity(
    String treeRef,
    String failHead,
    String failBody
) {
  // Parse data as int
  int intData;
  try {
    intData = Integer.parseInt(getLastTextAlertInput());
  } catch (Exception e) {
    promptSetDummyRecordQuantity(treeRef, failHead, failBody);
    return;
  }

  PERF_TYPE_TREE.getDescendant(treeRef).data = intData;
  checkSetDummyRecordQuantityIsDone();
}

void checkSetDummyRecordQuantityIsDone() {
  int cbsDone = PERF_NUM_CBS_DONE_SET.incrementAndGet();
  int cbsTodo = PERF_NUM_CBS_TODO_SET.get();
  if (cbsTodo == cbsDone) {
    String totalRecs = getNumDummyRecords() + "";
    String treeString = PERF_TYPE_TREE.toString();
    String treeStringNoRoot = treeString.substring(
        "\n-  (1)".length(),
        treeString.length()
    );

    String head = "{perf_update_head}";
    String body =
         "{perf_update_body_1} " + treeStringNoRoot +
        " {perf_update_body_2} " + totalRecs +
        " {perf_update_body_3}";

    showAlert(head, body, "createDummyRecords()", "");
  }
}

void verifyCreateDummyRecords() {
  // Unless syncing is disabled, 'database locked' errors will happen
  setFileSyncEnabled(false);
  setSyncEnabled    (false);

  if (isSyncEnabled()) {
    showWarning("{perf_dummy_err_head}", "{perf_dummy_err_body}");
    return;
  }

  showAlert(
      "{perf_wiz_head}",
      "{perf_wiz_body}",
      "setUpDummyRecordCreation()",
      ""
  );
}

void setUpPerfActionBarItems() {
  removeActionBarItem("create_dummy_records");
  removeActionBarItem("display_record_digest");
  removeActionBarItem("enable_record_creation");

  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);
  if (!isDisplayed(userMenuTabGroup)) {
    PERF_ALLOW_CREATION = false;
    return;
  }
  if (!isInPerfTestTime())
    return;

  ActionButtonCallback createDummyRecords = new ActionButtonCallback() {
      actionOnLabel() {
        "{create_dummy_records}";
      }
      actionOn() {
        verifyCreateDummyRecords();
      }
  };

  ActionButtonCallback displayRecordDigest = new ActionButtonCallback() {
      actionOnLabel() {
        "{display_record_digest}";
      }
      actionOn() {
        displayRecordDigest();
      }
  };

  ActionButtonCallback enableRecordCreation = new ActionButtonCallback() {
      actionOnLabel() {
        "{enable_record_creation}";
      }
      actionOn() {
        verifyEnableRecordCreation();
      }
  };

  // Careful! The `if` statements are weirdly formatted
  addActionBarItem("display_record_digest",  displayRecordDigest);
  if (PERF_ALLOW_CREATION)
  addActionBarItem("create_dummy_records",   createDummyRecords);
  if (!PERF_ALLOW_CREATION)
  addActionBarItem("enable_record_creation", enableRecordCreation);
}

void setUpPerfTestMode() {
  if (!isInPerfTestTime())
    return;

  // Download test image
  PerfImageDownloader().start();

  // Display performance testing notification
  showWarning("{perf_mode_head}", "{perf_mode_body}");
}

if (!isNull(USER_MENU_PATH)) {
  String userMenuTabGroup = getTabGroupRef(USER_MENU_PATH);

  setUpPerfTestMode();
  addOnEvent(userMenuTabGroup, "show",  "setUpPerfActionBarItems()");
  addOnEvent(userMenuTabGroup, "leave", "setUpPerfActionBarItems()");
}

/******************************************************************************/
/*                           LOCALSETTINGS UPDATES                            */
/******************************************************************************/
void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val) {
  if (val == null) val = "";

  String q = "REPLACE INTO localSettings(key, value) VALUES(%s, %s)";
  q = dbReplaceFirst(q, key);
  q = dbReplaceFirst(q, val);
  fetchOne(q);
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite,
    String defaultVal
) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = %s";
  q = dbReplaceFirst(q, key);

  FetchCallback set = new FetchCallback() {
    onFetch(result) {
      if (result != null && result.size() >= 1) {
        setFieldValue(ref, result.get(0));
      } else if (defaultVal != null) {
        setFieldValue(ref, defaultVal);
      }
    }
  };

  fetchOne(q, set);
}

void setFieldValueFromLocalSettings(
    String  key,
    String  ref,
    boolean doOverwrite
) {
  setFieldValueFromLocalSettings(key, ref, doOverwrite, null);
}

void setFieldValueFromLocalSettings(
    String  ref,
    boolean doOverwrite,
    String  defaultVal
) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite, defaultVal);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String key, String ref) {
  setFieldValueFromLocalSettings(key, ref, false);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnShow(
    String ref,
    boolean doOverwrite,
    String defaultVal
) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite, defaultVal}
  );

  addOnEvent(getTabGroupRef(ref), "show", cb);
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, (String) null);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref, boolean doOverwrite, String defaultVal) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite, defaultVal);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, String defaultVal) {
  persistOverSessions(ref, false, defaultVal);
}

void persistOverSessions(String ref) {
  persistOverSessions(ref, false, (String) null);
}

persistOverSessions("User/User_List/Device_Code", false);
persistOverSessions("Relationship/Relationships/Relationship_Type", true);

/******************************************************************************/
/*                           FIELD COPYING HELPERS                            */
/*                                                                            */
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;

  setFieldValue(ref, vocabId);
  return isSelected(ref, vocabName);
}

boolean copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  return copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
boolean copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  String vocabIdSrc   = getFieldValue(src);
  String vocabNameSrc = getFieldValue(src, true);

  String attrNameSrc = getAttributeName(src);
  String attrNameDst = getAttributeName(dst);

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return true;
  }

  if (setMenuValue(dst, vocabNameSrc))
    return true;

  // Fall back to dumb field copying
  copyFieldValue(src, dst, false);
  return false;
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

/* Copies the value from the field at `src` to the field at `dst` whenever the
 * a new record containing `dst` is created.
 *
 * `doCheckParent` If this is true, the value is only copied when the parent tab
 *                 group of the tab group referred to by `dst` is equal to the
 *                 tab group referred to by `src`. This is a way of checking
 *                 whether the field referred to by `src` has been loaded.
 * `doFindVocabId` Same as the `doFindVocabId` argument for the `copyFieldValue`
 *                 function.
 */
void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, true);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}

inheritFieldValue("Control/Site/New_Site_Name", "Site/Site/Site_Site_Name", true);
inheritFieldValue("Control/Site/Year_of_Campaign", "Site/Site/Site_Year_of_Campaign", true);
inheritFieldValue("User/User_List/Device_Code", "Site/Vars/Device_Code", false);
inheritFieldValue("Site/Site/Site_Site_Name", "Trench/Trench/Trench_Site_Name", true);
inheritFieldValue("Site/Site/Trench_ID", "Trench/Trench/Trench_Trench_ID", true);
inheritFieldValue("Site/Site/Site_Year_of_Campaign", "Trench/Vars/Trench_Year_of_Campaign", true);
inheritFieldValue("User/User_List/Device_Code", "Trench/Vars/Device_Code", false);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Trench_Files/Add_Trench_Files/Trench_Files_Site_Name", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Trench_Files/Add_Trench_Files/Trench_Files_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_Trench_ID", "Trench_Files/Add_Trench_Files/Trench_Files_Trench_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Trench_Files/Vars/Device_Code", false);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Locus/General/Locus_Site_Name", true);
inheritFieldValue("Trench/Trench/Trench_Trench_ID", "Locus/General/Locus_Trench_ID", true);
inheritFieldValue("Trench/Trench/Team_Members", "Locus/General/Team_Members", true);
inheritFieldValue("User/User_List/Device_Code", "Locus/Vars/Device_Code", false);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Locus/Vars/Locus_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_Trench_ID", "Stratum_Feature/General/Stratum_Feature_Trench_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Stratum_Feature/Vars/Device_Code", false);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Stratum_Feature/Vars/Stratum_Feature_Site_Name", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Stratum_Feature/Vars/Stratum_Feature_Year_of_Campaign", true);
inheritFieldValue("Locus/General/Locus_Locus_ID", "Sediment_Aggregate/Vars/Locus_ID", true);
inheritFieldValue("Locus/General/Locus_Trench_ID", "Sediment_Aggregate/Vars/Trench_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Sediment_Aggregate/Vars/Device_Code", false);
inheritFieldValue("Locus/General/Locus_Locus_ID", "Photograph_Log/Photograph_Log/Photo_Locus_ID", true);
inheritFieldValue("Stratum_Feature/General/Stratum_Feature_ID", "Photograph_Log/Photograph_Log/Photo_Stratum_Feature_ID", true);
inheritFieldValue("Locus/General/Locus_Site_Name", "Photograph_Log/Vars/Photograph_Log_Site_Name", true);
inheritFieldValue("Stratum_Feature/Vars/Stratum_Feature_Site_Name", "Photograph_Log/Vars/Photograph_Log_Site_Name", true);
inheritFieldValue("Locus/Vars/Locus_Year_of_Campaign", "Photograph_Log/Vars/Photograph_Log_Year_of_Campaign", true);
inheritFieldValue("Stratum_Feature/Vars/Stratum_Feature_Year_of_Campaign", "Photograph_Log/Vars/Photograph_Log_Year_of_Campaign", true);
inheritFieldValue("Locus/General/Locus_Trench_ID", "Photograph_Log/Vars/Photograph_Trench_ID", true);
inheritFieldValue("Stratum_Feature/General/Stratum_Feature_Trench_ID", "Photograph_Log/Vars/Photograph_Trench_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Photograph_Log/Vars/Device_Code", false);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Diary/Vars/Diary_Site_Name", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Diary/Vars/Diary_Year_of_Campaign", true);
inheritFieldValue("Trench/Trench/Trench_Trench_ID", "Diary/Vars/Diary_Trench_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Diary/Vars/Device_Code", false);
inheritFieldValue("Locus/General/Locus_Site_Name", "Relationship/Vars/Relationship_Site_Name", false);
inheritFieldValue("Locus/Vars/Locus_Year_of_Campaign", "Relationship/Vars/Relationship_Year_of_Campaign", false);
inheritFieldValue("Stratum_Feature/Vars/Stratum_Feature_Site_Name", "Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Site_Name", false);
inheritFieldValue("Stratum_Feature/Vars/Stratum_Feature_Year_of_Campaign", "Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Year_of_Campaign", false);
inheritFieldValue("Locus/General/Locus_Site_Name", "FCN/General/FCN_Site_Name", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "FCN/General/FCN_Site_Name", true);
inheritFieldValue("Locus/General/Locus_Trench_ID", "FCN/General/FCN_Trench_ID", true);
inheritFieldValue("Trench/Trench/Trench_Trench_ID", "FCN/General/FCN_Trench_ID", true);
inheritFieldValue("Locus/General/Locus_Locus_ID", "FCN/General/Locus_ID", true);
inheritFieldValue("Locus/Vars/Locus_Year_of_Campaign", "FCN/Vars/FCN_Year_of_Campaign", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "FCN/Vars/FCN_Year_of_Campaign", true);
inheritFieldValue("User/User_List/Device_Code", "FCN/Vars/Device_Code", false);
inheritFieldValue("Locus/General/Locus_Locus_ID", "Soil_Munsel_Color/Vars/Soil_Munsel_Color_Locus_ID", true);
inheritFieldValue("User/User_List/Device_Code", "Soil_Munsel_Color/Vars/Device_Code", false);
inheritFieldValue("Relationship/Vars/Relationship_Site_Name", "Legacy/Legacy/Legacy_Site_Name", true);
inheritFieldValue("Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Site_Name", "Legacy/Legacy/Legacy_Site_Name", true);
inheritFieldValue("Trench/Trench/Trench_Site_Name", "Legacy/Legacy/Legacy_Site_Name", true);
inheritFieldValue("Relationship/Vars/Relationship_Year_of_Campaign", "Legacy/Legacy/Legacy_Year_of_Campaign", true);
inheritFieldValue("Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Year_of_Campaign", "Legacy/Legacy/Legacy_Year_of_Campaign", true);
inheritFieldValue("Trench/Vars/Trench_Year_of_Campaign", "Legacy/Legacy/Legacy_Year_of_Campaign", true);
inheritFieldValue("User/User_List/Device_Code", "Legacy/Var/Device_Code", false);

/******************************************************************************/
/*                            NEW TAB REDIRECTION                             */
/*                                                                            */
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/

void newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  String tabGroupRef = getTabGroupRef(tab);
  String tabRef      = getTabRef     (tab);

  if (!isDisplayed(tabGroupRef)) newTabGroup(tabGroupRef);
  if (!isNull     (tabRef     )) newTab     (tabRef);
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

for (entry : REF_TO_TYPE.entrySet()) {
  String type = entry.getValue();
  String ref  = entry.getKey();
  String evt  = "click";
  String stmt = "DROPDOWN_ITEM_VALUE = getFieldValue(\"%s\")";
  stmt = replaceFirst(stmt, ref);

  if (!type.equals("dropdown"))
    continue;
  if (hasNoUi(ref))
    continue;

  addOnEvent(ref, evt, stmt);
}

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Wrapper for to make a vocab without an exlusion list **/
String getMakeVocabType(String ref) {
  if (isHier(ref)) return "hierarchical" + getType(ref);
  else             return ""             + getType(ref);
}

void makeVocabs() {
  for (String ref : DATA_REFS)
    if (!hasNoUi(ref))
      makeVocab(ref);
  for (String ref : VP_REF_TO_REF.keySet())
    if (!hasNoUi(ref))
      makeVocab(ref);
}

void makeVocab(String ref) {
  if (!hasMenuType(ref))
    return;

  if (hasVpRef(ref))
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(getVpRef(ref)));
  else
    makeVocab(getMakeVocabType(ref), ref, getAttributeName(ref));
}

void makeVocab(String type, String ref, String attrName) {
  makeVocab(type, ref, attrName, null);
}
void makeVocab(String type, String ref, String attrName, List vocabExclusions) {
    makeVocab(type, ref, attrName, vocabExclusions, null);
}

/* Populates the ref specified vocabulary from the database based on the given
 * attribute name, where type is the type of the vocab to populate (checkbox,
 * dropdown, hierarchicaldropdown, hierarchicalpicture, list, picture, radio).
 * */
void makeVocab(
    String type,
    String ref,
    String attrName,
    List   vocabExclusions,
    String callbackFunction
){
  if (
      isNull(type) ||
      isNull(ref) ||
      isNull(attrName)
  ) {
    Log.e(
        "makeVocab()",
        "Can't make populate vocab whose type, ref or attribute is null"
    );
    return;
  }

  if (!isModuleLoaded()) {
    String head = "Logic Error";
    String body = "makeVocab called before module loaded";
    showWarning(head, body);
    return;
  }

  // Make a filtered vocab
  List menuEntries = getMenuEntries(attrName);
  if (vocabExclusions == null) vocabExclusions = new ArrayList();

  List filteredVocab = new ArrayList();
  for(item : menuEntries) {
    if (vocabExclusions.contains(item.get(1))) {
      Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
    } else {
      filteredVocab.add(item);
    }
  }

  // Determine whether to include a null option in the menu
  Boolean hasNull =
         !vocabExclusions.contains("")
      && !vocabExclusions.contains(null);

  // Populate menu
  switch(type) {
    case "checkbox":
    case "CheckBoxGroup":
      populateCheckBoxGroup             (ref, filteredVocab);          break;
    case "dropdown":
    case "DropDown":
      populateDropDown                  (ref, filteredVocab, hasNull); break;
    case "hierarchicaldropdown":
    case "HierarchicalDropDown":
      populateHierarchicalDropDown      (ref, attrName, hasNull);      break;
    case "hierarchicalpicture":
    case "HierarchicalPictureGallery":
      populateHierarchicalPictureGallery(ref, attrName);               break;
    case "List":
    case "list":
      populateList                      (ref, filteredVocab);          break;
    case "picture":
    case "PictureGallery":
      populatePictureGallery            (ref, filteredVocab);          break;
    case "radio":
    case "RadioGroup":
      populateRadioGroup                (ref, filteredVocab);          break;
    default:
      Log.e(
          "makeVocab()",
          "Can't make populate vocab; type not recognised"
      );
  }

  // Execute callback
  if (!isNull(callbackFunction))
    execute(callbackFunction);
}

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME        = new HashMap();
Map VOCABNAME_TO_VOCABID        = new HashMap();
Map ATTRIB_NAME_TO_VOCABIDS     = new HashMap();
Map ATTRIB_NAME_TO_MENU_ENTRIES = new HashMap();

void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

void addMenuEntry(
    String attrName,
    String vocabId,
    String vocabName,
    String picUrl
) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) {
    menuEntries = new ArrayList();
    ATTRIB_NAME_TO_MENU_ENTRIES.put(attrName, menuEntries);
  }

  List menuEntry = new ArrayList();
  menuEntry.add(vocabId);
  menuEntry.add(vocabName);
  menuEntry.add(picUrl);

  menuEntries.add(menuEntry);
}

List getMenuEntries(String attrName) {
  List menuEntries = ATTRIB_NAME_TO_MENU_ENTRIES.get(attrName);
  if (menuEntries == null) return new ArrayList();
  else                     return menuEntries;
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return vocabIds;
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  String q = "";
  q += "   SELECT vocabid, vocabname, attributename, pictureurl";
  q += "     FROM vocabulary";
  q += "     JOIN attributekey USING (attributeid)";
  q += " ORDER BY vocabcountorder";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(List result) {
      if (result == null)
        result = new ArrayList();

      for (List row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);
        String picUrl    = row.get(3);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);

        // Populate ATTRIB_NAME_TO_MENU_ENTRIES
        addMenuEntry(attrName, vocabId, vocabName, picUrl);
      }

      decAndExecIfModuleLoaded();
    }
  };

  incJobsTillLoaded();
  fetchAll(q, populateHashMap);
}

addOnEvent("module", "load", "makeVocabs()");
fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/
addOnEvent("Control/Site/GPS_Diagnostics", "show", "updateGPSDiagnostics()");

void updateGPSDiagnostics() {
  String diagnosticsRef = "Control/Site/GPS_Diagnostics";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
void populateListForUsers(){
  String q = "";
  q  = " SELECT          userid ";
  q += "        ||'\\0'||fname ";
  q += "        ||'\\0'||lname ";
  q += "        ||'\\0'||email ";
  q += "        ||'\\0'||password ";
  q += "        ,        fname ";
  q += "        || ' ' ||lname ";
  q += "   FROM user ";
  q += "  WHERE userdeleted is null";

  fetchAll(q, new FetchCallback() {
    onFetch(result) {
      populateDropDown(USER_MENU_PATH, result, true);
    }
  });
}

String getUserMenuValue(int i) {
  String selectedUser = getFieldValue(USER_MENU_PATH);
  if (selectedUser == null)
    return "";

  String[] splitted = selectedUser.split("\\\\0");
  if (i < splitted.length) return splitted[i];
  else                     return "";

}

void resetUser() {
  userId   = "";
  username = "";
  User user = new User(userId, "", "", "", "");
  setUser(user);
}

void selectUser() {
  userId           = getUserMenuValue(0);
  String nameFirst = getUserMenuValue(1);
  String nameLast  = getUserMenuValue(2);
  String email     = getUserMenuValue(3);
  String password  = getUserMenuValue(4);
  username         = nameFirst + " " + nameLast;

  User user = new User(userId, nameFirst, nameLast, email, password);
  setUser(user);
}

void onClickSignup__ () {
  setSyncEnabled(true);
  showCreateUserDialog("onSignupSuccessful()");
}

void onSignupSuccessful() {
  showWarning("{signup_head}", "{signup_body}");
  populateListForUsers();
}

if (!isNull(USER_MENU_PATH)) {
  addOnEvent(getTabGroupRef(USER_MENU_PATH), "show", "resetUser()");

  addOnEvent(USER_MENU_PATH, "show",  "populateListForUsers()");
  addOnEvent(USER_MENU_PATH, "click", "selectUser()");
}



/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/ref to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

void validateControl() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Control/Site/New_Site_Name", "{New_Site_Name}"));
  f.add(fieldPair("Control/Site/Year_of_Campaign", "{Year_of_Campaign}"));
  f.add(fieldPair("Control/Next_IDs/Next_Stratum_Feature_ID", "{Stratum_Feature_ID}"));
  f.add(fieldPair("Control/Next_IDs/Next_FCN_ID", "{Next_FCN_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateSite() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Site/Site/Trench_ID", "{Trench_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateTrench() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Trench/Trench/Excavation_Method", "{Excavation_Method}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateLocus() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Locus/General/Locus_Site_Name", "{Site_Name}"));
  f.add(fieldPair("Locus/General/Locus_Locus_ID", "{Locus_ID}"));
  f.add(fieldPair("Locus/General/Excavation_Method", "{Excavation_Method}"));
  f.add(fieldPair("Locus/Measure/Absolute_Height_Top_m", "{Absolute_Height_Top__m_}"));
  f.add(fieldPair("Locus/Measure/Absolute_Height_Bottom_m", "{Absolute_Height_Bottom__m_}"));
  f.add(fieldPair("Locus/Measure/Measure_Length", "{Length__m_}"));
  f.add(fieldPair("Locus/Measure/Measure_Width", "{Width__m_}"));
  f.add(fieldPair("Locus/Measure/Measure_Depth", "{Depth__m_}"));
  f.add(fieldPair("Locus/Measure/Volume_Liters", "{Volume__liters_}"));
  f.add(fieldPair("Locus/Cut/Cut_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Locus/Cut/Shape_in_Plan", "{Shape_in_Plan}"));
  f.add(fieldPair("Locus/Cut/Shape_of_Corners", "{Shape_of_Corners}"));
  f.add(fieldPair("Locus/Cut/Break_of_Slope_-_Top", "{Break_of_Slope___Top}"));
  f.add(fieldPair("Locus/Cut/Break_of_Slope_-_Base", "{Break_of_Slope___Base}"));
  f.add(fieldPair("Locus/Cut/Sides_of_Cut", "{Sides_of_Cut}"));
  f.add(fieldPair("Locus/Cut/Shape_of_Base", "{Shape_of_Base}"));
  f.add(fieldPair("Locus/Cut/Orientation", "{Orientation}"));
  f.add(fieldPair("Locus/Cut/Orientation_Degree", "{Orientation_Degree}"));
  f.add(fieldPair("Locus/Cut/Inclination_of_axis", "{Inclination_of_axis}"));
  f.add(fieldPair("Locus/Deposit/Deposit_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Locus/Deposit/Texture", "{Texture}"));
  f.add(fieldPair("Locus/Deposit/Material", "{Material}"));
  f.add(fieldPair("Locus/Deposit/Composition_Type", "{Deposit_Structure}"));
  f.add(fieldPair("Locus/Deposit/Deposit_Bedding", "{Bedding}"));
  f.add(fieldPair("Locus/Deposit/Deposit_Inclusions", "{Deposit_Inclusions}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Head", "{Head}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Body", "{Body}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Left_Arm", "{Left_Arm_and_Hand_Location}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Right_Arm", "{Right_Arm_and_Hand_Location}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Left_Leg", "{Left_Leg_and_Foot_Location}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Right_Leg", "{Right_Leg_and_Foot_Location}"));
  f.add(fieldPair("Locus/Skeleton/Skeleton_Condition", "{Condition}"));
  f.add(fieldPair("Locus/Skeleton/Target_A_X", "{Target_A_X}"));
  f.add(fieldPair("Locus/Skeleton/Target_A_Y", "{Target_A_Y}"));
  f.add(fieldPair("Locus/Skeleton/Target_A_Z", "{Target_A_Z}"));
  f.add(fieldPair("Locus/Int/Your_description", "{Your_Description}"));
  f.add(fieldPair("Locus/Int/Your_Discussion", "{Your_Discussion}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateStratumFeature() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Stratum_Feature/General/Record_Type", "{Record_Type}"));
  f.add(fieldPair("Stratum_Feature/General/Feature_Prefix", "{Feature_Prefix}"));
  f.add(fieldPair("Stratum_Feature/General/Stratum_Feature_ID", "{Stratum_Feature_ID}"));
  f.add(fieldPair("Stratum_Feature/General/Description", "{Description}"));
  f.add(fieldPair("Stratum_Feature/General/Interpretation", "{Interpretation}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateRelationship() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Relationship/Relationships/Trench_ID", "{Trench_ID}"));
  f.add(fieldPair("Relationship/Relationships/Locus_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateStratumFeatureRelationship() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Stratum_Feature_Relationship/Relationships/Trench_ID", "{Trench_ID}"));
  f.add(fieldPair("Stratum_Feature_Relationship/Relationships/Locus_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateFCN() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("FCN/General/FCN_ID", "{FCN_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateLegacy() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Legacy/Legacy/Legacy_Year_of_Campaign", "{Year_of_Campaign}"));
  f.add(fieldPair("Legacy/Legacy/Legacy_Trench_ID", "{Trench_ID}"));
  f.add(fieldPair("Legacy/Legacy/Legacy_Locus_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}


/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

String getUuid(String tabgroup) {
  return tabgroupToUuid.get(tabgroup);
}

void setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  List    geometry            = null;
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  callback += "; " + fun2str("executeOnEvent", new Object[]{tabgroup, "save"});

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, callback);
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  String left; String right;

  left    = dateStr.substring(0, dateStr.length() - 2);
  right   = dateStr.substring(   dateStr.length() - 2);
  dateStr = left + ":" + right;

  return dateStr;
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Trench", "Trench/Trench/Trench_author");
  tabgroupToAuthor.put("Trench_Files", "Trench_Files/Add_Trench_Files/Trench_Files_author");
  tabgroupToAuthor.put("Locus", "Locus/General/Locus_author");
  tabgroupToAuthor.put("Stratum_Feature", "Stratum_Feature/General/Stratum_Feature_author");
  tabgroupToAuthor.put("Diary", "Diary/Diary/Diary_author");
  tabgroupToTimestamp.put("Trench", "Trench/Trench/Trench_timestamp");
  tabgroupToTimestamp.put("Locus", "Locus/General/Locus_timestamp");
  tabgroupToTimestamp.put("Stratum_Feature", "Stratum_Feature/General/Stratum_Feature_timestamp");
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  if (!isNull(authorPath))    setFieldValue(authorPath,    username);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, getTimestampNow());
}

void onShowSite () {
  saveTabGroup("Site");
}

void onShowTrench () {
  saveTabGroup("Trench");
}

void onShowTrenchFiles () {
  saveTabGroup("Trench_Files");
}

void onShowLocus () {
  saveTabGroup("Locus");
}

void onShowStratumFeature () {
  saveTabGroup("Stratum_Feature");
}

void onShowSedimentAggregate () {
  saveTabGroup("Sediment_Aggregate");
}

void onShowPhotographLog () {
  saveTabGroup("Photograph_Log");
}

void onShowDiary () {
  saveTabGroup("Diary");
}

void onShowFCN () {
  saveTabGroup("FCN");
}

void onShowSoilMunselColor () {
  saveTabGroup("Soil_Munsel_Color");
}

void onShowLegacy () {
  saveTabGroup("Legacy");
}

addOnEvent("Site", "show", "onShowSite()");
addOnEvent("Trench", "show", "onShowTrench()");
addOnEvent("Trench_Files", "show", "onShowTrenchFiles()");
addOnEvent("Locus", "show", "onShowLocus()");
addOnEvent("Stratum_Feature", "show", "onShowStratumFeature()");
addOnEvent("Sediment_Aggregate", "show", "onShowSedimentAggregate()");
addOnEvent("Photograph_Log", "show", "onShowPhotographLog()");
addOnEvent("Diary", "show", "onShowDiary()");
addOnEvent("FCN", "show", "onShowFCN()");
addOnEvent("Soil_Munsel_Color", "show", "onShowSoilMunselColor()");
addOnEvent("Legacy", "show", "onShowLegacy()");

void onClickUserLogin () {
  newTab("Control", true);
}

void onClickUserModuleGuide () {
  newTab("User/Help", true);
}

void onClickTrenchSetDateClosed () {
  newTab("Date_Closed", true);
}

void onClickLocusMaterialHelper () {
  newTab("Locus/Material_Helper", true);
}

void onClickLocusCreateRelationshipstoThisLocus () {
  newTab("Relationship", true);
}

void onClickStratumFeatureCreateRelationshipstoThisStratumFeature () {
  newTab("Stratum_Feature_Relationship", true);
}

void onClickControlCreateNewSite () {
  parentTabgroup__ = "Control";
  newSite();
}

void onClickRelationshipCreateNewLegacy () {
  parentTabgroup__ = "Relationship";
  newLegacy();
}

void onClickStratumFeatureRelationshipCreateNewLegacy () {
  parentTabgroup__ = "Stratum_Feature_Relationship";
  newLegacy();
}







void onClickSiteCreateNewTrench () {
  newTrench("Site");
}

void onClickTrenchAddTrenchFiles () {
  newTrenchFiles("Trench");
}

void onClickTrenchCreateNewLocus () {
  newLocus("Trench");
}

void onClickTrenchCreateNewStratumFeature () {
  newStratumFeature("Trench");
}

void onClickTrenchCreateNewFCN () {
  newFCN("Trench");
}

void onClickTrenchCreateNewDiary () {
  newDiary("Trench");
}

void onClickTrenchCreateNewLegacy () {
  newLegacy("Trench");
}

void onClickLocusAddMunselColor () {
  newSoilMunselColor("Locus");
}

void onClickLocusAddNewSedimentAggregate () {
  newSedimentAggregate("Locus");
}

void onClickLocusAddFCN () {
  newFCN("Locus");
}

void onClickLocusAddPhotographLog () {
  newPhotographLog("Locus");
}

void onClickStratumFeatureAddPhotographLog () {
  newPhotographLog("Stratum_Feature");
}
addOnEvent("User/User_List/Login", "click", "onClickUserLogin()");
addOnEvent("User/User_List/Module_Guide", "click", "onClickUserModuleGuide()");
addOnEvent("Control/Site/Create_New_Site", "click", "onClickControlCreateNewSite()");
addOnEvent("Trench/Trench/Set_Date_Closed", "click", "onClickTrenchSetDateClosed()");
addOnEvent("Locus/Deposit/Material_Helper", "click", "onClickLocusMaterialHelper()");
addOnEvent("Locus/Relationships/Create_Relationships_to_This_Locus", "click", "onClickLocusCreateRelationshipstoThisLocus()");
addOnEvent("Stratum_Feature/Stratum_Feature_Loci/Create_Relationships_to_This_Stratum_Feature", "click", "onClickStratumFeatureCreateRelationshipstoThisStratumFeature()");
addOnEvent("Relationship/Legacies/Create_New_Legacy", "click", "onClickRelationshipCreateNewLegacy()");
addOnEvent("Stratum_Feature_Relationship/Legacies/Create_New_Legacy", "click", "onClickStratumFeatureRelationshipCreateNewLegacy()");
addOnEvent("Site/Site/Create_New_Trench", "click", "onClickSiteCreateNewTrench()");
addOnEvent("Trench/Trench/Add_Trench_Files", "click", "onClickTrenchAddTrenchFiles()");
addOnEvent("Trench/Loci/Create_New_Locus", "click", "onClickTrenchCreateNewLocus()");
addOnEvent("Trench/Strata_Features/Create_New_Stratum_Feature", "click", "onClickTrenchCreateNewStratumFeature()");
addOnEvent("Trench/FCNs/Create_New_FCN", "click", "onClickTrenchCreateNewFCN()");
addOnEvent("Trench/Diaries/Create_New_Diary", "click", "onClickTrenchCreateNewDiary()");
addOnEvent("Trench/Legacies/Create_New_Legacy", "click", "onClickTrenchCreateNewLegacy()");
addOnEvent("Locus/Deposit/Add_Munsel_Color", "click", "onClickLocusAddMunselColor()");
addOnEvent("Locus/Deposit/Add_New_Sediment_Aggregate", "click", "onClickLocusAddNewSedimentAggregate()");
addOnEvent("Locus/FCNs/Add_FCN", "click", "onClickLocusAddFCN()");
addOnEvent("Locus/Add/Add_Photograph_Log", "click", "onClickLocusAddPhotographLog()");
addOnEvent("Stratum_Feature/Add/Add_Photograph_Log", "click", "onClickStratumFeatureAddPhotographLog()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
addOnEvent("Trench_Files/Add_Trench_Files/Add_Photo_Button_1", "click", "attachPictureTo(\"Trench_Files/Add_Trench_Files/Add_Photo\")");
addOnEvent("Locus/General/Photo_of_Plan_Button_1", "click", "attachPictureTo(\"Locus/General/Photo_of_Plan\")");
addOnEvent("Locus/General/Photo_of_Section_Button_1", "click", "attachPictureTo(\"Locus/General/Photo_of_Section\")");
addOnEvent("Locus/Add/Photo_Button_1", "click", "attachPictureTo(\"Locus/Add/Photo\")");
addOnEvent("Stratum_Feature/Add/Photo_Button_1", "click", "attachPictureTo(\"Stratum_Feature/Add/Photo\")");
addOnEvent("Diary/Diary/Photo_Button_1", "click", "attachPictureTo(\"Diary/Diary/Photo\")");
addOnEvent("FCN/General/Attach_Photograph_Button_1", "click", "attachPictureTo(\"FCN/General/Attach_Photograph\")");
addOnEvent("Trench_Files/Add_Trench_Files/Attach_File_Button_1", "click", "attachFileTo(\"Trench_Files/Add_Trench_Files/Attach_File\")");
addOnEvent("Locus/Add/Attach_File_Button_1", "click", "attachFileTo(\"Locus/Add/Attach_File\")");
addOnEvent("Stratum_Feature/Add/Attach_File_Button_1", "click", "attachFileTo(\"Stratum_Feature/Add/Attach_File\")");
addOnEvent("FCN/General/Attach_File_Button_1", "click", "attachFileTo(\"FCN/General/Attach_File\")");

/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/
addOnEvent("Trench_Files/Add_Trench_Files/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Trench_Files\"))");
addOnEvent("Locus/Add/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Locus\"))");
addOnEvent("Stratum_Feature/Add/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Stratum_Feature\"))");
addOnEvent("FCN/General/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"FCN\"))");

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Control");
  tabgroupsToValidate.add("Relationship");
  tabgroupsToValidate.add("Stratum_Feature");
  tabgroupsToValidate.add("Site");
  tabgroupsToValidate.add("Locus");
  tabgroupsToValidate.add("Trench");
  tabgroupsToValidate.add("Stratum_Feature_Relationship");
  tabgroupsToValidate.add("Legacy");
  tabgroupsToValidate.add("FCN");
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, String parentTabGroup) {
  parentTabgroup   = parentTabGroup;
  parentTabgroup__ = parentTabGroup;
  newRecord(tabgroup, false);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert(
        "{Confirm_Deletion}",
        "{Press_OK_to_Delete_this_Record}",
        fun2str("reallyDeleteRecord", tabgroup),
        "doNotDelete()"
    );
  }

  Log.d("deleteRecord", tabgroup);
}

void reallyDeleteRecord(String tabgroup) {
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  executeOnEvent(tabgroup, "delete");
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = "onSave" + childArchEntType.replaceAll(" ", "") + "__()";

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  loadEntityFrom(entityID, "");
}

void loadEntityFrom(String entityID, String onFail) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        execute(onFail);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}


void newSite(String parent){
  String tabgroup = "Site";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newSite (){
  newSite(null);
}

void newTrench(String parent){
  String tabgroup = "Trench";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newTrench (){
  newTrench(null);
}

void newTrenchFiles(String parent){
  String tabgroup = "Trench_Files";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newTrenchFiles (){
  newTrenchFiles(null);
}

void newLocus(String parent){
  String tabgroup = "Locus";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newLocus (){
  newLocus(null);
}

void newStratumFeature(String parent){
  String tabgroup = "Stratum_Feature";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Control/Next_IDs/Next_Stratum_Feature_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Stratum_Feature/General/Stratum_Feature_ID");

  executeOnEvent(tabgroup, "create");
}

void newStratumFeature (){
  newStratumFeature(null);
}

void newSedimentAggregate(String parent){
  String tabgroup = "Sediment_Aggregate";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newSedimentAggregate (){
  newSedimentAggregate(null);
}

void newPhotographLog(String parent){
  String tabgroup = "Photograph_Log";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newPhotographLog (){
  newPhotographLog(null);
}

void newDiary(String parent){
  String tabgroup = "Diary";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newDiary (){
  newDiary(null);
}

void newFCN(String parent){
  String tabgroup = "FCN";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  if (isNull("Control/Next_IDs/Next_FCN_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("FCN/General/FCN_ID");

  executeOnEvent(tabgroup, "create");
}

void newFCN (){
  newFCN(null);
}

void newSoilMunselColor(String parent){
  String tabgroup = "Soil_Munsel_Color";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newSoilMunselColor (){
  newSoilMunselColor(null);
}

void newLegacy(String parent){
  String tabgroup = "Legacy";
  if (!isNull(parent)) {
    triggerAutoSave();
    parentTabgroup   = parent;
    parentTabgroup__ = parent;
  }
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  executeOnEvent(tabgroup, "create");
}

void newLegacy (){
  newLegacy(null);
}
void duplicateSite(){
  String tabgroup = "Site";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateTrench(){
  String tabgroup = "Trench";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateTrenchFiles(){
  String tabgroup = "Trench_Files";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Trench_Files/Add_Trench_Files/Add_Photo", new ArrayList());
  populateFileList("Trench_Files/Add_Trench_Files/Attach_File", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Add Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateLocus(){
  String tabgroup = "Locus";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Locus/General/Photo_of_Plan", new ArrayList());
  populateCameraPictureGallery("Locus/General/Photo_of_Section", new ArrayList());
  populateCameraPictureGallery("Locus/Add/Photo", new ArrayList());
  populateFileList("Locus/Add/Attach_File", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Photo of Plan");
      excludeAttributes.add("Photo of Section");
      excludeAttributes.add("Locus Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateStratumFeature(){
  String tabgroup = "Stratum_Feature";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Stratum_Feature/General/Stratum_Feature_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Stratum_Feature/Add/Photo", new ArrayList());
  populateFileList("Stratum_Feature/Add/Attach_File", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Stratum Feature Photo");
      excludeAttributes.add("Attach File");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateSedimentAggregate(){
  String tabgroup = "Sediment_Aggregate";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicatePhotographLog(){
  String tabgroup = "Photograph_Log";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateDiary(){
  String tabgroup = "Diary";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Diary/Diary/Photo", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Diary Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateFCN(){
  String tabgroup = "FCN";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("FCN/General/FCN_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateFileList("FCN/General/Attach_File", new ArrayList());
  populateCameraPictureGallery("FCN/General/Attach_Photograph", new ArrayList());
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Attach File");
      excludeAttributes.add("Attach Photograph");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateSoilMunselColor(){
  String tabgroup = "Soil_Munsel_Color";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateLegacy(){
  String tabgroup = "Legacy";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  executeOnEvent(tabgroup, "copy");

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      timedFetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  timedFetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
addOnEvent("Site", "save", "populateEntityListsOfArchEnt(\"Site\")");
addOnEvent("Trench", "save", "populateEntityListsOfArchEnt(\"Trench\")");
addOnEvent("Trench_Files", "save", "populateEntityListsOfArchEnt(\"Trench_Files\")");
addOnEvent("Locus", "save", "populateEntityListsOfArchEnt(\"Locus\")");
addOnEvent("Stratum_Feature", "save", "populateEntityListsOfArchEnt(\"Stratum_Feature\")");
addOnEvent("Sediment_Aggregate", "save", "populateEntityListsOfArchEnt(\"Sediment_Aggregate\")");
addOnEvent("Photograph_Log", "save", "populateEntityListsOfArchEnt(\"Photograph_Log\")");
addOnEvent("Diary", "save", "populateEntityListsOfArchEnt(\"Diary\")");
addOnEvent("FCN", "save", "populateEntityListsOfArchEnt(\"FCN\")");
addOnEvent("Soil_Munsel_Color", "save", "populateEntityListsOfArchEnt(\"Soil_Munsel_Color\")");
addOnEvent("Legacy", "save", "populateEntityListsOfArchEnt(\"Legacy\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("User", "show", "removeNavigationButtons()");
addOnEvent("Control", "show", "removeNavigationButtons()");
addOnEvent("Site", "show", "removeNavigationButtons()");
addOnEvent("Trench", "show", "removeNavigationButtons()");
addOnEvent("Date_Closed", "show", "removeNavigationButtons()");
addOnEvent("Trench_Files", "show", "removeNavigationButtons()");
addOnEvent("Locus", "show", "removeNavigationButtons()");
addOnEvent("Stratum_Feature", "show", "removeNavigationButtons()");
addOnEvent("Sediment_Aggregate", "show", "removeNavigationButtons()");
addOnEvent("Photograph_Log", "show", "removeNavigationButtons()");
addOnEvent("Diary", "show", "removeNavigationButtons()");
addOnEvent("Relationship", "show", "removeNavigationButtons()");
addOnEvent("Stratum_Feature_Relationship", "show", "removeNavigationButtons()");
addOnEvent("FCN", "show", "removeNavigationButtons()");
addOnEvent("Soil_Munsel_Color", "show", "removeNavigationButtons()");
addOnEvent("Legacy", "show", "removeNavigationButtons()");
addOnEvent("Site", "show", "addNavigationButtons(\"Site\")");
addOnEvent("Trench", "show", "addNavigationButtons(\"Trench\")");
addOnEvent("Trench_Files", "show", "addNavigationButtons(\"Trench_Files\")");
addOnEvent("Locus", "show", "addNavigationButtons(\"Locus\")");
addOnEvent("Stratum_Feature", "show", "addNavigationButtons(\"Stratum_Feature\")");
addOnEvent("Sediment_Aggregate", "show", "addNavigationButtons(\"Sediment_Aggregate\")");
addOnEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\")");
addOnEvent("Diary", "show", "addNavigationButtons(\"Diary\")");
addOnEvent("FCN", "show", "addNavigationButtons(\"FCN\")");
addOnEvent("Soil_Munsel_Color", "show", "addNavigationButtons(\"Soil_Munsel_Color\")");
addOnEvent("Legacy", "show", "addNavigationButtons(\"Legacy\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search()");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Site}", "Site"));
entityTypes.add(new NameValuePair("{Trench}", "Trench"));
entityTypes.add(new NameValuePair("{Trench_Files}", "Trench Files"));
entityTypes.add(new NameValuePair("{Locus}", "Locus"));
entityTypes.add(new NameValuePair("{Stratum_Feature}", "Stratum Feature"));
entityTypes.add(new NameValuePair("{Sediment_Aggregate}", "Sediment Aggregate"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
entityTypes.add(new NameValuePair("{Diary}", "Diary"));
entityTypes.add(new NameValuePair("{FCN}", "FCN"));
entityTypes.add(new NameValuePair("{Soil_Munsel_Color}", "Soil Munsel Color"));
entityTypes.add(new NameValuePair("{Legacy}", "Legacy"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Control/Search/Entity_List";
  String refSearchTerm  = "Control/Search/Search_Term";
  String refEntityTypes = "Control/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE {term}||'%'  "+
                       "                   AND ( aenttypename = {type} OR '' = {type} ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";
  searchQuery = dbReplaceFirst(searchQuery, "{term}", term);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);
  searchQuery = dbReplaceFirst(searchQuery, "{type}", type);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Control");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadSiteFrom(String uuid) {
  String tabgroup = "Site";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadTrenchFrom(String uuid) {
  String tabgroup = "Trench";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadTrenchFilesFrom(String uuid) {
  String tabgroup = "Trench_Files";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadLocusFrom(String uuid) {
  String tabgroup = "Locus";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadStratumFeatureFrom(String uuid) {
  String tabgroup = "Stratum_Feature";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadSedimentAggregateFrom(String uuid) {
  String tabgroup = "Sediment_Aggregate";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadPhotographLogFrom(String uuid) {
  String tabgroup = "Photograph_Log";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadDiaryFrom(String uuid) {
  String tabgroup = "Diary";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadFCNFrom(String uuid) {
  String tabgroup = "FCN";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadSoilMunselColorFrom(String uuid) {
  String tabgroup = "Soil_Munsel_Color";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}
void loadLegacyFrom(String uuid) {
  String tabgroup = "Legacy";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      executeOnEvent(tabgroup, "fetch");
    }
  };

  executeOnEvent(tabgroup, "prefetch");
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Trench/Trench/Take_From_GPS_1", "click", "takePoint(\"Trench\")");
addOnEvent("FCN/General/Take_From_GPS_1", "click", "takePoint(\"FCN\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Trench", "Trench/Trench");
tabgroupToTabRef.put("FCN", "FCN/General");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("{Please_enter_data_first}");
    return;
  }

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab ref. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/******************************************************************************/
/*               LOADING AND CREATION OF RECORDS FROM QR CODES                */
/******************************************************************************/
import java.util.regex.Pattern;
import java.util.regex.Matcher;


void bindQrScanning(String refButton, String refChild, boolean isChild) {
  String event = "click";

  String parentTabGroup;
  if (isChild) parentTabGroup = getTabGroupRef(refButton);
  else         parentTabGroup = null;

  String stmt = fun2str(
      "scanRecordFromQrCode",
      new Object[]{parentTabGroup, refChild}
  );

  addOnEvent(refButton, event, stmt);
}

void scanRecordFromQrCode(String parentTabGroup, String refChild) {
  String callback = fun2str(
      "loadOrCreateEntityFromScannedAttrib",
      new Object[]{parentTabGroup, refChild}
  );
  scanCode(callback);
}

void loadOrCreateEntityFromScannedAttrib(
    String parentTabGroup,
    String refChild
) {
  String code = getLastScanContents();

  String  uuidString  = "";
  Pattern uuidPattern = Pattern.compile("(\\d{19})");
  Matcher matcher     = uuidPattern.matcher(code);
  while (matcher.find())
    uuidString = matcher.group(1);

  if (isNull(uuidString)) {
    showWarning("{load_scanned_err_head}", "{load_scanned_err_body}");
    return;
  }

  loadEntityFrom(uuidString);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

for (String ref : getStartingIdRefs())
  persistOverSessions(ref, "1");

void incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  destToSource.put("Stratum_Feature/General/Stratum_Feature_ID", "Control/Next_IDs/Next_Stratum_Feature_ID");
  destToSource.put("FCN/General/FCN_ID", "Control/Next_IDs/Next_FCN_ID");

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}
/******************************************************************************/
/*                         POPULATION VIA <MARKDOWN>                          */
/******************************************************************************/


/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `ref`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String ref,
  String parentUuid,
  String entType,
  String relType
) {
  String viewType = getType(ref);

  String limit;
  switch (viewType) {
    case "dropdown": limit = "";                   break;
    case "list":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "dropdown": fetchAll(q, cbPopulateDropDown); break;
    case "list":     populateCursorList(ref, q, 25); break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String ref          = m[0];
    String menuTabGroup = getTabGroupRef(ref);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[2];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String ref            = menuDescriptor[0];
  String parentUuidCall = menuDescriptor[1];
  String entType        = menuDescriptor[2];
  String relType        = menuDescriptor[3];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + ref            + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();
ENTITY_MENUS.add(new String[] {
    "Control/Site/Choose_an_Existing_Site",
    "getUuid(\"Control\")",
    "Site",
    ""
});
ENTITY_MENUS.add(new String[] {
    "Site/Site/List_of_Existing_Trenches",
    "getUuid(\"Site\")",
    "Trench",
    "Site - Trench"
});
ENTITY_MENUS.add(new String[] {
    "Trench/Trench/Attached_Trench_Files",
    "getUuid(\"Trench\")",
    "Trench Files",
    "Trench - Trench Files"
});
ENTITY_MENUS.add(new String[] {
    "Trench/Loci/List_of_Existing_Loci",
    "getUuid(\"Trench\")",
    "Locus",
    "Trench - Locus"
});
ENTITY_MENUS.add(new String[] {
    "Trench/Strata_Features/List_of_Existing_Strata_Features",
    "getUuid(\"Trench\")",
    "Stratum Feature",
    "Trench - Stratum Feature"
});
ENTITY_MENUS.add(new String[] {
    "Trench/Diaries/List_of_Existing_Diaries",
    "getUuid(\"Trench\")",
    "Diary",
    "Trench - Diary"
});
ENTITY_MENUS.add(new String[] {
    "Trench/Legacies/List_of_Existing_Legacies",
    "getUuid(\"Trench\")",
    "Legacy",
    "Trench - Legacy"
});
ENTITY_MENUS.add(new String[] {
    "Locus/Deposit/Munsel_Colors",
    "getUuid(\"Locus\")",
    "Soil Munsel Color",
    "Locus - Soil Munsel Color"
});
ENTITY_MENUS.add(new String[] {
    "Locus/Deposit/Associated_Sediment_Aggregates",
    "getUuid(\"Locus\")",
    "Sediment Aggregate",
    "Locus - Sediment Aggregate"
});
ENTITY_MENUS.add(new String[] {
    "Locus/FCNs/List_of_Related_FCNs",
    "getUuid(\"Locus\")",
    "FCN",
    "Locus - FCN"
});
ENTITY_MENUS.add(new String[] {
    "Locus/Add/Select_a_Photograph_Log",
    "getUuid(\"Locus\")",
    "Photograph Log",
    "Locus - Photograph Log"
});
ENTITY_MENUS.add(new String[] {
    "Stratum_Feature/Add/Select_a_Photograph_Log",
    "getUuid(\"Stratum_Feature\")",
    "Photograph Log",
    "Stratum Feature - Photograph Log"
});
ENTITY_MENUS.add(new String[] {
    "Relationship/Legacies/List_of_Existing_Legacies",
    "getUuid(\"Relationship\")",
    "Legacy",
    ""
});
ENTITY_MENUS.add(new String[] {
    "Stratum_Feature_Relationship/Legacies/List_of_Existing_Legacies",
    "getUuid(\"Stratum_Feature_Relationship\")",
    "Legacy",
    ""
});
for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[0];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}

addOnEvent("Control/Site/Choose_an_Existing_Site", "click", "loadEntity()");
addOnEvent("Site/Site/List_of_Existing_Trenches", "click", "loadEntity()");
addOnEvent("Trench/Trench/Attached_Trench_Files", "click", "loadEntity(true)");
addOnEvent("Trench/Loci/List_of_Existing_Loci", "click", "loadEntity()");
addOnEvent("Trench/Strata_Features/List_of_Existing_Strata_Features", "click", "loadEntity()");
addOnEvent("Trench/Diaries/List_of_Existing_Diaries", "click", "loadEntity()");
addOnEvent("Trench/Legacies/List_of_Existing_Legacies", "click", "loadEntity()");
addOnEvent("Locus/Deposit/Munsel_Colors", "click", "loadEntity(true)");
addOnEvent("Locus/Deposit/Associated_Sediment_Aggregates", "click", "loadEntity(true)");
addOnEvent("Locus/FCNs/List_of_Related_FCNs", "click", "loadEntity()");
addOnEvent("Locus/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");
addOnEvent("Stratum_Feature/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");
addOnEvent("Relationship/Legacies/List_of_Existing_Legacies", "click", "loadEntity()");
addOnEvent("Stratum_Feature_Relationship/Legacies/List_of_Existing_Legacies", "click", "loadEntity()");
/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/********************************* TOP MATTER *********************************/

setFileSyncEnabled(false);
setSyncEnabled    (false);

/*********************************** SHARED ***********************************/
String WEB_REL_NONE = "<i>None</i>";

locusIdentifer = "";

void populateSquare(String ref) {
  String q = "";
  q += " SELECT DISTINCT measure, measure";
  q += " FROM            latestnondeletedaentvalue";
  q += " JOIN            attributekey USING (attributeid)";
  q += " WHERE           attributename = 'Square'";
  q += " AND             measure IS NOT NULL";
  q += " ORDER BY        measure;";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result);
    }
  };

  fetchAll(q, populate);
}

void setFieldToIdentifier(String identiferType, String lotRef) {
  String uuid = getUuid(identiferType);

  if (isNull(uuid)) {
    populateWebViewHtml(lotRef, "&nbsp;");
    return;
  }

  String q = "";
  q += "SELECT uuid, response ";
  q += "FROM latestnondeletedarchentformattedidentifiers ";
  q += "WHERE uuid = '%s' ";
  q  = replaceFirst(q, "%s", uuid);

  cb = new FetchCallback() {
    onFetch(result) {
      locusIdentifer  = result.get(1);

      populateWebViewHtml(lotRef, locusIdentifer);
    }
  };

  fetchOne(q, cb);
}

void populateLotLabel(String lotRef) {
  identiferType = "Locus";
  setFieldToIdentifier(identiferType, lotRef);
}

boolean isValidTrenchId() {
  String ref = "Site/Site/Trench_ID";
  String trenchId = getFieldValue(ref);
  return trenchId.matches("T\\d+");
}

List getAttribNamesEndingWith(String ending) {
  List attribNamesEndingWith = new ArrayList();
  for (String ref : DATA_REFS) {
    String attribName = getAttributeName(ref);
    if (attribName.endsWith(ending))
      attribNamesEndingWith.add(attribName);
  }
  return attribNamesEndingWith;
}

String getAttribNamesEndingWithAsString(String ending) {
  List   attribNames       = getAttribNamesEndingWith(ending);
  String attribNamesString = "";

  attribNamesString += "(";
  for (int i = 0; i < attribNames.size() - 1; i++) {
    attribName = attribNames.get(i);
    attribNamesString += "'" + attribName + "', ";
  }
  if (attribNames.size() > 0) {
    int lastIndex = attribNames.size() - 1;
    attribName = attribNames.get(lastIndex);
    attribNamesString += "'" + attribName + "'";
  }
  attribNamesString += ")";

  return attribNamesString;
}

ATTRIBS_TRENCH_ID        = getAttribNamesEndingWithAsString("Trench ID");
ATTRIBS_LOCUS_ID         = getAttribNamesEndingWithAsString("Locus ID");
ATTRIBS_SITE_NAME        = getAttribNamesEndingWithAsString("Site Name");
ATTRIBS_YEAR_OF_CAMPAIGN = getAttribNamesEndingWithAsString("Year of Campaign");
/******************************* RELATIONSHIPS ********************************/
/* Variables and functions shared by entity-specfic code fo relating          */
/* entities.                                                                  */
/******************************************************************************/
addOnEvent("Locus",                    "show", "onDisplayParent()");
addOnEvent("Relationship",               "show", "onDisplayRelationship()");
addOnEvent("Stratum_Feature",              "show", "CGonDisplayParent()");
addOnEvent("Stratum_Feature_Relationship", "show", "CGonDisplayRelationship()");

String WEB_REL_DESC_FMT      = "%s <u>&nbsp;%s&nbsp;</u> <u>&nbsp;%s&nbsp;</u>";
String WEB_REL_DESC_FILL     = "?";
String WEB_REL_BLANK         = "&nbsp;";

String selectedRelId         = null;
String selectedRelIdentifier = null;
String selectedChildUuid     = null;

String proposedChildUuid       = null;
String proposedChildIdentifier = null;

String displayedTabGroup     = null;

void onDisplayParent()            {displayedTabGroup = "Locus";}
void onDisplayRelationship()      {displayedTabGroup = "Relationship";}
boolean isDisplayedParent()       {return displayedTabGroup.equals("Locus");}
boolean isDisplayedRelationship() {return displayedTabGroup.equals("Relationship");}

void CGonDisplayParent()            {displayedTabGroup = "Stratum_Feature";}
void CGonDisplayRelationship()      {displayedTabGroup = "Stratum_Feature_Relationship";}
boolean CGisDisplayedParent()       {return displayedTabGroup.equals("Stratum_Feature");}
boolean CGisDisplayedRelationship() {return displayedTabGroup.equals("Stratum_Feature_Relationship");}

// Depends on the following globals:
//   - selectedRelId
//   - userid        (Defined by autogen)
void deleteRelationship() {
  if (isNull(selectedRelId)) {
    showToast("{no_relationship_selected}");
    return;
  }

  String q = "";
  q += " INSERT INTO aentreln (uuid, relationshipid, deleted, participatesverb, userid)";
  q += " SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"'";
  q += " FROM latestnondeletedaentreln";
  q += " WHERE relationshipid = '"+selectedRelId+"'";

  DeleteCallback cb = new DeleteCallback() {
    onDelete(uuid) {
      deleteRelationshipSuceeded();
    }
  };

  fetchOne(q);
  deleteRel(selectedRelId, cb);

  selectedRelId         = null;
  selectedRelIdentifier = null;
}

void deleteRelationshipSuceeded() {
  String refSelectedRelRel    = "Relationship/Relationships/Selected_Relationship";
  String refSelectedRelParent = "Locus/Relationships/Selected_Relationship";
  if (isDisplayedParent()) {
    populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
    populateExistingRelationships();
  }
  if (isDisplayedRelationship()) {
    populateWebViewHtml(refSelectedRelRel,    WEB_REL_NONE);
    searchRelationship();
  }

  String CGrefSelectedRelRel    = "Stratum_Feature_Relationship/Relationships/Selected_Relationship";
  String CGrefSelectedRelParent = "Stratum_Feature/Stratum_Feature_Loci/Selected_Relationship";
  if (CGisDisplayedParent()) {
    populateWebViewHtml(CGrefSelectedRelParent, WEB_REL_NONE);
    CGpopulateExistingRelationships();
  }
  if (CGisDisplayedRelationship()) {
    populateWebViewHtml(CGrefSelectedRelRel,    WEB_REL_NONE);
    CGsearchRelationship();
  }
}

String getSelectedRelationshipComponent(String ref, String component) {
  String   val       = getFieldValue(ref);
  String[] arguments = null;
  if (val == null)
      return null;
  else
      arguments = val.split("~!~");

  String   relationshipName = arguments[0];
  String   parentRole       = arguments[1];
  String   childRole        = arguments[2];

  component = component.toLowerCase();
  if      (component.equals("name"))   return relationshipName;
  else if (component.equals("parent")) return parentRole;
  else if (component.equals("child"))  return childRole;
  else                                 return null;
}

void loadRelatedEntity() {
  if (isNull(selectedChildUuid)) {
    showToast("{no_relationship_selected}");
    return;
  }
  loadEntityFrom(selectedChildUuid);
}

/**************************** USER TAB VALIDATION *****************************/
/* The autogen defines its own `onClickUserLogin` function. This is           */
/* overridden using @POSTPROC.                                                */
/******************************************************************************/

// Overrides autogenerated function
void onClickUserLogin () {
  String refUsers      = userMenuPath; // Defined by autogen
  String refDeviceCode = "User/User_List/Device_Code";

  String vocabIdUsers      = getFieldValue(refUsers);
  String vocabIdDeviceCode = getFieldValue(refDeviceCode);

  Boolean isSelectedUsers      = !isNull(vocabIdUsers);
  Boolean isSelectedDeviceCode = !isNull(vocabIdDeviceCode);

  if (!isSelectedUsers)      { noUsersSelected();      return; }
  if (!isSelectedDeviceCode) { noDeviceCodeSelected(); return; }

  newTab("Control", true);
}

void noUsersSelected() {
  String msgHead = "{no_user_selected_head}";
  String msgBody = "{no_user_selected_body}";
  showWarning(msgHead, msgBody);
}

void noDeviceCodeSelected() {
  msgHead = "{no_device_code_selected_head}";
  msgBody = "{no_device_code_selected_body}";
  showWarning(msgHead, msgBody);
}
/******************************* RELATIONSHIPS ********************************/
/* Locus-to-Locus relationships.                                              */
/*                                                                            */
/* Uses functions from logic/relationships-shared.bsh                         */
/*                                                                            */
/* Modifies onClickLocusCreateRelationshipstoThisLocus using @POSTPROC.       */
/******************************************************************************/
//////////////////// FUNCTIONS AFFECTING CONTEXT TAB GROUP /////////////////////
addOnEvent("Locus",                                    "show",  "initParentRelationshipGlobals()");
addOnEvent("Locus",                                    "show",  "populateExistingRelationships()");
addOnEvent("Locus/Relationships/Load_Related_Locus", "click", "loadRelatedEntity()");

addOnEvent("Locus/Relationships/Existing_Relationships_to_This_Locus", "click", "selectRelationship()");
addOnEvent("Locus/Relationships/Delete_Relationship",                    "click", "deleteRelationship()");

void initParentRelationshipGlobals() {
  String refSelectedRelParent = "Locus/Relationships/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

void populateExistingRelationships(){
  String tabGroup    = "Locus";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Locus/Relationships/Existing_Relationships_to_This_Locus";

  String q = getRelatedChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

void selectRelationship() {
  String refSelectedRelParent = "Locus/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Relationship",                                      "show",  "initRelationshipRelationshipGlobals()");
addOnEvent("Relationship/Relationships/Add_Relationship",       "click", "addRelationship()");
addOnEvent("Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Relationship/Relationships/Existing_Relationships", "click", "selectExistingRelationship()");
addOnEvent("Relationship/Relationships/Relationship_Type",      "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "searchRelationship()");
addOnEvent("Relationship/Relationships/Unrelated_Loci",     "click", "selectUnrelatedEntity()");

void initRelationshipRelationshipGlobals() {
  String refSelectedRelRel = "Relationship/Relationships/Selected_Relationship";

  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = WEB_REL_BLANK;

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);

  populateParentIdentiferRelationships();
  populateProposedRelationship();
  clearSearch();
}

void populateRelationshipType() {
  refRelationshipType = "Relationship/Relationships/Relationship_Type";

  String q = "";
  q += "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%-%' ";
  q += " UNION ";
  q += " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%-%' ";
  q += " ORDER BY relntypeid, name";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(refRelationshipType, result);
    }
  };

  fetchAll(q, populate);
}

void populateProposedRelationship() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = locusIdentifer; // Defined in logic/shared.bsh
  relationship   = getSelectedRelationshipComponent(refRelType, "parent");
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

void searchRelationship() {
  String parentTabGroup = "Locus";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Relationship";
  String refUnrelated = "Relationship/Relationships/Unrelated_Loci";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";
  String refRelType   = "Relationship/Relationships/Relationship_Type";
  String refTrenchId  = "Relationship/Relationships/Trench_ID";
  String refLocusId   = "Relationship/Relationships/Locus_ID";
  String refSiteName  = "Relationship/Vars/Relationship_Site_Name";
  String refSiteYear  = "Relationship/Vars/Relationship_Year_of_Campaign";

  String trenchId   = getFieldValue(refTrenchId);
  String locusId    = getFieldValue(refLocusId);
  String siteName   = getFieldValue(refSiteName);
  String siteYear   = getFieldValue(refSiteYear);
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(trenchId)) {
    msgHead  = "{trench_id_required_head}";
    msgBody  = "{trench_id_required_body}";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename IN " + ATTRIBS_TRENCH_ID;
  unrelatedQ += "            AND measure = '{Locus_Trench_ID}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_LOCUS_ID;
  unrelatedQ += "                    AND (measure = '{Locus_Locus_ID}' OR '{Locus_Locus_ID}' = ''))";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_SITE_NAME;
  unrelatedQ += "                    AND measure = '{Relationship_Site_Name}')";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_YEAR_OF_CAMPAIGN;
  unrelatedQ += "                    AND measure = '{Relationship_Year_of_Campaign}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += "    AND aenttypename IN ('Locus', 'Legacy')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Locus_Trench_ID}",               trenchId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Locus_Locus_ID}",                locusId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Locus_Locus_ID}",                locusId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Relationship_Site_Name}",        siteName);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Relationship_Year_of_Campaign}", siteYear);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",                    parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",                    parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",                    parentRole);

  relatedQ += getRelatedChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  populateProposedRelationship();
}

void clearSearch() {
  String refUnrelated = "Relationship/Relationships/Unrelated_Loci";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

void selectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  populateProposedRelationship();
}

void addRelationship() {
  String parentTabGroup = "Locus";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String relName    = getSelectedRelationshipComponent(refRelType, "name");
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String childRole  = getSelectedRelationshipComponent(refRelType, "child");
  String callback   = "addRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "{logic_error_head}";
    String msgBody = "{logic_error_body}";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("no_locus_selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

void addRelationshipSucceeded() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  searchRelationship();
}

void selectExistingRelationship() {
  String refSelectedRelRel = "Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

void populateParentIdentiferRelationships() {
  String lotRef = "Relationship/Relationships/Parent_Identifier";
  populateLotLabel(lotRef); // Defined in logic/shared.bsh
}

String getRelatedChildQuery(String parentUuid) {
  // `locusIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = locusIdentifer;

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename NOT like '% - %') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY parentchild.createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}

// Overrides autogenerated definition
void onClickLocusCreateRelationshipstoThisLocus () {
  String tabgroup = "Locus";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }

  newTab("Relationship", true);
}

populateRelationshipType();
/******************************* RELATIONSHIPS ********************************/
/* Stratum Feature to Locus relationships.                                  */
/*                                                                            */
/* Uses functions and globals from logic/relationships-shared.bsh             */
/*                                                                            */
/* Modifies onClickStratumFeatureCreateRelationshipstoThisStratumFeature      */
/* using  @POSTPROC.                                                          */
/******************************************************************************/
//////////////// FUNCTIONS AFFECTING "CONTEXT GROUP" TAB GROUP /////////////////
addOnEvent("Stratum_Feature",                                    "show",  "CGinitParentRelationshipGlobals()");
addOnEvent("Stratum_Feature",                                    "show",  "CGpopulateExistingRelationships()");
addOnEvent("Stratum_Feature/Stratum_Feature_Loci/Load_Related_Locus", "click", "loadRelatedEntity()");

addOnEvent("Stratum_Feature/Stratum_Feature_Loci/Existing_Relationships_to_This_Stratum_Feature", "click", "CGSelectRelationship()");
addOnEvent("Stratum_Feature/Stratum_Feature_Loci/Delete_Relationship",                    "click", "deleteRelationship()");

void CGinitParentRelationshipGlobals() {
  String refSelectedRelParent = "Stratum_Feature/Stratum_Feature_Loci/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

void CGpopulateExistingRelationships(){
  String tabGroup    = "Stratum_Feature";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Stratum_Feature/Stratum_Feature_Loci/Existing_Relationships_to_This_Stratum_Feature";

  String q = getCGChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

void CGSelectRelationship() {
  String refSelectedRelParent = "Stratum_Feature/Stratum_Feature_Loci/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Stratum_Feature_Relationship",                                      "show",  "CGinitRelationshipRelationshipGlobals()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Add_Relationship",       "click", "CGaddRelationship()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Existing_Relationships", "click", "CGselectExistingRelationship()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Search",                 "click", "CGpopulateProposedRelationship()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Search",                 "click", "CGsearchRelationship()");
addOnEvent("Stratum_Feature_Relationship/Relationships/Unrelated_Loci",     "click", "CGselectUnrelatedEntity()");

void CGinitRelationshipRelationshipGlobals() {
  String refSelectedRelRel = "Stratum_Feature_Relationship/Relationships/Selected_Relationship";

  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = WEB_REL_BLANK;

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);

  CGpopulateParentIdentiferRelationships();
  CGpopulateProposedRelationship();
  CGclearSearch();
}

void CGpopulateProposedRelationship() {
  String refProposedRel = "Stratum_Feature_Relationship/Relationships/Proposed_Relationship";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = locusIdentifer; // Defined in logic/shared.bsh
  relationship   = "{includes}";
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);

  String refSelectedRelParent = "Stratum_Feature/Stratum_Feature_Loci/Selected_Relationship";
  populateWebViewHtml(refSelectedRelParent, WEB_REL_BLANK);
}

void CGsearchRelationship() {
  String parentTabGroup = "Stratum_Feature";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Stratum_Feature_Relationship";
  String refUnrelated = "Stratum_Feature_Relationship/Relationships/Unrelated_Loci";
  String refRelated   = "Stratum_Feature_Relationship/Relationships/Existing_Relationships";
  String refTrenchId  = "Stratum_Feature_Relationship/Relationships/Trench_ID";
  String refLocusId   = "Stratum_Feature_Relationship/Relationships/Locus_ID";
  String refSiteName  = "Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Site_Name";
  String refSiteYear  = "Stratum_Feature_Relationship/Vars/Stratum_Feature_Relationship_Year_of_Campaign";

  String trenchId   = getFieldValue(refTrenchId);
  String locusId    = getFieldValue(refLocusId);
  String siteName   = getFieldValue(refSiteName);
  String siteYear   = getFieldValue(refSiteYear);
  String parentRole = "{includes}";
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(trenchId)) {
    msgHead  = "{trench_id_required_head}";
    msgBody  = "{trench_id_required_body}";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename IN " + ATTRIBS_TRENCH_ID;
  unrelatedQ += "            AND measure = '{Trench_ID}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_LOCUS_ID;
  unrelatedQ += "                    AND (measure = '{Locus_ID}' OR '{Locus_ID}' = ''))";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_SITE_NAME;
  unrelatedQ += "                    AND measure = '{Site_Name}')";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename IN " + ATTRIBS_YEAR_OF_CAMPAIGN;
  unrelatedQ += "                    AND measure = '{Year_of_Campaign}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += "    AND aenttypename IN ('Locus', 'Legacy')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Trench_ID}",        trenchId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Locus_ID}",         locusId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Locus_ID}",         locusId);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Site_Name}",        siteName);
  unrelatedQ  = replaceFirst(unrelatedQ, "{Year_of_Campaign}", siteYear);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",       parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",       parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",       parentRole);

  relatedQ += getCGChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  CGpopulateProposedRelationship();
}

void CGclearSearch() {
  String refUnrelated = "Stratum_Feature_Relationship/Relationships/Unrelated_Loci";
  String refRelated   = "Stratum_Feature_Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

void CGselectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  CGpopulateProposedRelationship();
}

void CGaddRelationship() {
  String parentTabGroup = "Stratum_Feature";

  String relName    = "Stratum Feature - Locus";
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = "{includes}";
  String childRole  = "{is_included_in}";
  String callback   = "CGaddRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "{logic_error_head}";
    String msgBody = "{logic_error_body}";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("no_locus_selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

void CGaddRelationshipSucceeded() {
  String refProposedRel = "Stratum_Feature_Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  CGsearchRelationship();
}

void CGselectExistingRelationship() {
  String refSelectedRelRel = "Stratum_Feature_Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

void CGpopulateParentIdentiferRelationships() {
  String lotRef = "Stratum_Feature_Relationship/Relationships/Parent_Identifier";
  setFieldToIdentifier("Stratum_Feature", lotRef);
}

String getCGChildQuery(String parentUuid) {
  // `locusIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = locusIdentifer;
  String relntypename     = "Stratum Feature - Locus";

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename = '"+relntypename+"') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY parentchild.createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}

//Overrides autogenerated definition
void onClickStratumFeatureCreateRelationshipstoThisStratumFeature () {
  String tabgroup = "Stratum_Feature";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }

  newTab("Stratum_Feature_Relationship", true);
}
/***************************** DYNAMIC UI HELPERS *****************************/
void hideView(String refView) {
  String uuid       = getUuid(getTabGroupRef(refView));
  String attribName = getAttributeName(refView);
  String valView;

  if (hasView(refView)) {
    valView = getFieldValue(refView);
    removeView(refView);
  }

  if (!isNull(valView)) {
    // Flag Feature Type as `deleted`.
    q  = " INSERT INTO aentvalue (UUID, UserID, AttributeID, Deleted)";
    q += " SELECT '{uuid}', {userid}, attributeid, 1";
    q += " FROM  attributekey";
    q += " WHERE attributename = '{attributename}'";
    q  = replaceFirst(q, "{uuid}", uuid);
    q  = replaceFirst(q, "{userid}", userid);
    q  = replaceFirst(q, "{attributename}", attribName);

    fetchOne(q);
  }
}
/************************ DYNAMIC UI - OPEN/CLOSE SITE ************************/
/* There are two cases to handle:                                             */
/*   (a) When a record is newly created.                                      */
/*   (b) When a record has been loaded.                                       */
/*                                                                            */
/* Case (a) is handled by events which trigger a UI update.                   */
/*                                                                            */
/* Case (b) is handled by a callback to `showTabGroup`. This is implemented   */
/* by overwriting the auto-generated record loading function using @POSTPROC. */
/******************************************************************************/
addOnEvent("Locus",                                      "show",  "openLocusTabs()");
addOnEvent("Locus",                                      "fetch", "openLocusTabs(true)");
addOnEvent("Locus/General/Fill_in_Locus_Type_Details", "click", "openLocusTabs()");

void openLocusTabs() {
  openLocusTabs(false);
}

void openLocusTabs(Boolean showGeneralInformationTab){
  String refCut = "Locus/Cut";
  String refDep = "Locus/Deposit";
  String refSke = "Locus/Skeleton";
  String refCon = "Locus/Construction";
  String refGen = "Locus/General";

  String refCtxtType = "Locus/General/Locus_Type";
  String vocabName   = getMenuValue(refCtxtType);

  if (vocabName == null)
    vocabName = "";

  if (vocabName.equals("{Deposit}") || vocabName.equals("{Natural}")){
    cancelTab(refCut, false);
    cancelTab(refCon, false);
    cancelTab(refSke, false);
    showTab  (refDep);
  } else if (vocabName.equals("{Cut}")){
    cancelTab(refDep, false);
    cancelTab(refCon, false);
    cancelTab(refSke, false);
    showTab  (refCut);
  } else if (vocabName.equals("{Construction}")){
    cancelTab(refDep, false);
    cancelTab(refCut, false);
    cancelTab(refSke, false);
    showTab  (refCon);
  } else if (vocabName.equals("{Skeleton}")){
    cancelTab(refDep, false);
    cancelTab(refCut, false);
    cancelTab(refCon, false);
    showTab  (refSke);
  } else {
    cancelTab(refCut, false);
    cancelTab(refDep, false);
    cancelTab(refCon, false);
    cancelTab(refSke, false);
  }

  if(showGeneralInformationTab)
    showTab(refGen);
}
/************************* DYNAMIC UI - CONTEXT GROUP *************************/
// Prefetch this vocab seeing as it will be dynamically loaded multiple times
// throughout the module's runtime.
void updateStratumFeatureFields() {
  String ref       = "Stratum_Feature/General/Record_Type";
  String vocabName = getMenuValue(ref);
  String STRATUM   = "{Stratum}";
  String FEATURE   = "{Feature}";

  if (isNull(vocabName)) {
    setMenuValue(ref, FEATURE);
    updateStratumFeatureToFeature();
    return;
  }

  if (vocabName.equals(STRATUM)) updateStratumFeatureToStratum();
  if (vocabName.equals(FEATURE)) updateStratumFeatureToFeature();
}

void updateStratumFeatureToStratum() {
  hideStratumFeaturePrefix();
  hideStratumFeatureType();
  showStratumFeatureParens();
}

void updateStratumFeatureToFeature() {
  showStratumFeaturePrefix();
  showStratumFeatureType();
  hideStratumFeatureParens();
}

void hideStratumFeatureType() {
  hideView(
      "Stratum_Feature/General/Feature_Type",
      "Stratum_Feature/Vars/Last_Feature_Type"
  );
}

void hideStratumFeaturePrefix() {
  hideView(
      "Stratum_Feature/General/Feature_Prefix",
      "Stratum_Feature/Vars/Last_Feature_Prefix"
  );
}

void hideView(String refView, String refViewLast) {
  copyFieldValue(refView, refViewLast);
  hideView(refView);
}

void hideStratumFeatureParens() {
  setFieldValue("Stratum_Feature/Vars/L_Paren", "");
  setFieldValue("Stratum_Feature/Vars/R_Paren", "");
}

void showStratumFeatureType() {
  String refViewLast = "Stratum_Feature/Vars/Last_Feature_Type";
  String refView     = "Stratum_Feature/General/Feature_Type";
  String refGroup    = "Stratum_Feature/General/Feature_Type_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createDropDown      ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("vocab");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);

  // Populate view
  makeVocab(refView);
  copyFieldValue(refViewLast, refView);
}

void showStratumFeaturePrefix() {
  String refViewLast = "Stratum_Feature/Vars/Last_Feature_Prefix";
  String refView     = "Stratum_Feature/General/Feature_Prefix";
  String refGroup    = "Stratum_Feature/General/Feature_Prefix_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createTextField     ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("measure");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);
  viewDef.setStyleCss         ("required");

  createView(refView, viewDef, refGroup);
  copyFieldValue(refViewLast, refView);
}

void showStratumFeatureParens() {
  setFieldValue("Stratum_Feature/Vars/L_Paren", "(");
  setFieldValue("Stratum_Feature/Vars/R_Paren", ")");
}

addOnEvent("Stratum_Feature/General/Record_Type", "click", "updateStratumFeatureFields()");
addOnEvent("Stratum_Feature", "create",   "updateStratumFeatureFields()");
addOnEvent("Stratum_Feature", "prefetch", "updateStratumFeatureToFeature()");
addOnEvent("Stratum_Feature",    "fetch", "updateStratumFeatureFields()");
/****************************** DYNAMIC UI - FCN ******************************/
void updateFcnVolume() {
  String ref       = "FCN/General/FCN_Class";
  String vocabName = getMenuValue(ref);

  if (vocabName.equals("{Sediment}")) { showFcnVolume(); return; }
  if (vocabName.equals("{Other}"   )) { showFcnVolume(); return; }

  hideFcnVolume();
}

void hideFcnVolume() {
  hideView("FCN/General/Volume_Liters");
}

void showFcnVolume() {
  String refView  = "FCN/General/Volume_Liters";
  String refGroup = "FCN/General/Volume_Liters_Group";

  if (hasView(refView)) return;

  String label      = guessArch16nVal (refView);
  String attribName = getAttributeName(refView);

  // Create view
  FormInputDef viewDef = createViewDef();
  viewDef.createTextField     ("decimal");
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("measure");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);
}

addOnEvent("FCN/General/FCN_Class", "click", "updateFcnVolume()");
addOnEvent("FCN",                "prefetch", "showFcnVolume()");
addOnEvent("FCN",                   "fetch", "updateFcnVolume()");
/******************************* CONTEXT DATES ********************************/
addOnEvent("Locus/General/Add_Date_Closed", "click", "setLocusDateClosed()");
addOnEvent("Locus", "create", "setLocusDateOpened()");

void setTimestamp(String path) {
  setFieldValue(
      path,
      new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date())
  );
}

void setLocusDateOpened() {
  String ref = "Locus/General/Date_Opened";
  setTimestamp(ref);
}

void setLocusDateClosed() {
  String ref = "Locus/General/Date_Closed";
  setTimestamp(ref);
}
/******************************* TEXTURE HELPER *******************************/
onEvent("Locus/Material_Helper/Update_Material", "click", "setTextureActual()");

void setTextureActual(){
    String soilQuery= "SELECT vocabid " +
                      "  FROM vocabulary JOIN attributekey USING (attributeid) "+
                      " WHERE attributeName = 'Material' "+
                      "   AND vocabname = '" + getMenuValue("Locus/Material_Helper/Material_Helper") + "' ";
    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    Log.d("foo1", soilQuery);

    fetchOne(soilQuery, new FetchCallback() {
        onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                Log.d("foo1", textureToSet.get(0));
                setFieldValue("Locus/Deposit/Material", textureToSet.get(0));
            } else {
                showToast("{soil_texture_no_match}");
            }
            cancelTab("Locus/Material_Helper", false);
            showTab("Locus/Deposit");
        }
    });
}
/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by user.                                          */
/******************************************************************************/
delOnEvent("Control/Search", "show", "search()");
addOnEvent("Control/Search", "show", "populateSelectUser()");
addOnEvent("Control/Search", "show", "populateSite()");

addOnEvent("Control/Search/Select_User", "click", "search()");
addOnEvent("Control/Search/Select_Site", "click", "search()");

void populateSelectUser(){
  String refSearchUsers = "Control/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null "+
                                   " UNION " +
                                   "SELECT -1, '{All}'";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
      search();
    }
  });
}

void populateSite() {
  String refSite = "Control/Search/Select_Site";

  String q = "";
  q += " SELECT uuid, response, attributename, measure";
  q += "   FROM latestNonDeletedAentvalue";
  q += "   JOIN latestNonDeletedArchEntFormattedIdentifiers USING (uuid)";
  q += "   JOIN attributekey USING (attributeid)";
  q += "  WHERE attributename = 'Site Site Name'";
  q += "     OR attributename = 'Site Year of Campaign'";

  FetchCallback popSite = new FetchCallback() {
    onFetch(result) {
      List normalised = normaliseSiteResult(result);
      populateDropDown(refSite, normalised);
    }
  };

  fetchAll(q, popSite);
}

List normaliseSiteResult(List result) {
  Map  normalisedResultMap  = new HashMap();
  List normalisedResultList = new ArrayList();

  for (List row : result) {
    String uuid     = row.get(0);
    String response = row.get(1);
    String attrName = row.get(2);
    String attrVal  = row.get(3);

    List mapRow = normalisedResultMap.get(uuid);
    mapRow = updateMapRow(mapRow, "Response", response);
    mapRow = updateMapRow(mapRow, attrName,   attrVal);

    normalisedResultMap.put(uuid, mapRow);
  }

  insertListRow(normalisedResultList, "", "", "{All}");
  for (List val : normalisedResultMap.values()) {
    String response = val.get(0);
    String siteName = val.get(1);
    String siteYear = val.get(2);

    insertListRow(normalisedResultList, siteName, siteYear, response);
  }

  return normalisedResultList;
}

List updateMapRow(List row, String key, String val) {
  String RESPONSE         = "Response";
  String SITE_NAME        = "Site Name";
  String YEAR_OF_CAMPAIGN = "Year of Campaign";

  if (row == null) {
    row = new ArrayList();
    row.add("");
    row.add("");
    row.add("");
  } else {
    row = new ArrayList(row);
  }

  if (key == null)
    return row;
  else if (key.contains(RESPONSE        )) row.set(0, val);
  else if (key.contains(SITE_NAME       )) row.set(1, val);
  else if (key.contains(YEAR_OF_CAMPAIGN)) row.set(2, val);

  return row;
}

void insertListRow(
    List   normalisedList,
    String siteName,
    String siteYear,
    String response
) {
    List normalisedRow = new ArrayList();
    normalisedRow.add(siteName + SEP + siteYear);
    normalisedRow.add(response);

    normalisedList.add(normalisedRow);
}

// Overrides auto-generated definition
void search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";
  String refSelectSite  = tabgroup + "/Search/Select_Site";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String user = getFieldValue(refSelectUser);
  String name = getSearchSiteName(refSelectSite);
  String year = getSearchSiteYear(refSelectSite);
  if (isNull(user)) return;
  String searchQuery = "SELECT uuid, response " +
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  " +
                       " WHERE uuid in (SELECT uuid " +
                       "                  FROM latestNonDeletedArchEntIdentifiers " +
                       "                 WHERE measure LIKE '{term}%'  " +
                       "                   AND ( aenttypename LIKE '{type}' OR '' = '{type}' ) " +
                       "                   AND ( userid = {user} OR -1 = {user}) " +
                       "                ) " +
                       "  AND  ( " +
                       "           ('{name}' = '\\0' AND '{year}' = '\\0') OR" +
                       "           uuid IN (" +
                       "            SELECT uuid" +
                       "              FROM latestnondeletedaentvalue" +
                       "              JOIN attributekey USING (attributeid)" +
                       "             WHERE attributename IN " + ATTRIBS_SITE_NAME +
                       "               AND measure = '{name}'" +
                       "               AND uuid IN (" +
                       "                    SELECT uuid" +
                       "                      FROM latestnondeletedaentvalue" +
                       "                      JOIN attributekey USING (attributeid)" +
                       "                     WHERE attributename IN " + ATTRIBS_YEAR_OF_CAMPAIGN +
                       "                       AND measure = '{year}'" +
                       "               )" +
                       "           )" +
                       "       )" +
                       " ORDER BY response " +
                       " LIMIT ? " +
                       "OFFSET ? ";
  searchQuery = replaceFirst(searchQuery, "{term}", term);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{type}", type);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{user}", user);
  searchQuery = replaceFirst(searchQuery, "{name}", name);
  searchQuery = replaceFirst(searchQuery, "{year}", year);
  searchQuery = replaceFirst(searchQuery, "{name}", name);
  searchQuery = replaceFirst(searchQuery, "{year}", year);

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

String getSearchSiteName(String ref) {
  return getSearchSiteField(ref, 0);
}

String getSearchSiteYear(String ref) {
  return getSearchSiteField(ref, 1);
}

String getSearchSiteField(String ref, int index) {
  String   nameYear = getFieldValue(ref);
  if (isNull(nameYear))
    nameYear = "";

  String[] splitted = nameYear.split(SEP);
  if (index < splitted.length)
    return splitted[index];
  else
    return "\\0";
}
/***************************** CUSTOM VALIDATION ******************************/

String getName(String ref, String defaultName) {
  String refOri = "Locus/Cut/Orientation_Degree";

  if (ref.equals(refOri))
    return defaultName + " {Must_be_between_0_0_and_90_0}";

  return defaultName;
}

String getCond(String ref, String defaultCond) {
  String refTab  = getTabRef(ref);

  if (refTab.equals("Locus/Cut"      ))
    return "isSelected(\"Locus/General/Locus_Type\", \"{Cut}\")";
  if (refTab.equals("Locus/Deposit"  ))
    return "isSelected(\"Locus/General/Locus_Type\", \"{Deposit}\")" +
      " ||  isSelected(\"Locus/General/Locus_Type\", \"{Natural}\")";
  if (refTab.equals("Locus/Skeleton" ))
    return "isSelected(\"Locus/General/Locus_Type\", \"{Skeleton}\")";
  if (refTab.equals("Locus/Construction"))
    return "isSelected(\"Locus/General/Locus_Type\", \"{Construction}\")";

  if (ref.equals("Stratum_Feature/General/Feature_Prefix"))
    return "isSelected(\"Stratum_Feature/General/Record_Type\", \"{Feature}\")";

  return defaultCond;
}

// Overrides autogenerated definition
boolean isValidField(String ref) {
  if (ref.equals("Site/Site/Trench_ID"))
    return isValidTrenchId();

  String refOri = "Locus/Cut/Orientation_Degree";
  if (ref.equals(refOri)) {
    // Do range check
    String val = getFieldValue(refOri);
    double dblVal;
    try {
      dblVal = Double.parseDouble(val);
    } catch(NumberFormatException e) {
      dblVal = -1.0;
    }

    double fltMin =  0.0;
    double fltMax = 90.0;

    return dblVal >= fltMin &&
           dblVal <= fltMax;
  }

  return !isNull(getFieldValue(ref)); // Do blank check
}

// Overrides autogenerated definition
List fieldPair(String ref, String name, String cond) {
  String refOri = "Locus/Cut/Orientation_Degree";

  name = getName(ref, name);
  cond = getCond(ref, cond);

  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);

  return fp;
}
/******************************** DATE CLOSED *********************************/
addOnEvent("Date_Closed/Date_Closed/Set_Date_Closed", "click", "setDateClosed()");
addOnEvent("Date_Closed/Date_Closed/Cancel",          "click", "goBack()");

// Overrides autogenerated function
void onClickTrenchSetDateClosed() {
  String head     = "{proceed_to_date_picker_head}";
  String body     = "{proceed_to_date_picker_body}";
  String cbOkay   = "goToDateClosedTabGroup()";
  String cbCancel = "";

  showAlert(head, body, cbOkay, cbCancel);
}

void goToDateClosedTabGroup() {
  newTab("Date_Closed", true);
}

void setDateClosed() {
  String src = "Date_Closed/Date_Closed/Date_Closed";
  String dst = "Trench/Trench/Date_Closed";

  // Change the date picker's DD/MM/YYYY format to YYYY/MM/DD
  String val;
  val = getFieldValue(src);
  val = val.split("/")[2] + "/" +
        val.split("/")[1] + "/" +
        val.split("/")[0];

  setFieldValue(dst, val);
  goBack();
}
/************************** CREATE NEW TRENCH BUTTON **************************/

// Overrrides autogenerated definition
void onClickSiteCreateNewTrench() {
  String tabgroup = "Site";
  triggerAutoSave();

  if (isValidTrenchId()) { // `isValidTrenchId` defined in logic/shared.bsh
    setParentAndNewTrench();
  } else {
    String head  = "{invalid_trench_id_head}";
    String body  = "{invalid_trench_id_body}";
    showWarning(head, body);
  }
}

void setParentAndNewTrench() {
  String tabgroup = "Site";
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newTrench();
}
/*************************** CREATE NEW SITE BUTTON ***************************/
// Overrides autogenerated function
void onClickControlCreateNewSite() {
  // Construct validation message
  String head = "{valid_control_head}";
  String body = "";
  if (!isValidNewSiteName())    body += " - {New_Site_Name}\n";
  if (!isValidYearOfCampaign()) body += " - {Year_of_Campaign}\n";

  // Display validation prompts if required
  boolean isValid = isNull(body);
  if (isValid) {
    setParentAndNewSite();
  } else {
    body = "{valid_control_body_1}" + body + "{valid_control_body_2}";
    showWarning(head, body);
  }
}

void setParentAndNewSite() {
  parentTabgroup__ = "Control";
  newSite();
}

boolean isNotBlank(String ref) {
  String val = getFieldValue(ref);
  return !isNull(val);
}

boolean isValidNewSiteName() {
  return isNotBlank("Control/Site/New_Site_Name");
}

boolean isValidYearOfCampaign() {
  return isNotBlank("Control/Site/Year_of_Campaign");
}
/************************* FCN ENTITY LIST POPULATION *************************/
addOnEvent("Trench", "create", "populateTrenchFcns()");
addOnEvent("Trench", "fetch",  "populateTrenchFcns()");
addOnEvent("FCN",    "save",   "populateTrenchFcns()");
addOnEvent("Trench/FCNs/List_of_Existing_FCNs", "click", "loadEntity()");

void populateTrenchFcns() {
  String parentUuid    = getUuid("Trench");
  String refEntityList = "Trench/FCNs/List_of_Existing_FCNs";

  String q = "";
  q += "SELECT childuuid, response";
  q += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)";
  q += "  JOIN createdmodifiedatby USING (uuid)";
  q += " WHERE (relationshipid IN (SELECT relationshipid";
  q += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)";
  q += "                           WHERE relntypename IN ('Trench - FCN'))";
  q += "   AND parentuuid = '{parentUuid}')";
  q += "    OR (parentuuid IN (SELECT childuuid";
  q += "                       FROM parentchild";
  q += "                      WHERE relationshipid in (SELECT relationshipid";
  q += "                                                 FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)";
  q += "                                                WHERE relntypename IN ('Trench - Locus'))";
  q += "                        AND parentuuid = '{parentUuid}'))";
  q += "   AND childaenttypename IN ('FCN')";
  q += " ORDER BY parentchild.createdat DESC";
  q += " LIMIT ? OFFSET ?";
  q  = replaceFirst(q, "{parentUuid}", parentUuid);
  q  = replaceFirst(q, "{parentUuid}", parentUuid);

  populateCursorList(refEntityList, q, 25);
}


/*************************** CUSTOM DIARY TIMESTAMP ***************************/
import java.text.SimpleDateFormat;

addOnEvent("Diary", "create", "populateDiaryTimestamp()");

void populateDiaryTimestamp() {
  String           ref    = "Diary/Diary/Timestamp";
  String           fmt    = "yyyy-MM-dd";
  SimpleDateFormat dFmt   = new SimpleDateFormat(fmt);
  Date             now    = new Date();
  String           nowStr = dFmt.format(now);

  setFieldValue(ref, nowStr);
}
/******************************* FIELD CLEARING *******************************/
clearControlNewSiteName()    { clearField("Control/Site/New_Site_Name"); }
clearControlYearofCampaign() { clearField("Control/Site/Year_of_Campaign"); }
clearSiteTrenchId()          { clearField("Site/Site/Trench_ID"); }

addOnEvent("Control/Site/New_Site_Name",    "show", "clearControlNewSiteName()");
addOnEvent("Control/Site/Year_of_Campaign", "show", "clearControlYearofCampaign()");
addOnEvent("Site/Site/Trench_ID",           "show", "clearSiteTrenchId()");


/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
decAndExecIfModuleLoaded();
