import android.util.Log;

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// Used to allow entities to be saved as children
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

makeLocalID(){
  fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
  fetchOne("DROP VIEW IF EXISTS parentchild;", null);
  fetchOne("CREATE VIEW parentchild AS "+
           "SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename "+
           "  FROM (SELECT uuid, participatesverb, aenttypename, relationshipid"+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) parent "+
           "  JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
           "          FROM latestnondeletedaentreln "+
           "          JOIN relationship USING (relationshipid) "+
           "          JOIN latestnondeletedarchent USING (uuid) "+
           "          JOIN aenttype USING (aenttypeid)) child "+
           "    ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid);", null);
}
makeLocalID();

insertIntoLocalSettings(String key, String val) {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}

insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

setFieldValueFromLocalSettings(String key, String ref) {
  String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";
  fetchOne(q, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      }
    }
  });
}

newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  tab = tab.replaceAll("/$", "");
  tab = tab.replaceAll("^/", "");

  path = tab.split("/");
  switch (path.length) {
    case 0:
      break;
    case 1:
      newTabGroup(path[0]);
      break;
    case 2:
      String tabgroupString = path[0];
      String tabString      = path[0] + "/" + path[1];

      redirectTab = tabString;
      String onShowTabgroup = "if (!isNull(redirectTab)) { newTab(redirectTab); redirectTab = \"\"; }";
      addOnEvent(tabgroupString, "show", onShowTabgroup);

      newTabGroup(tabgroupString);
      newTab(tabString);
      break;
    default:
  }
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* Allows onEvent bindings for the same element to accumulate over multiple   */
/* onEvent calls instead of having later calls override earlier ones.         */
/******************************************************************************/
Map events = new HashMap();
String SEP = Character.toString ((char) 0); // Beanshell is stupid and won't let me write "\0"

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
getStatements(String ref, String event) {
  String    key = ref + SEP + event;
  ArrayList val = (ArrayList) events.get(key);
  if (val == null) {
    val = new ArrayList();
    events.put(key, val);
  }
  return val;
}

addOnEvent(String ref, String event, String statement) {
  // Calling `remove()` first ensures statement occurs once in the list, at the end.
  while(getStatements(ref, event).remove(statement));
  getStatements(ref, event).add(statement);
}

delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

bindOnEvent(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsExpr = "";
  for (String s : stmts) {
    stmtsExpr += s;
    stmtsExpr += "; ";
  }

  onEvent(ref, event, stmtsExpr);
}

bindOnEvents() {
  for (String key : events.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String dropdownItemValue = null;

getDropdownItemValue() {
  return dropdownItemValue;
}

addOnEvent("User/User_List/Users", "click", "dropdownItemValue = getFieldValue(\"User/User_List/Users\")");
addOnEvent("User/User_List/Device_Code", "click", "dropdownItemValue = getFieldValue(\"User/User_List/Device_Code\")");
addOnEvent("Control/Contexts/Trench_Dimensions", "click", "dropdownItemValue = getFieldValue(\"Control/Contexts/Trench_Dimensions\")");
addOnEvent("Context/General/Trench_Dimensions", "click", "dropdownItemValue = getFieldValue(\"Context/General/Trench_Dimensions\")");
addOnEvent("Context/General/Horizon_Boundary", "click", "dropdownItemValue = getFieldValue(\"Context/General/Horizon_Boundary\")");
addOnEvent("Context/General/Contamination", "click", "dropdownItemValue = getFieldValue(\"Context/General/Contamination\")");
addOnEvent("Context/Cut/Cut_Your_Interpretation", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Cut_Your_Interpretation\")");
addOnEvent("Context/Cut/Shape_of_Cut", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Shape_of_Cut\")");
addOnEvent("Context/Cut/Sides_of_Cut", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Sides_of_Cut\")");
addOnEvent("Context/Cut/Shape_of_Base", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Shape_of_Base\")");
addOnEvent("Context/Cut/Orientation", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Orientation\")");
addOnEvent("Context/Cut/Inclination_of_axis", "click", "dropdownItemValue = getFieldValue(\"Context/Cut/Inclination_of_axis\")");
addOnEvent("Context/Structure/CG_Context_Type", "click", "dropdownItemValue = getFieldValue(\"Context/Structure/CG_Context_Type\")");
addOnEvent("Context/Deposit/Deposit_Your_Interpretation", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Deposit_Your_Interpretation\")");
addOnEvent("Context/Deposit/Soil_Compaction_Type", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Soil_Compaction_Type\")");
addOnEvent("Context/Deposit/Soil_Texture", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Soil_Texture\")");
addOnEvent("Context/Deposit/Soil_Munsel_Color", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Soil_Munsel_Color\")");
addOnEvent("Context/Deposit/Composition_Type", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Composition_Type\")");
addOnEvent("Context/Deposit/Deposit_Bedding", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Deposit_Bedding\")");
addOnEvent("Context/Deposit/Associated_Matrices", "click", "dropdownItemValue = getFieldValue(\"Context/Deposit/Associated_Matrices\")");
addOnEvent("Context/Add/Select_a_Photograph_Log", "click", "dropdownItemValue = getFieldValue(\"Context/Add/Select_a_Photograph_Log\")");
addOnEvent("Context/Soil_Texture_Helper/Soil_Texture_Helper", "click", "dropdownItemValue = getFieldValue(\"Context/Soil_Texture_Helper/Soil_Texture_Helper\")");
addOnEvent("Context/Vars/Device_Code", "click", "dropdownItemValue = getFieldValue(\"Context/Vars/Device_Code\")");
addOnEvent("Context_Group/Add/Select_a_Photograph_Log", "click", "dropdownItemValue = getFieldValue(\"Context_Group/Add/Select_a_Photograph_Log\")");
addOnEvent("Context_Group/Vars/Device_Code", "click", "dropdownItemValue = getFieldValue(\"Context_Group/Vars/Device_Code\")");
addOnEvent("Matrix/Matrix/Component", "click", "dropdownItemValue = getFieldValue(\"Matrix/Matrix/Component\")");
addOnEvent("Photograph_Log/Photograph_Log/Scene_Type", "click", "dropdownItemValue = getFieldValue(\"Photograph_Log/Photograph_Log/Scene_Type\")");
addOnEvent("Photograph_Log/Vars/Device_Code", "click", "dropdownItemValue = getFieldValue(\"Photograph_Log/Vars/Device_Code\")");
addOnEvent("Relationship/Relationships/Relationship_Type", "click", "dropdownItemValue = getFieldValue(\"Relationship/Relationships/Relationship_Type\")");
addOnEvent("FCN/General/Collection_Method", "click", "dropdownItemValue = getFieldValue(\"FCN/General/Collection_Method\")");
addOnEvent("FCN/General/FCN_Class", "click", "dropdownItemValue = getFieldValue(\"FCN/General/FCN_Class\")");

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});


/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/
addOnEvent("Control/Contexts", "show", "updateGPSDiagnostics()");

updateGPSDiagnostics() {
  String diagnosticsRef = "Control/Contexts/GPS_Diagnostics";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/

String userMenuPath = "User/User_List/Users";

populateListForUsers(){
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null;";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(userMenuPath, result, true);
    }
  });
}

selectUser () {
  String userVocabId  = getFieldValue(userMenuPath);
  if (isNull(userVocabId)) {
    username = "";
    userid = "";
    return;
  }
  String userQ        = "SELECT userid,fname,lname,email FROM user " +
                        "WHERE  userid='" + userVocabId + "';";
  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      user = new User(
            result.get(0),
            result.get(1),
            result.get(2),
            result.get(3)
      );
      setUser(user);
      username = result.get(1) + " " + result.get(2);
      userid   = result.get(0);
    }
  };

  fetchOne(userQ, callback);
}

addOnEvent(userMenuPath, "show",  "populateListForUsers()");
addOnEvent(userMenuPath, "click", "selectUser()");


/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        Boolean hasNull =
                vocabExclusions == null
            || !vocabExclusions.contains("")
            && !vocabExclusions.contains(null);
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, hasNull);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}
makeVocab("DropDown", "Context/General/Trench_Dimensions", "Trench Dimensions");
makeVocab("CheckBoxGroup", "Context/General/Excavation_Method", "Excavation Method");
makeVocab("DropDown", "Context/General/Horizon_Boundary", "Horizon Boundary");
makeVocab("DropDown", "Context/General/Contamination", "Contamination");
makeVocab("PictureGallery", "Context/General/Context_Type", "Context Type");
makeVocab("DropDown", "Context/Cut/Cut_Your_Interpretation", "Cut Your Interpretation");
makeVocab("DropDown", "Context/Cut/Shape_of_Cut", "Shape of Cut");
makeVocab("RadioGroup", "Context/Cut/Shape_of_Corners", "Shape of Corners");
makeVocab("RadioGroup", "Context/Cut/Break_of_Slope_-_Top", "Break of Slope - Top");
makeVocab("RadioGroup", "Context/Cut/Break_of_Slope_-_Base", "Break of Slope - Base");
makeVocab("DropDown", "Context/Cut/Sides_of_Cut", "Sides of Cut");
makeVocab("HierarchicalDropDown", "Context/Cut/Shape_of_Base", "Shape of Base");
makeVocab("DropDown", "Context/Cut/Orientation", "Orientation");
makeVocab("DropDown", "Context/Cut/Inclination_of_axis", "Inclination of axis");
makeVocab("DropDown", "Context/Structure/CG_Context_Type", "CG Context Type");
makeVocab("DropDown", "Context/Deposit/Deposit_Your_Interpretation", "Deposit Your Interpretation");
makeVocab("DropDown", "Context/Deposit/Soil_Compaction_Type", "Soil Compaction Type");
makeVocab("PictureGallery", "Context/Deposit/Soil_Particle_Sorting", "Soil Particle Sorting");
makeVocab("DropDown", "Context/Deposit/Soil_Texture", "Soil Texture");
makeVocab("HierarchicalDropDown", "Context/Deposit/Soil_Munsel_Color", "Soil Munsel Color");
makeVocab("DropDown", "Context/Deposit/Composition_Type", "Composition Type");
makeVocab("DropDown", "Context/Deposit/Deposit_Bedding", "Deposit Bedding");
makeVocab("RadioGroup", "Context/Deposit/Sterile", "Sterile");
makeVocab("HierarchicalDropDown", "Context/Soil_Texture_Helper/Soil_Texture_Helper", "Soil Texture Helper");
makeVocab("DropDown", "Context/Vars/Device_Code", "Device Code");
makeVocab("RadioGroup", "Context_Group/Gen/Record_Type", "Record Type");
makeVocab("DropDown", "Context_Group/Vars/Device_Code", "Device Code");
makeVocab("DropDown", "Matrix/Matrix/Component", "Component");
makeVocab("HierarchicalPictureGallery", "Matrix/Matrix/Shape", "Shape");
makeVocab("DropDown", "Photograph_Log/Photograph_Log/Scene_Type", "Scene Type");
makeVocab("DropDown", "Photograph_Log/Vars/Device_Code", "Device Code");
makeVocab("DropDown", "FCN/General/Collection_Method", "Collection Method");
makeVocab("HierarchicalDropDown", "FCN/General/FCN_Class", "FCN Class");
makeVocab("RadioGroup", "FCN/General/Washed", "Washed");
makeVocab("RadioGroup", "FCN/General/Weighted", "Weighted");
makeVocab("RadioGroup", "FCN/General/Analyzed", "Analyzed");


/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/path to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "Please fill out the following fields:\n";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "All fields contain valid data!";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

validateContext() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Context/General/Context_AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Context/General/Context_Context_ID", "{Locus_ID}"));
  f.add(fieldPair("Context/General/Excavation_Method", "{Excavation_Method}"));
  f.add(fieldPair("Context/General/Plans", "{Plans}"));
  f.add(fieldPair("Context/General/Section_Numbers", "{Section_Numbers}"));
  f.add(fieldPair("Context/Measure/Highest_Level", "{Absolute_Height_Top__m_}"));
  f.add(fieldPair("Context/Measure/Lowest_Level", "{Absolute_Height_Bottom__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Length", "{Length__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Width", "{Width__m_}"));
  f.add(fieldPair("Context/Measure/Measure_Depth", "{Depth__m_}"));
  f.add(fieldPair("Context/Measure/Volume", "{Volume__litres_}"));
  f.add(fieldPair("Context/Cut/Cut_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Context/Cut/Shape_of_Cut", "{Shape_in_Plan}"));
  f.add(fieldPair("Context/Cut/Shape_of_Corners", "{Shape_of_Corners}"));
  f.add(fieldPair("Context/Cut/Break_of_Slope_-_Top", "{Break_of_Slope___Top}"));
  f.add(fieldPair("Context/Cut/Break_of_Slope_-_Base", "{Break_of_Slope___Base}"));
  f.add(fieldPair("Context/Cut/Sides_of_Cut", "{Sides_of_Cut}"));
  f.add(fieldPair("Context/Cut/Shape_of_Base", "{Shape_of_Base}"));
  f.add(fieldPair("Context/Cut/Orientation", "{Orientation}"));
  f.add(fieldPair("Context/Cut/Inclination_of_axis", "{Inclination_of_axis}"));
  f.add(fieldPair("Context/Structure/CG_Context_Type", "{Feature_Type}"));
  f.add(fieldPair("Context/Structure/CG_Your_description", "{Your_Description}"));
  f.add(fieldPair("Context/Deposit/Deposit_Your_Interpretation", "{Your_Interpretation}"));
  f.add(fieldPair("Context/Deposit/Soil_Compaction_Type", "{Texture}"));
  f.add(fieldPair("Context/Deposit/Soil_Texture", "{Material}"));
  f.add(fieldPair("Context/Deposit/Composition_Type", "{Deposit_Structure}"));
  f.add(fieldPair("Context/Deposit/Deposit_Bedding", "{Bedding}"));
  f.add(fieldPair("Context/Deposit/Deposit_Inclusions", "{Deposit_Inclusions}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Head", "{Head}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Body", "{Body}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Left_Arm", "{Left_Arm_and_Hand_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Right_Arm", "{Right_Arm_and_Hand_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Left_Leg", "{Left_Leg_and_Foot_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Right_Leg", "{Right_Leg_and_Foot_Location}"));
  f.add(fieldPair("Context/Skeleton/Skeleton_Condition", "{Condition}"));
  f.add(fieldPair("Context/Skeleton/Target_A_X", "{Target_A_X}"));
  f.add(fieldPair("Context/Skeleton/Target_A_Y", "{Target_A_Y}"));
  f.add(fieldPair("Context/Skeleton/Target_A_Z", "{Target_A_Z}"));
  f.add(fieldPair("Context/Int/Your_description", "{Your_Description}"));
  f.add(fieldPair("Context/Int/Your_Discussion", "{Your_Discussion}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateContextGroup() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Context_Group/Gen/Record_Type", "{Record_Type}"));
  f.add(fieldPair("Context_Group/Gen/Context_Group_AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Context_Group/Gen/Context_Group_ID", "{Stratum_Feature_ID}"));
  f.add(fieldPair("Context_Group/Gen/CG_Your_description", "{Description}"));
  f.add(fieldPair("Context_Group/Gen/CG_Your_Interpretation", "{Interpretation}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateHeight() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Height/Height/Number", "{Number}"));
  f.add(fieldPair("Height/Height/X", "{X}"));
  f.add(fieldPair("Height/Height/Y", "{Y}"));
  f.add(fieldPair("Height/Height/Z", "{Z}"));
  f.add(fieldPair("Height/Height/Notes", "{Notes}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateRelationship() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Relationship/Relationships/AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Relationship/Relationships/Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateContextGroupRelationship() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("Context_Group_Relationship/Relationships/AreaCode", "{Trench_ID}"));
  f.add(fieldPair("Context_Group_Relationship/Relationships/Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}

validateFCN() {
  List f = new ArrayList(); // Fields to be validated

  f.add(fieldPair("FCN/General/FCN_ID", "{FCN_ID}"));
  f.add(fieldPair("FCN/General/Site_Name", "{Site_Name}"));
  f.add(fieldPair("FCN/General/AreaCode", "{Trench_ID}"));
  f.add(fieldPair("FCN/General/Context_ID", "{Locus_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("Validation Results", validationMessage);
}



/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = new HashMap();

getUuid(String tabgroup) {
  tabgroupToUuid.get(tabgroup);
}

setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave  = true;
  String  id              = getUuid(tabgroup);
  List    geometry        = null;
  List    attributes      = null;
  String  parentTabgroup_ = parentTabgroup;
  Boolean userWasSet      = !username.equals("");

  parentTabgroup = null;
  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (newRecord && !isNull(parentTabgroup_)) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          getUuid(parentTabgroup_),
          uuid,
          "Parent Of",
          "Child Of",
          null
        );
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup);
      }

      execute(callback);
    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Context", "Context/General/author");
  tabgroupToAuthor.put("Context_Group", "Context_Group/Gen/author");
  tabgroupToAuthor.put("Diary", "Diary/Diary/author");
  tabgroupToTimestamp.put("Context", "Context/General/timestamp");
  tabgroupToTimestamp.put("Context_Group", "Context_Group/Gen/timestamp");
  tabgroupToTimestamp.put("Diary", "Diary/Diary/timestamp");

  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  fmt     = "yyyy-MM-dd HH:mm:ss z";
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  String authorVal    = username;
  String timestampVal = dateStr;

  if (!isNull(authorPath))    setFieldValue(authorPath,    authorVal);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, timestampVal);
}

onShowContext () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Context");
}
onShowContextGroup () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Context_Group");
}
onShowMatrix () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Matrix");
}
onShowHeight () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Height");
}
onShowPhotographLog () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Photograph_Log");
}
onShowDiary () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("Diary");
}
onShowFCN () {
  // TODO: Add some things which should happen when this tabgroup is shown
  saveTabGroup("FCN");
}

addOnEvent("Context", "show", "onShowContext()");
addOnEvent("Context_Group", "show", "onShowContextGroup()");
addOnEvent("Matrix", "show", "onShowMatrix()");
addOnEvent("Height", "show", "onShowHeight()");
addOnEvent("Photograph_Log", "show", "onShowPhotographLog()");
addOnEvent("Diary", "show", "onShowDiary()");
addOnEvent("FCN", "show", "onShowFCN()");

onClickUserModuleGuide () {
  // TODO: Add some things which should happen when this element is clicked
  newTab("User/Help", true);
}
onClickControlCreateNewLocus () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newContext();
}
onClickControlCreateNewStratum () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newContextGroup();
}
onClickControlNewFCN () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newFCN();
}
onClickControlCreateNewDiary () {
  // TODO: Add some things which should happen when this element is clicked
  parentTabgroup__ = "Control";
  newDiary();
}
onClickContextCreateRelationshipstoThisContext () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  
  newTab("Relationship", true);
}
onClickContextGroupCreateRelationshipstoThisContextGroup () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context_Group";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  
  newTab("Context_Group_Relationship", true);
}
onClickContextAddHeight () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newHeight();
}
onClickContextAddNewMatrix () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newMatrix();
}
onClickContextAddFCN () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newFCN();
}
onClickContextAddPhotographLog () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newPhotographLog();
}
onClickContextGroupAddPhotographLog () {
  // TODO: Add some things which should happen when this element is clicked
  String tabgroup = "Context_Group";
  if (isNull(getUuid(tabgroup))){
    showToast("{You_must_save_this_tabgroup_first}");
    return;
  }
  parentTabgroup   = tabgroup;
  parentTabgroup__ = tabgroup;
  newPhotographLog();
}

addOnEvent("User/User_List/Login", "click", "onClickUserLogin()");
addOnEvent("User/User_List/Module_Guide", "click", "onClickUserModuleGuide()");
addOnEvent("Control/Contexts/Create_New_Locus", "click", "onClickControlCreateNewLocus()");
addOnEvent("Control/Contexts/Create_New_Stratum", "click", "onClickControlCreateNewStratum()");
addOnEvent("Control/Contexts/New_FCN", "click", "onClickControlNewFCN()");
addOnEvent("Control/Contexts/Create_New_Diary", "click", "onClickControlCreateNewDiary()");
addOnEvent("Context/Measure/Add_Height", "click", "onClickContextAddHeight()");
addOnEvent("Context/Deposit/Soil_Texture_Helper", "click", "onClickContextSoilTextureHelper()");
addOnEvent("Context/Deposit/Add_New_Matrix", "click", "onClickContextAddNewMatrix()");
addOnEvent("Context/Relationships/Create_Relationships_to_This_Context", "click", "onClickContextCreateRelationshipstoThisContext()");
addOnEvent("Context/FCN/Add_FCN", "click", "onClickContextAddFCN()");
addOnEvent("Context/Add/Add_Photograph_Log", "click", "onClickContextAddPhotographLog()");
addOnEvent("Context_Group/Context_Group_Contexts/Create_Relationships_to_This_Context_Group", "click", "onClickContextGroupCreateRelationshipstoThisContextGroup()");
addOnEvent("Context_Group/Add/Add_Photograph_Log", "click", "onClickContextGroupAddPhotographLog()");


/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/
addOnEvent("Context/General/Button_Photo_of_Plan", "click", "attachPictureTo(\"Context/General/Photo_of_Plan\")");
addOnEvent("Context/General/Button_Photo_of_Section", "click", "attachPictureTo(\"Context/General/Photo_of_Section\")");
addOnEvent("Context/Add/Button_Photo", "click", "attachPictureTo(\"Context/Add/Photo\")");
addOnEvent("Context_Group/Add/Button_Photo", "click", "attachPictureTo(\"Context_Group/Add/Photo\")");
addOnEvent("Diary/Diary/Button_Photo", "click", "attachPictureTo(\"Diary/Diary/Photo\")");
addOnEvent("FCN/General/Button_Attach_Photograph", "click", "attachPictureTo(\"FCN/General/Attach_Photograph\")");
addOnEvent("FCN/General/Button_Attach_File", "click", "attachFileTo(\"FCN/General/Attach_File\")");

/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/
addOnEvent("Context/Add/View_Attached_Files", "click", "viewArchEntAttachedFiles(getUuid(\"Context\"))");

/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Context");
  tabgroupsToValidate.add("Context_Group");
  tabgroupsToValidate.add("Height");
  tabgroupsToValidate.add("Relationship");
  tabgroupsToValidate.add("Context_Group_Relationship");
  tabgroupsToValidate.add("FCN");

  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
          newRecord(tabgroup);
          showToast("{New_record_created}");
      } else {
          showAlert("{Warning}", "{Any_unsaved_changes_will_be_lost}", "newRecord(\""+tabgroup+"\")", "");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
          duplicateRecord(tabgroup);
      } else {
          showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
newRecord(String tabgroup) {
  cancelTabGroup(tabgroup, false);

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
deleteRecord(String tabgroup) {
  String deleteTabGroupFunction = "delete" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "deleteTabgroup()"
  eval(deleteTabGroupFunction);

  Log.d("deleteRecord", tabgroup);
}

// Duplicates the current record of the given tabgroup
duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid "+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

makeDuplicateRelationships(fetchedAttributes, String newuuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    //  saveEntitiesToHierRel(relnname, parent, child, parentverb, childverb, relSaveCallback);
    //relntypename, parentparticipatesverb, childparticipatesverb, childuuid
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String childuuid              = savedAttribute.get(3);
    saveEntitiesToHierRel(relntypename, newuuid, childuuid, parentparticipatesverb, childparticipatesverb, null);
  }
}

// generic get extra attributes
getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

loadEntity() {
  loadEntity(false);
}
loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

loadEntityFrom(String entityID) {
  if (isNull(entityID)) {
    Log.e("Module", "Cannot load an entity with a null ID.");
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      String archEntName = result.get(0).get(0);
      String loadFunction = "load" + archEntName.replaceAll(" ", "") + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}

newContext(){
  String tabgroup = "Context";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Contexts/Next_Context_AreaCode");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }
  autoNumSource = getFieldValue("Control/Contexts/Next_Context_Context_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "Context/General/Context_AreaCode";
  incAutoNum(autoNumDest);
  autoNumDest = "Context/General/Context_Context_ID";
  incAutoNum(autoNumDest);
  inheritContextFields();
  setContextDateOpened();
}

duplicateContext(){
  String tabgroup = "Context";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "Context/General/Context_AreaCode";
  incAutoNum(autoNumDest);
  autoNumDest = "Context/General/Context_Context_ID";
  incAutoNum(autoNumDest);

  populateCameraPictureGallery("Context/General/Photo_of_Plan", new ArrayList());
  populateCameraPictureGallery("Context/General/Photo_of_Section", new ArrayList());
  populateCameraPictureGallery("Context/Add/Photo", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Photo of Plan");
      excludeAttributes.add("Photo of Section");
      excludeAttributes.add("Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteContext(){
  String tabgroup = "Context";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteContext()", "doNotDelete()");
  }
}

reallyDeleteContext(){
  String tabgroup = "Context";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newContextGroup(){
  String tabgroup = "Context_Group";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Contexts/Next_Context_Group_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "Context_Group/Gen/Context_Group_ID";
  incAutoNum(autoNumDest);
  inheritContextGroupFields();
}

duplicateContextGroup(){
  String tabgroup = "Context_Group";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "Context_Group/Gen/Context_Group_ID";
  incAutoNum(autoNumDest);

  populateCameraPictureGallery("Context_Group/Add/Photo", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteContextGroup(){
  String tabgroup = "Context_Group";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteContextGroup()", "doNotDelete()");
  }
}

reallyDeleteContextGroup(){
  String tabgroup = "Context_Group";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newMatrix(){
  String tabgroup = "Matrix";


  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  inheritMatrixFields();
}

duplicateMatrix(){
  String tabgroup = "Matrix";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);




  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteMatrix(){
  String tabgroup = "Matrix";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteMatrix()", "doNotDelete()");
  }
}

reallyDeleteMatrix(){
  String tabgroup = "Matrix";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newHeight(){
  String tabgroup = "Height";


  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  inheritHeightFields();
}

duplicateHeight(){
  String tabgroup = "Height";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);




  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteHeight(){
  String tabgroup = "Height";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteHeight()", "doNotDelete()");
  }
}

reallyDeleteHeight(){
  String tabgroup = "Height";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newPhotographLog(){
  String tabgroup = "Photograph_Log";


  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  inheritPhotographLogFields();
}

duplicatePhotographLog(){
  String tabgroup = "Photograph_Log";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);




  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deletePhotographLog(){
  String tabgroup = "Photograph_Log";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeletePhotographLog()", "doNotDelete()");
  }
}

reallyDeletePhotographLog(){
  String tabgroup = "Photograph_Log";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newDiary(){
  String tabgroup = "Diary";


  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  inheritDiaryFields();
}

duplicateDiary(){
  String tabgroup = "Diary";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);


  populateCameraPictureGallery("Diary/Diary/Photo", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteDiary(){
  String tabgroup = "Diary";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteDiary()", "doNotDelete()");
  }
}

reallyDeleteDiary(){
  String tabgroup = "Diary";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}

newFCN(){
  String tabgroup = "FCN";

  String autoNumSource = "";
  autoNumSource = getFieldValue("Control/Contexts/Next_FCN_ID");
  if (isNull(autoNumSource)) {
    showWarning("{Alert}","{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  String autoNumDest = "";
  autoNumDest = "FCN/General/FCN_ID";
  incAutoNum(autoNumDest);
  inheritFCNFields();
}

duplicateFCN(){
  String tabgroup = "FCN";
  String uuidOld = getUuid(tabgroup);

  disableAutoSave(tabgroup);

  String autoNumDest = "";
  autoNumDest = "FCN/General/FCN_ID";
  incAutoNum(autoNumDest);

  populateFileList("FCN/General/Attach_File", new ArrayList());
  populateCameraPictureGallery("FCN/General/Attach_Photograph", new ArrayList());


  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      populateAuthorAndTimestamp(tabgroup);

      Boolean enable_autosave = true;

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());
          makeDuplicateRelationships(result, getUuid(tabgroup));
          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup, getUuid(tabgroup), null, null, new SaveCallback(){
        onSave(autosaveUuid, autosaveNewRecord) {
          setUuid(tabgroup, autosaveUuid);
        }
      }, enable_autosave);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(getUuid(tabgroup), extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();
      excludeAttributes.add("Attach File");
      excludeAttributes.add("Attach Photograph");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}

deleteFCN(){
  String tabgroup = "FCN";

  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteFCN()", "doNotDelete()");
  }
}

reallyDeleteFCN(){
  String tabgroup = "FCN";
  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
}


doNotDelete(){
  showToast("{Delete_Cancelled}");
}
addOnEvent("User", "show", "removeNavigationButtons()");
addOnEvent("Control", "show", "removeNavigationButtons()");
addOnEvent("Relationship", "show", "removeNavigationButtons()");
addOnEvent("Context_Group_Relationship", "show", "removeNavigationButtons()");
addOnEvent("Context", "show", "addNavigationButtons(\"Context\")");
addOnEvent("Context_Group", "show", "addNavigationButtons(\"Context_Group\")");
addOnEvent("Matrix", "show", "addNavigationButtons(\"Matrix\")");
addOnEvent("Height", "show", "addNavigationButtons(\"Height\")");
addOnEvent("Photograph_Log", "show", "addNavigationButtons(\"Photograph_Log\")");
addOnEvent("Diary", "show", "addNavigationButtons(\"Diary\")");
addOnEvent("FCN", "show", "addNavigationButtons(\"FCN\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search();");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");
addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");

entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Locus}", "Context"));
entityTypes.add(new NameValuePair("{Stratum_Feature}", "Context Group"));
entityTypes.add(new NameValuePair("{Sediment_Aggregate}", "Matrix"));
entityTypes.add(new NameValuePair("{Locus_Height}", "Height"));
entityTypes.add(new NameValuePair("{Photograph_Log}", "Photograph Log"));
entityTypes.add(new NameValuePair("{Diary}", "Diary"));
entityTypes.add(new NameValuePair("{FCN}", "FCN"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename LIKE '"+type+"' OR '' = '"+type+"' ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}


loadContextGroupFrom(String uuid) {
  String tabgroup = "Context_Group";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadMatrixFrom(String uuid) {
  String tabgroup = "Matrix";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadHeightFrom(String uuid) {
  String tabgroup = "Height";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadPhotographLogFrom(String uuid) {
  String tabgroup = "Photograph_Log";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadDiaryFrom(String uuid) {
  String tabgroup = "Diary";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}

loadFCNFrom(String uuid) {
  String tabgroup = "FCN";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  showTabGroup(tabgroup, uuid);
}


/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("FCN/General/Take_From_GPS", "click", "takePoint(\"FCN\")");

/* Takes the current point using gps. */
takePoint(String tabgroup) {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("FCN", "FCN/General/");

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("Please enter data first and let a save occur.");
    return;
  }

  Object position = getGPSPosition();
  if (position == null) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "Accuracy: " + getGPSEstimatedAccuracy();
  setFieldAnnotation(tabgroupToTabRef.get(tabgroup) + "Latitude", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab path. */
fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("FCN", "FCN/General/");

  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "Northing"  , result.get(3));
    }
  });
}

/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
incField(String ref) {
  return incField(ref, 1);
}

addOnEvent("Control", "show", "onShowAutonum()");

/* This function should only be called once since it creates event handlers,
 * otherwise multiple copies of the same handler will trigger with the event.
 */
onShowAutonum() {
  List l = new ArrayList();
  l.add("Control/Contexts/Next_Context_AreaCode");
  l.add("Control/Contexts/Next_Context_Context_ID");
  l.add("Control/Contexts/Next_Context_Group_ID");
  l.add("Control/Contexts/Next_FCN_ID");


  for (ref : l) {
    loadStartingId(ref);
  }
  for (ref : l) {
    onFocus(ref, null,  "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
  }
}

loadStartingId(String ref) {
  String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
  fetchOne(idQ, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      } else {
        setFieldValue(ref, "1");
      }
    }
  });
}

incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  destToSource.put("Context/General/Context_AreaCode", "Control/Contexts/Next_Context_AreaCode");
  destToSource.put("Context/General/Context_Context_ID", "Control/Contexts/Next_Context_Context_ID");
  destToSource.put("Context_Group/Gen/Context_Group_ID", "Control/Contexts/Next_Context_Group_ID");
  destToSource.put("FCN/General/FCN_ID", "Control/Contexts/Next_FCN_ID");

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `viewType`   the type of GUI element to be populated. It can either equal
 *              "DropDown" or "List".
 * `path`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
populateMenuWithEntities (
  String viewType,
  String path,
  String parentUuid,
  String entType,
  String relType
) {
  String getChildEntitiesQ = "" +
    "SELECT childuuid, response "+
    "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid) " +
    "  JOIN createdmodifiedatby USING (uuid) " +
    " WHERE relationshipid IN (SELECT relationshipid  " +
    "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid) " +
    "                           WHERE relntypename = '"+relType+"') " +
    "   AND parentuuid = " + parentUuid + " " +
    "   AND (childaenttypename = '"+entType+"' OR '"+entType+"' = '') " +
    " ORDER BY createdat DESC ";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response ";

  String q = null;
  if (relType.equals("")) {
    q = getEntitiesQ;
  } else {
    q = getChildEntitiesQ;
  }

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(path, result, true);
    }
  };

  switch (viewType) {
    case "DropDown":
      fetchAll(q, cbPopulateDropDown);
      break;
    case "List":
      q += " LIMIT ? OFFSET ? ";
      populateCursorList(path, q, 25);
      break;
    default:
      Log.e("populateMenuWithEntities ", "Unexpected type '" + viewType + "'");
  }
}

menus = new ArrayList();
menus.add(new String[] {
  "List",
  "Context/FCN/List_of_Related_FCNs",
  "getUuid(\"Context\")",
  "FCN",
  ""
});
menus.add(new String[] {
  "List",
  "Context/Measure/Height_List",
  "getUuid(\"Context\")",
  "Height",
  "Context - Height",
});
menus.add(new String[] {
  "DropDown",
  "Context/Deposit/Associated_Matrices",
  "getUuid(\"Context\")",
  "Matrix",
  "Context - Matrix",
});
menus.add(new String[] {
  "DropDown",
  "Context/Add/Select_a_Photograph_Log",
  "getUuid(\"Context\")",
  "Photograph Log",
  "Context - Photograph Log",
});
menus.add(new String[] {
  "DropDown",
  "Context_Group/Add/Select_a_Photograph_Log",
  "getUuid(\"Context_Group\")",
  "Photograph Log",
  "Context Group - Photograph Log",
});
for (m : menus) {
  String viewType       = m[0];
  String path           = m[1];
  String parentUuidCall = m[2];
  String entType        = m[3];
  String relType        = m[4];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + viewType       + "\"";
  functionCall += ", ";
  functionCall += "\"" + path           + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  addOnEvent(path, "show", functionCall);
}
addOnEvent("Context/Measure/Height_List", "click", "loadEntity()");
addOnEvent("Context/Deposit/Associated_Matrices", "click", "loadEntity(true)");
addOnEvent("Context/FCN/List_of_Related_FCNs", "click", "loadEntity()");
addOnEvent("Context/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");
addOnEvent("Context_Group/Add/Select_a_Photograph_Log", "click", "loadEntity(true)");

/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/***************************** UTILITY FUNCTIONS ******************************/

// Regex-free string replacement function
replaceFirst(haystack, needle, replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}
/*********************************** SHARED ***********************************/
/* Shared functions which are not general enough to be placed in utils.bsh.   */
/******************************************************************************/
String WEB_REL_NONE = "<i>None</i>";

contextIdentifer = "";

populateSquare(ref) {
  String q = "";
  q += " SELECT DISTINCT measure, measure";
  q += " FROM            latestnondeletedaentvalue";
  q += " JOIN            attributekey USING (attributeid)";
  q += " WHERE           attributename = 'Square'";
  q += " AND             measure IS NOT NULL";
  q += " ORDER BY        measure;";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(ref, result);
    }
  };

  fetchAll(q, populate);
}

setFieldToIdentifier(String identiferType, String lotRef) {
  String uuid = getUuid(identiferType);

  if (isNull(uuid)) {
    populateWebViewHtml(lotRef, "&nbsp;");
    return;
  }

  String q = "";
  q += "SELECT uuid, response ";
  q += "FROM latestnondeletedarchentformattedidentifiers ";
  q += "WHERE uuid = '%s' ";
  q  = replaceFirst(q, "%s", uuid);

  cb = new FetchCallback() {
    onFetch(result) {
      contextIdentifer  = result.get(1);

      populateWebViewHtml(lotRef, contextIdentifer);
    }
  };

  fetchOne(q, cb);
}

populateLotLabel(lotRef) {
  identiferType = "Context";
  setFieldToIdentifier(identiferType, lotRef);
}
/******************************* RELATIONSHIPS ********************************/
/* Variables and functions shared by entity-specfic code fo relating          */
/* entities.                                                                  */
/******************************************************************************/
addOnEvent("Context",                    "show", "onDisplayParent()");
addOnEvent("Relationship",               "show", "onDisplayRelationship()");
addOnEvent("Context_Group",              "show", "CGonDisplayParent()");
addOnEvent("Context_Group_Relationship", "show", "CGonDisplayRelationship()");

String WEB_REL_DESC_FMT      = "%s <u>&nbsp;%s&nbsp;</u> <u>&nbsp;%s&nbsp;</u>";
String WEB_REL_DESC_FILL     = "?";
String WEB_REL_BLANK         = "&nbsp;";

String selectedRelId         = null;
String selectedRelIdentifier = null;
String selectedChildUuid     = null;

String proposedChildUuid       = null;
String proposedChildIdentifier = null;

String displayedTabGroup     = null;

onDisplayParent()         {displayedTabGroup = "Context";}
onDisplayRelationship()   {displayedTabGroup = "Relationship";}
isDisplayedParent()       {return displayedTabGroup.equals("Context");}
isDisplayedRelationship() {return displayedTabGroup.equals("Relationship");}

CGonDisplayParent()         {displayedTabGroup = "Context_Group";}
CGonDisplayRelationship()   {displayedTabGroup = "Context_Group_Relationship";}
CGisDisplayedParent()       {return displayedTabGroup.equals("Context_Group");}
CGisDisplayedRelationship() {return displayedTabGroup.equals("Context_Group_Relationship");}

// Depends on the following globals:
//   - selectedRelId
//   - userid        (Defined by autogen)
deleteRelationship() {
  if (isNull(selectedRelId)) {
    showToast("No relationship selected");
    return;
  }

  String q = "";
  q += " INSERT INTO aentreln (uuid, relationshipid, deleted, participatesverb, userid)";
  q += " SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"'";
  q += " FROM latestnondeletedaentreln";
  q += " WHERE relationshipid = '"+selectedRelId+"'";

  DeleteCallback cb = new DeleteCallback() {
    onDelete(uuid) {
      deleteRelationshipSuceeded();
    }
  };

  fetchOne(q);
  deleteRel(selectedRelId, cb);

  selectedRelId         = null;
  selectedRelIdentifier = null;
}

deleteRelationshipSuceeded() {
  String refSelectedRelRel    = "Relationship/Relationships/Selected_Relationship";
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";
  if (isDisplayedParent()) {
    populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
    populateExistingRelationships();
  }
  if (isDisplayedRelationship()) {
    populateWebViewHtml(refSelectedRelRel,    WEB_REL_NONE);
    searchRelationship();
  }

  String CGrefSelectedRelRel    = "Context_Group_Relationship/Relationships/Selected_Relationship";
  String CGrefSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";
  if (CGisDisplayedParent()) {
    populateWebViewHtml(CGrefSelectedRelParent, WEB_REL_NONE);
    CGpopulateExistingRelationships();
  }
  if (CGisDisplayedRelationship()) {
    populateWebViewHtml(CGrefSelectedRelRel,    WEB_REL_NONE);
    CGsearchRelationship();
  }
}

getSelectedRelationshipComponent(String ref, String component) {
  String   val       = getFieldValue(ref);
  String[] arguments = null;
  if (val == null)
      return null;
  else
      arguments = val.split("~!~");

  String   relationshipName = arguments[0];
  String   parentRole       = arguments[1];
  String   childRole        = arguments[2];

  component = component.toLowerCase();
  if      (component.equals("name"))   return relationshipName;
  else if (component.equals("parent")) return parentRole;
  else if (component.equals("child"))  return childRole;
  else                                 return null;
}

loadRelatedEntity() {
  if (isNull(selectedChildUuid)) {
    showToast("No relationship selected");
    return;
  }
  loadEntityFrom(selectedChildUuid);
}

/****************************** VOCAB POPULATION ******************************/
makeVocab("DropDown", "User/User_List/Device_Code", "Device Code");
makeVocab("DropDown", "Control/Contexts/Trench_Dimensions", "Trench Dimensions");
/**************************** USER TAB VALIDATION *****************************/
/* The autogen defines its own `onClickUserLogin` function. This is           */
/* overridden using @POSTPROC.                                                */
/******************************************************************************/

onClickUserLogin () {
  String refUsers      = userMenuPath; // Defined by autogen
  String refDeviceCode = "User/User_List/Device_Code";

  String vocabIdUsers      = getFieldValue(refUsers);
  String vocabIdDeviceCode = getFieldValue(refDeviceCode);

  Boolean isSelectedUsers      = !isNull(vocabIdUsers);
  Boolean isSelectedDeviceCode = !isNull(vocabIdDeviceCode);

  if (!isSelectedUsers)      { noUsersSelected();      return; }
  if (!isSelectedDeviceCode) { noDeviceCodeSelected(); return; }

  newTab("Control", true);
}

noUsersSelected() {
  String msgHead = "No User selected";
  String msgBody = "A User must be selected in order to log in.";
  showWarning(msgHead, msgBody);
}

noDeviceCodeSelected() {
  msgHead = "No {Device_Code} Selected";
  msgBody = "A {Device_Code} must be selected in order to log in.";
  showWarning(msgHead, msgBody);
}
/***************************** FIELD INHERITANCE ******************************/
/* Linked using @POSTPROC.                                                    */
/******************************************************************************/
String moduleYear     = new java.text.SimpleDateFormat("yy").format(new Date());
String moduleSiteCode = "BK" + moduleYear;

// Overrides autogenerator's definition
incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val);
  if (!ref.equals("Control/Contexts/Next_Context_AreaCode"))
    inc += 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

copyFieldValue(src, dst) {
  Boolean doFindVocabId = true;
  copyFieldValue(src, dst, doFindVocabId);
}

copyFieldValue(src, dst, doFindVocabId) {
  String vocabIdSrc  = getFieldValue(src);

  String attrNameSrc = src.split("\\/")[2];
  String attrNameDst = dst.split("\\/")[2];

  attrNameSrc = attrNameSrc.replaceAll("_", " ");
  attrNameDst = attrNameDst.replaceAll("_", " ");

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return;
  }

  String q = "";
  q += "    SELECT vocabid";
  q += "      FROM vocabulary";
  q += " LEFT JOIN attributekey";
  q += "     USING (attributeid)";
  q += "     WHERE attributename = '{attrNameDst}'";
  q += "       AND vocabname";
  q += "        IN (";
  q += "                 SELECT vocabname";
  q += "                   FROM vocabulary";
  q += "              LEFT JOIN attributekey";
  q += "                  USING (attributeid)";
  q += "                  WHERE attributename = '{attrNameSrc}'";
  q += "                    AND vocabid       = '{vocabIdSrc}'";
  q += "           )";
  q  = replaceFirst(q, "{vocabIdSrc}",  vocabIdSrc );
  q  = replaceFirst(q, "{attrNameSrc}", attrNameSrc);
  q  = replaceFirst(q, "{attrNameDst}", attrNameDst);


  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      String vocabIdDst = result.get(0);
      showWarning(vocabIdDst, q);
      showWarning(dst, vocabIdDst);
      setFieldValue(dst, vocabIdDst);
    }
  };

  fetchOne(q, populate);
}

inheritContextFields() {
  copyFieldValue(
    "Control/Contexts/Team_Members",
    "Context/General/Team_Members"
  );

  copyFieldValue(
    "Control/Contexts/Trench_Dimensions",
    "Context/General/Trench_Dimensions"
  );

  copyFieldValue(
    "Control/Contexts/Trench_Dimensions",
    "Context/General/Trench_Dimensions"
  );

  copyFieldValue(
    "User/User_List/Device_Code",
    "Context/Vars/Device_Code"
  );

  setFieldValue(
    "Context/Vars/Site_Code",
    moduleSiteCode
  );
}

inheritContextGroupFields() {
  //BEWARE! Weird formatting!
  if (parentTabgroup__.equals("Context"))
  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Context_Group/Gen/Context_Group_AreaCode",
    false
  );

  copyFieldValue(
    "User/User_List/Device_Code",
    "Context_Group/Vars/Device_Code"
  );

  setFieldValue(
    "Context_Group/Vars/Site_Code",
    moduleSiteCode
  );
}

inheritMatrixFields() {
  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Matrix/Vars/AreaCode",
    false
  );

  copyFieldValue(
    "Context/General/Context_Context_ID",
    "Matrix/Vars/Context_ID",
    false
  );
}

inheritHeightFields() {
  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Height/Vars/AreaCode",
    false
  );

  copyFieldValue(
    "Context/General/Context_Context_ID",
    "Height/Height/Height_Context_ID",
    false
  );
}

inheritSampleFields() {
  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Sample/Vars/AreaCode",
    false
  );

  copyFieldValue(
    "Context/General/Context_Context_ID",
    "Sample/Deposit_Samples/Context_ID",
    false
  );

  copyFieldValue(
    "User/User_List/Device_Code",
    "Sample/Vars/Device_Code"
  );

  setFieldValue(
    "Sample/Vars/Site_Code",
    moduleSiteCode
  );
}

inheritSpecialFindFields() {
  copyFieldValue(
    "Context/General/Context_Context_ID",
    "Special_Find/Special_Find/Context_ID",
    false
  );

  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Special_Find/Vars/AreaCode",
    false
  );

  copyFieldValue(
    "User/User_List/Device_Code",
    "Special_Find/Vars/Device_Code"
  );

  setFieldValue(
    "Special_Find/Vars/Site_Code",
    moduleSiteCode
  );
}

inheritPhotographLogFields() {
  //BEWARE! Weird formatting!
  if (parentTabgroup__.equals("Context"))
  copyFieldValue(
    "Context/General/Context_Context_ID",
    "Photograph_Log/Photograph_Log/Photo_Context_ID",
    false
  );

  //BEWARE! Weird formatting!
  if (parentTabgroup__.equals("Context_Group"))
  copyFieldValue(
    "Context_Group/Gen/Context_Group_ID",
    "Photograph_Log/Photograph_Log/Photo_Context_Group_ID",
    false
  );

  copyFieldValue(
    "Context/General/Context_AreaCode",
    "Photograph_Log/Vars/AreaCode",
    false
  );

  copyFieldValue(
    "User/User_List/Device_Code",
    "Photograph_Log/Vars/Device_Code"
  );

  setFieldValue(
    "Photograph_Log/Vars/Site_Code",
    moduleSiteCode
  );
}

// Don't delete me. This simplifies the code in @POSTPROC.
inheritDiaryFields() {
  return;
}

inheritFCNFields() {
  copyFieldValue(
    "Context/General/Context_Context_ID",
    "FCN/General/Context_ID",
    false
  );
  copyFieldValue(
    "Context/General/Context_AreaCode",
    "FCN/General/AreaCode",
    false
  );
}
/******************************* RELATIONSHIPS ********************************/
/* Context-to-Context relationships.                                          */
/*                                                                            */
/* Uses functions from logic/relationships-shared.bsh                         */
/*                                                                            */
/* Modifies onClickContextCreateRelationshipstoThisContext using @POSTPROC.   */
/******************************************************************************/
//////////////////// FUNCTIONS AFFECTING CONTEXT TAB GROUP /////////////////////
addOnEvent("Context",                                    "show",  "initParentRelationshipGlobals()");
addOnEvent("Context",                                    "show",  "populateExistingRelationships()");
addOnEvent("Context/Relationships/Load_Related_Context", "click", "loadRelatedEntity()");

addOnEvent("Context/Relationships/Existing_Relationships_to_This_Context", "click", "selectRelationship()");
addOnEvent("Context/Relationships/Delete_Relationship",                    "click", "deleteRelationship()");

String selectedChildUuid = null;

initParentRelationshipGlobals() {
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

populateExistingRelationships(){
  String tabGroup    = "Context";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context/Relationships/Existing_Relationships_to_This_Context";

  String q = getRelatedChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

selectRelationship() {
  String refSelectedRelParent = "Context/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

loadRelatedEntity() {
  if (isNull(selectedChildUuid)) {
    showToast("No relationship selected");
    return;
  }
  loadEntityFrom(selectedChildUuid);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Relationship",                                      "show",  "initRelationshipRelationshipGlobals()");
addOnEvent("Relationship/Relationships/Add_Relationship",       "click", "addRelationship()");
addOnEvent("Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Relationship/Relationships/Existing_Relationships", "click", "selectExistingRelationship()");
addOnEvent("Relationship/Relationships/Relationship_Type",      "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "searchRelationship()");
addOnEvent("Relationship/Relationships/Unrelated_Contexts",     "click", "selectUnrelatedEntity()");

String proposedChildUuid       = null;
String proposedChildIdentifier = null;

initRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = null;

  populateParentIdentiferRelationships();
  populateRelationshipType();
  populateProposedRelationship();
  clearSearch();
}

populateRelationshipType() {
  refRelationshipType = "Relationship/Relationships/Relationship_Type";

  String q = "";
  q += "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%Context%' ";
  q += "   AND relntypename not like '%Special Find%' ";
  q += " UNION ";
  q += " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%Context%' ";
  q += "   AND relntypename not like '%Special Find%' ";
  q += " ORDER BY relntypeid, name";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(refRelationshipType, result);
    }
  };

  fetchAll(q, populate);
}

populateProposedRelationship() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = getSelectedRelationshipComponent(refRelType, "parent");
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

searchRelationship() {
  String parentTabGroup = "Context";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Relationship";
  String refUnrelated = "Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";
  String refRelType   = "Relationship/Relationships/Relationship_Type";
  String refAreaCode  = "Relationship/Relationships/AreaCode";
  String refContextId = "Relationship/Relationships/Context_ID";

  String areaCode   = getFieldValue(refAreaCode);
  String contextId  = getFieldValue(refContextId);
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(areaCode)) {
    msgHead  = "Trench ID required";
    msgBody  = "Searching requires that the Trench ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(contextId)) {
    msgHead  = "Locus ID required";
    msgBody  = "Searching requires that the Locus ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename = 'Context AreaCode'";
  unrelatedQ += "            AND measure = '{Context_AreaCode}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename = 'Context Context ID'";
  unrelatedQ += "                    AND measure = '{Context_Context_ID}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_AreaCode}",   areaCode  );
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_Context_ID}", contextId );
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",         parentRole);

  relatedQ += getRelatedChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  populateProposedRelationship();
}

clearSearch() {
  String refUnrelated = "Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

selectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  populateProposedRelationship();
}

addRelationship() {
  String parentTabGroup = "Context";
  String refRelType     = "Relationship/Relationships/Relationship_Type";

  String relName    = getSelectedRelationshipComponent(refRelType, "name");
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = getSelectedRelationshipComponent(refRelType, "parent");
  String childRole  = getSelectedRelationshipComponent(refRelType, "child");
  String callback   = "addRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Locus selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

addRelationshipSucceeded() {
  String refProposedRel = "Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  searchRelationship();
}

selectExistingRelationship() {
  String refSelectedRelRel = "Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

populateParentIdentiferRelationships() {
  String lotRef = "Relationship/Relationships/Parent_Identifier";
  populateLotLabel(lotRef); // Defined in logic/shared.bsh
}

getRelatedChildQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = contextIdentifer;

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename NOT like '% - %') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}
/******************************* RELATIONSHIPS ********************************/
/* Context Group to Context relationships.                                    */
/*                                                                            */
/* Uses functions and globals from logic/relationships-shared.bsh             */
/*                                                                            */
/* Modifies onClickContextGroupCreateRelationshipstoThisContextGroup using    */
/* @POSTPROC.                                                                 */
/******************************************************************************/
//////////////// FUNCTIONS AFFECTING "CONTEXT GROUP" TAB GROUP /////////////////
addOnEvent("Context_Group",                                    "show",  "CGinitParentRelationshipGlobals()");
addOnEvent("Context_Group",                                    "show",  "CGpopulateExistingRelationships()");
addOnEvent("Context_Group/Context_Group_Contexts/Load_Related_Context", "click", "loadRelatedEntity()");

addOnEvent("Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group", "click", "CGSelectRelationship()");
addOnEvent("Context_Group/Context_Group_Contexts/Delete_Relationship",                    "click", "deleteRelationship()");

CGinitParentRelationshipGlobals() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(refSelectedRelParent, WEB_REL_NONE);
}

CGpopulateExistingRelationships(){
  String tabGroup    = "Context_Group";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context_Group/Context_Group_Contexts/Existing_Relationships_to_This_Context_Group";

  String q = getCGChildQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

CGSelectRelationship() {
  String refSelectedRelParent = "Context_Group/Context_Group_Contexts/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(refSelectedRelParent, selectedRelIdentifier);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Context_Group_Relationship",                                      "show",  "CGinitRelationshipRelationshipGlobals()");
addOnEvent("Context_Group_Relationship/Relationships/Add_Relationship",       "click", "CGaddRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Existing_Relationships", "click", "CGselectExistingRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGpopulateProposedRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Search",                 "click", "CGsearchRelationship()");
addOnEvent("Context_Group_Relationship/Relationships/Unrelated_Contexts",     "click", "CGselectUnrelatedEntity()");

CGinitRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  selectedRelId           = null;
  proposedChildIdentifier = null;
  selectedRelIdentifier   = null;

  CGpopulateParentIdentiferRelationships();
  CGpopulateProposedRelationship();
  CGclearSearch();
}

CGpopulateProposedRelationship() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = "includes";
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(refProposedRel, webviewHtml);
}

CGsearchRelationship() {
  String parentTabGroup = "Context_Group";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Context_Group_Relationship";
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";
  String refAreaCode  = "Context_Group_Relationship/Relationships/AreaCode";
  String refContextId = "Context_Group_Relationship/Relationships/Context_ID";

  String areaCode   = getFieldValue(refAreaCode);
  String contextId  = getFieldValue(refContextId);
  String parentRole = "includes";
  String unrelatedQ = "";
  String relatedQ   = "";

  if (isNull(areaCode)) {
    msgHead  = "Trench ID required";
    msgBody  = "Searching requires that the Trench ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(contextId)) {
    msgHead  = "Locus ID required";
    msgBody  = "Searching requires that the Locus ID field is filled in.";
    showWarning(msgHead, msgBody);
    return;
  }

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers";
  unrelatedQ += "  WHERE uuid IN (";
  unrelatedQ += "         SELECT uuid";
  unrelatedQ += "           FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid)";
  unrelatedQ += "          WHERE attributename = 'Context AreaCode'";
  unrelatedQ += "            AND measure = '{Context_AreaCode}'";
  unrelatedQ += "            AND uuid IN (";
  unrelatedQ += "                 SELECT uuid";
  unrelatedQ += "                   FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                  WHERE attributename = 'Context Context ID'";
  unrelatedQ += "                    AND measure = '{Context_Context_ID}')";
  unrelatedQ += "            AND uuid NOT IN (";
  unrelatedQ += "                 SELECT childuuid";
  unrelatedQ += "                   FROM parentchild";
  unrelatedQ += "                  WHERE parentuuid = '{parentUuid}'";
  unrelatedQ += "                    AND parentparticipatesverb = '{parentRole}')";
  unrelatedQ += "            AND uuid != '{parentUuid}')";
  unrelatedQ += " ORDER BY response";
  unrelatedQ += " LIMIT ? OFFSET ?";
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_AreaCode}",   areaCode  );
  unrelatedQ  = replaceFirst(unrelatedQ, "{Context_Context_ID}", contextId );
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentUuid}",         parentUuid);
  unrelatedQ  = replaceFirst(unrelatedQ, "{parentRole}",         parentRole);

  relatedQ += getCGChildQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  CGpopulateProposedRelationship();
}

CGclearSearch() {
  String refUnrelated = "Context_Group_Relationship/Relationships/Unrelated_Contexts";
  String refRelated   = "Context_Group_Relationship/Relationships/Existing_Relationships";

  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList(refUnrelated, q, 25);
  populateCursorList(refRelated,   q, 25);
}

CGselectUnrelatedEntity() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  CGpopulateProposedRelationship();
}

CGaddRelationship() {
  String parentTabGroup = "Context_Group";

  String relName    = "Context Group - Context";
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = "includes";
  String childRole  = "is included by";
  String callback   = "CGaddRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Context selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );

  proposedChildUuid       = null;
  proposedChildIdentifier = null;
}

CGaddRelationshipSucceeded() {
  String refProposedRel = "Context_Group_Relationship/Relationships/Proposed_Relationship";

  populateWebViewHtml(refProposedRel, WEB_REL_BLANK);

  CGsearchRelationship();
}

CGselectExistingRelationship() {
  String refSelectedRelRel = "Context_Group_Relationship/Relationships/Selected_Relationship";

  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(refSelectedRelRel, selectedRelIdentifier);
}

CGpopulateParentIdentiferRelationships() {
  String lotRef = "Context_Group_Relationship/Relationships/Parent_Identifier";
  setFieldToIdentifier("Context_Group", lotRef);
}

getCGChildQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String parentIdentifier = contextIdentifer;
  String relntypename     = "Context Group - Context";

  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+parentIdentifier+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, '"+parentIdentifier+"'||' '||parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid IN (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename = '"+relntypename+"') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}
/*************************** LOCAL SETTINGS ACCESS ****************************/
/* Loading and saving things in localSettings.                                */
/******************************************************************************/
addOnEvent("User/User_List/Device_Code",         "click", "saveDeviceCode()");
addOnEvent("User/User_List/Device_Code",         "show",  "loadDeviceCode()");
onFocus   ("Control/Contexts/Team_Members",      "",      "saveTeamMembers()");
addOnEvent("Control/Contexts/Team_Members",      "show",  "loadTeamMembers()");
addOnEvent("Control/Contexts/Trench_Dimensions", "click", "saveTrenchDimensions()");
addOnEvent("Control/Contexts/Trench_Dimensions", "show",  "loadTrenchDimensions()");

insertFieldValueIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

saveDeviceCode() {
  String ref = "User/User_List/Device_Code";
  insertFieldValueIntoLocalSettings(ref);
}

loadDeviceCode() {
  String ref = "User/User_List/Device_Code";
  setFieldValueFromLocalSettings(ref, ref);
}

saveTeamMembers() {
  String ref = "Control/Contexts/Team_Members";
  insertFieldValueIntoLocalSettings(ref);
}

loadTeamMembers() {
  String ref = "Control/Contexts/Team_Members";
  setFieldValueFromLocalSettings(ref, ref);
}

saveTrenchDimensions() {
  String ref = "Control/Contexts/Trench_Dimensions";
  insertFieldValueIntoLocalSettings(ref);
}

loadTrenchDimensions() {
  String ref = "Control/Contexts/Trench_Dimensions";
  setFieldValueFromLocalSettings(ref, ref);
}
/************************ DYNAMIC UI - OPEN/CLOSE SITE ************************/
/* There are two cases to handle:                                             */
/*   (a) When a record is newly created.                                      */
/*   (b) When a record has been loaded.                                       */
/*                                                                            */
/* Case (a) is handled by events which trigger a UI update.                   */
/*                                                                            */
/* Case (b) is handled by a callback to `showTabGroup`. This is implemented   */
/* by overwriting the auto-generated record loading function using @POSTPROC. */
/******************************************************************************/
addOnEvent("Context",                                      "show",  "openContextTabs()");
addOnEvent("Context/General/Fill_in_Context_Type_Details", "click", "openContextTabs()");

openContextTabs() {
  openContextTabs(false);
}

openContextTabs(Boolean showGeneralInformationTab){
    fetchOne("SELECT vocabName FROM vocabulary WHERE vocabid = '"+getFieldValue("Context/General/Context_Type")+"';",
        new FetchCallback() {
          onFetch(name) {
            if (!isNull(name)){
                String vocab = name.get(0);
                if (vocab.equals("{Deposit}") || vocab.equals("{Natural}")){
                    cancelTab("Context/Cut", false);
                    cancelTab("Context/Structure", false);
                    cancelTab("Context/Skeleton", false);
                    showTab("Context/Deposit");
                } else if (vocab.equals("{Cut}")){
                    cancelTab("Context/Deposit", false);
                    cancelTab("Context/Structure", false);
                    cancelTab("Context/Skeleton", false);
                    showTab("Context/Cut");
                } else if (vocab.equals("{Feature_Part}")){
                    cancelTab("Context/Deposit", false);
                    cancelTab("Context/Cut", false);
                    cancelTab("Context/Skeleton", false);
                    showTab("Context/Structure");
                } else if (vocab.equals("{Skeleton}")){
                    cancelTab("Context/Deposit", false);
                    cancelTab("Context/Cut", false);
                    cancelTab("Context/Structure", false);
                    showTab("Context/Skeleton");
                } else {
                    cancelTab("Context/Cut", false);
                    cancelTab("Context/Deposit", false);
                    cancelTab("Context/Structure", false);
                    cancelTab("Context/Skeleton", false);
                }
            } else {
                cancelTab("Context/Cut", false);
                cancelTab("Context/Deposit", false);
                cancelTab("Context/Structure", false);
                cancelTab("Context/Skeleton", false);
            }
            if(showGeneralInformationTab) {
              showTab("Context/General");
            }
        }
    });
}

loadContextFrom(String uuid) {
  String tabgroup = "Context";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      openContextTabs(true);
    }
  };
  showTabGroup(tabgroup, uuid, cb);
}
/************************* DYNAMIC UI - CONTEXT GROUP *************************/
addOnEvent("Context_Group/Gen/Record_Type", "click", "updateFeatureType()");

// Fetch the "Record Type" vocab and populate the `RECORD_TYPE_VOCAB` global.
fetchRecordType() {
  RECORD_TYPE_VOCAB = new HashMap();

  attributeName = "Record Type";

  q  = " SELECT    vocabid, vocabname";
  q += " FROM      vocabulary";
  q += " LEFT JOIN attributekey";
  q += " USING    (attributeid)";
  q += " WHERE     attributename = '%s'";
  q  = replaceFirst(q, "%s", attributeName);

  populateHashMap = new FetchCallback() {
    onFetch(result) {
      for (row : result) {
        vocabId   = row.get(0);
        vocabName = row.get(1);
        RECORD_TYPE_VOCAB.put(vocabId, vocabName);
      }
    }
  };

  fetchAll(q, populateHashMap);
}

// The `fetchRecordType` call is required to set // `RECORD_TYPE_VOCAB` because
// async code in Beanshell/Java is DUMBBBB.
// Also, RECORD_TYPE_VOCAB is a HashMap: vocabId -> vocabName.
RECORD_TYPE_VOCAB = null;
fetchRecordType();

// Prefetch this vocab seeing as it will be dynamically loaded multiple times
// throughout the module's runtime.
FEATURE_TYPE_VOCAB = new ArrayList();
fetchVocab("Feature Type", FEATURE_TYPE_VOCAB);

updateFeatureType() {
  ref       = "Context_Group/Gen/Record_Type";
  vocabId   = getFieldValue(ref);
  vocabName = RECORD_TYPE_VOCAB.get(vocabId);

  if (vocabName == null            ) return;
  if (vocabName.equals("{Stratum}")) hideFeatureType();
  if (vocabName.equals("{Feature}")) showFeatureType();
}

hideFeatureType() {
  uuid           = getUuid("Context_Group");
  refView        = "Context_Group/Gen/Feature_Type";
  attribName     = refToAttribName(refView);

  if (!hasView(refView)) return;

  // Before removing the view, we get the value of the Feature Type field, which
  // is used to determine if Feature Type should be flagged as `deleted`.
  featureTypeVal = getFieldValue(refView);
  removeView(refView);

  if (isNull(featureTypeVal)) return;

  // Flag Feature Type as `deleted`.
  q  = " INSERT INTO aentvalue (UUID, UserID, AttributeID, Deleted)";
  q += " SELECT '{uuid}', {userid}, attributeid, 1";
  q += " FROM  attributekey";
  q += " WHERE attributename = '{attributename}'";
  q  = replaceFirst(q, "{uuid}", uuid);
  q  = replaceFirst(q, "{userid}", userid);
  q  = replaceFirst(q, "{attributename}", attribName);

  fetchOne(q);
}

showFeatureType() {
  refView  = "Context_Group/Gen/Feature_Type";
  refGroup = "Context_Group/Gen/Feature_Type_Group";

  if (hasView(refView)) return;

  label      = refToLabel(refView);
  attribName = refToAttribName(refView);

  // Create view
  viewDef = createViewDef();
  viewDef.createDropDown      ();
  viewDef.setLabel            (label);
  viewDef.setAttributeName    (attribName);
  viewDef.setAttributeType    ("vocab");
  viewDef.setAnnotationEnabled(true);
  viewDef.setCertaintyEnabled (true);
  viewDef.setInfoEnabled      (true);

  createView(refView, viewDef, refGroup);

  // Populate view
  Boolean hasNull = true;
  populateDropDown(refView, FEATURE_TYPE_VOCAB, hasNull);
}

refToLabel(ref) {
  String tabgroup = ref.split("/")[0];
  String tab      = ref.split("/")[1];
  String view     = ref.split("/")[2];
  String label    = view.replaceAll("_", " ");

  return label;
}

refToAttribName(ref) {
  return refToLabel(ref);
}

// Overrides autogenerated definition
loadContextGroupFrom(String uuid) {
  String tabgroup = "Context_Group";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback updateUi = new FetchCallback() {
    onFetch(result) {
      updateFeatureType();
    }
  };

  showFeatureType();
  showTabGroup(tabgroup, uuid, updateUi);
}
/******************************* CONTEXT DATES ********************************/
addOnEvent("Context/General/Add_Date_Closed", "click", "setContextDateClosed()");

setTimestamp(String path) {
  setFieldValue(path, new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss z").format(new Date()));
}

// Linked using @POSTPROC
setContextDateOpened() {
  String ref = "Context/General/Date_Opened";
  setTimestamp(ref);
}

setContextDateClosed() {
  String ref = "Context/General/Date_Closed";
  setTimestamp(ref);
}
/******************************* TEXTURE HELPER *******************************/
onEvent("Context/Soil_Texture_Helper/Update_Soil_Texture", "click", "setTextureActual()");

// Overrides the original function definition using @POSTPROC.
onClickContextSoilTextureHelper () {
  showTab("Context/Soil_Texture_Helper");
}

setTextureActual(){
    String soilQuery= "SELECT vocabid " +
                      "  FROM vocabulary JOIN attributekey USING (attributeid) "+
                      " WHERE attributeName = 'Soil Texture' "+
                      "   AND vocabname = (SELECT vocabname " +
                                          "  FROM vocabulary JOIN attributekey USING (attributeid) " +
                                          " WHERE vocabid = '"+ getFieldValue("Context/Soil_Texture_Helper/Soil_Texture_Helper") +"' "+
                                          "   AND attributeName = 'Soil Texture Helper'); ";
    //This function makes the hierarchical soil texture selector write to the texture dropdown. We should discuss.
    Log.d("foo1", soilQuery);

    fetchOne(soilQuery, new FetchCallback() {
        onFetch(textureToSet) {
            if(!isNull(textureToSet)){
                Log.d("foo1", textureToSet.get(0));
                setFieldValue("Context/Deposit/Soil_Texture", textureToSet.get(0));
            } else {
                showToast("Match not found. You shouldn't see this, but select the result manually.");
            }
            cancelTab("Context/Soil_Texture_Helper", false);
            showTab("Context/Deposit");
        }
    });
}
/****************************** SEARCH EXTENSION ******************************/
/* Implements an extension to the search page which allows users to           */
/* constrain their searches by user.                                          */
/******************************************************************************/
addOnEvent("Control/Search", "show",  "populateSelectUser()");

populateSelectUser(){
  String refSearchUsers = "Control/Search/Select_User";
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null;";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(refSearchUsers, result, false);
      search();
    }
  });
}


// Overrides auto-generated definition
search(){
  String tabgroup = "Control";
  String refEntityList  = tabgroup + "/Search/Entity_List";
  String refSearchTerm  = tabgroup + "/Search/Search_Term";
  String refEntityTypes = tabgroup + "/Search/Entity_Types";
  String refSelectUser  = tabgroup + "/Search/Select_User";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String id   = getFieldValue(refSelectUser);
  if (isNull(id)) return;
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename LIKE '"+type+"' OR '' = '"+type+"' ) "+
                       "                   AND userid = "+id+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS(tabgroup);

  Log.d("Module", "Search query: " + searchQuery);
}

/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
